{"diagram":{"image":{"height":200,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","width":200,"y":0,"x":0},"elements":{"id":"root","structure":"mind_right","leftChildren":[],"title":"JVM知识点导图<br>","root":true,"background":"#fafafa","theme":"red","children":[{"id":"010b308004b0","title":"JVM与Java体系结构<br>","lineStyle":{"randomLineColor":"rgb(232, 124, 37)"},"summaries":[],"parent":"root","children":[{"id":"e49f7566d0eb","title":"Java虚拟机整体架构祥图","link":{"title":"详图1","value":"https://www.processon.com/diagraming/5ed057725653bb79c10acd1e","type":"url"},"children":[{"id":"c6930c932e95","title":"JAVA文件--&gt;字节码文件--&gt;JAVA虚拟机","children":[],"parent":"e49f7566d0eb","image":{"w":926,"h":818,"url":"https://cdn.processon.com/600d7bb85653bb20ced610b4?e=1611499976&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:NaKzv2pgACCv3NTF82-rITVvSDY="}},{"id":"808e75aceb40f11b","title":"说一下 JVM 的主要组成部分及其作用？<br>","style":{"font-weight":"bold"},"parent":"e49f7566d0eb","children":[{"id":"461abec47f348c48","title":"类加载子系统：加载字节码文件到运行数据区的方法区","parent":"808e75aceb40f11b","children":[]},{"id":"23fbf961240493ad","title":"执行引擎：执行字节码文件中的指令","parent":"808e75aceb40f11b","children":[]},{"id":"8dfe2f41328fe48c","title":"本地方法接口：java调用其他语言的接口，与本地资源交互","parent":"808e75aceb40f11b","children":[]},{"id":"0adc832bb616db27","title":"运行时数据区：JVM的内存","children":[],"parent":"808e75aceb40f11b"},{"id":"b614138cff4c548e","title":"执行流程","children":[{"id":"e2a850d8dcc0","title":"首先通过编译器把 Java 代码转换成字节码，类加载器（ClassLoader）再把字节码加载到内存中，将其放在运行时数据区（Runtime data area）的方法区内，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。<br>","children":[],"parent":"b614138cff4c548e","icons":[]}],"parent":"808e75aceb40f11b"}],"icons":[{"text":"&#xe6c6","index":"9","color":"rgb(51, 51, 51)","name":"face"}]},{"id":"44da53093cc9","title":"Java程序运行机制","children":[{"id":"04a622e89990","title":"java代码--编译器--&gt;字节码文件--类加载器--&gt;方法区<br>","children":[],"parent":"44da53093cc9"},{"id":"21d66686c18f","title":"堆：java.lang.Class对象--&gt;封装方法区内数据结构","children":[],"parent":"44da53093cc9"}],"parent":"e49f7566d0eb"}],"parent":"010b308004b0"},{"id":"d44e4fdfe934","title":"Java代码执行过程详图","link":{"title":"详图2","value":"https://www.processon.com/diagraming/5ed057725653bb79c10acd1e","type":"url"},"parent":"010b308004b0","children":[{"id":"b5635937ab13","title":"JAVA文件--&gt;字节码文件--&gt;JAVA虚拟机","image":{"w":900,"h":642.1514818880352,"url":"http://cdn.processon.com/5ed1a239e401fd0735a2f611?e=1590800457&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:fExc8EcgqNtdkFxDJEuemmIcdr0="},"parent":"d44e4fdfe934","children":[]}]},{"id":"58e7e11e3175","title":"汇编语言、机器语言、高级语言关系","children":[{"id":"1fc06e3c4bba","title":"JAVA文件--&gt;字节码文件--&gt;JAVA虚拟机","children":[],"parent":"58e7e11e3175","image":{"w":793,"url":"http://cdn.processon.com/5ed1a2827d9c080702835476?e=1590800530&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:PJekL3fbjdLias5PHGDRjVMhQbc=","h":404}}],"parent":"010b308004b0"},{"id":"46be8ad4f170","title":"JAVA特性","children":[{"id":"492c29b2b159","title":"跨平台性","children":[{"id":"c00d743e02bf","title":"每个语言都需要转换成字节码文件，最后转换的字节码文件都能通过Java虚拟机进行运行和处理","children":[],"parent":"492c29b2b159"},{"id":"f1714edfb687","title":"随着Java7的正式发布，Java虚拟机的设计者们通过JSR-292规范基本实现在Java虚拟机平台上运行非Java语言编写的程序。","parent":"492c29b2b159","children":[]},{"id":"896d50d415ef","title":"Java虚拟机根本不关心运行在其内部的程序到底是使用何种编程语言编写的，它只关心“字节码”文件","children":[],"parent":"492c29b2b159"}],"parent":"46be8ad4f170"}],"parent":"010b308004b0"},{"id":"931630168934","title":"虚拟机：提供资源有限","parent":"010b308004b0","children":[{"id":"000a1b67f010","title":"系统虚拟机","parent":"931630168934","children":[{"id":"bbb168f8979e","title":"VMware：完全对物理计算机的仿真","parent":"000a1b67f010","children":[]}]},{"id":"8c479a1a4994","title":"程序虚拟机","parent":"931630168934","children":[{"id":"e80450cac818","title":"专门执行单个计算机程序，JVM：执行Java字节码指令","parent":"8c479a1a4994","children":[{"id":"38272bb3753b","title":"字节码包含：JVM指令集、符号集、辅助信息","children":[],"parent":"e80450cac818"}]}]}]},{"id":"f9247a11e084","title":"Java虚拟机就是二进制字节码的运行环境，负责装载字节码到其内部，解释/编译为对应平台上的机器指令执行。每一条Java指令，Java虚拟机规范中都有详细定义，如怎么取操作数，怎么处理操作数，处理结果放在哪里。","children":[{"id":"da11a96593c3","title":"跨平台性，一次编译，到处运行","children":[],"parent":"f9247a11e084"},{"id":"afdab4a10236","title":"自动垃圾回收功能","children":[],"parent":"f9247a11e084"},{"id":"a7f9f38b581a","title":"自动内存管理","children":[],"parent":"f9247a11e084"},{"id":"79c3ecf0e8ad","title":"即时编译器JIT","children":[],"parent":"f9247a11e084"}],"parent":"010b308004b0"},{"id":"50c0d2039f5e","title":"JVM的架构模型","parent":"010b308004b0","children":[{"id":"59e9012098fa","title":"基于栈式（虚拟机栈）","parent":"50c0d2039f5e","children":[{"id":"62b28f6c85cf","title":"优点","parent":"59e9012098fa","children":[{"id":"deca70e10eb8","title":"设计和实现<b>简单</b>，适用于资源受限的系统","parent":"62b28f6c85cf","children":[{"id":"a67ba3e964a7","title":"简单易实现","children":[],"parent":"deca70e10eb8"}]},{"id":"ce89e49f8a83","title":"避开了寄存器的分配难题：使用<b>零地址</b>指令方式分配","parent":"62b28f6c85cf","children":[{"id":"fc08b34a0cba","title":"<font color=\"rgba(0, 0, 0, 0)\"><b>操作栈顶元素</b></font>，不需要地址","parent":"ce89e49f8a83","children":[{"id":"6d112358fdd5","title":"零地址","children":[],"parent":"fc08b34a0cba"}]}]},{"id":"94e8d020efa6","title":"指令流中大部分都是零地址指令，执行过程依赖操作栈，指令集更小，编译器容易实现","parent":"62b28f6c85cf","children":[{"id":"ea566598c07a","title":"8位字节码，所以说指令集更小，但是完成一项操作花费的指令相对多。","parent":"94e8d020efa6","children":[]},{"id":"14e0f558fe3b","title":"指令集更小","children":[],"parent":"94e8d020efa6"}]},{"id":"5c135454e884","title":"不需要硬件支持，可<b><font color=\"rgba(0, 0, 0, 0)\">移植性</font></b>更好，更好实现<b><font color=\"rgba(0, 0, 0, 0)\">跨平台</font></b>","parent":"62b28f6c85cf","children":[{"id":"2a0a9e2fa745","title":"可移植性，跨平台","children":[],"parent":"5c135454e884"}]}]},{"id":"b8e4e594b578","title":"缺点","parent":"59e9012098fa","children":[{"id":"4298913ad2c6","title":"性能下降，实现同样的功能需要<b>更多的指令</b>，毕竟还要入栈出栈等操作","children":[{"id":"d54204097fa5","title":"需要更多的指令操作","parent":"4298913ad2c6","children":[]}],"parent":"b8e4e594b578"}]}]},{"id":"02d3f895225f","title":"指令","parent":"50c0d2039f5e","children":[{"id":"202c9b3ffeba","title":"地址、操作数","parent":"02d3f895225f","children":[{"id":"87d510985129","title":"零地址只有操作数","parent":"202c9b3ffeba","children":[]},{"id":"ee1557f2a982","title":"一地址，一个操作数","parent":"202c9b3ffeba","children":[]},{"id":"4af47d00e128","title":"二地址，一个操作数","parent":"202c9b3ffeba","children":[]}]}]},{"id":"5ae436eebd66","title":"基于寄存器式","parent":"50c0d2039f5e","children":[{"id":"717674b27701","title":"优点","parent":"5ae436eebd66","children":[{"id":"b99a743f7a47","title":"性能优秀，执行更高效","parent":"717674b27701","children":[]},{"id":"5e2916c7e6e4","title":"花费更少的指令去完成一项操作","parent":"717674b27701","children":[]}]},{"id":"d7747c8d092e","title":"缺点","parent":"5ae436eebd66","children":[{"id":"08cf34d848d4","title":"不同平台CPU架构不同，指令集架构完全依赖硬件，可移植性差","parent":"d7747c8d092e","children":[]}]},{"id":"e5d00a3ec9a4","title":"典型应用是X86的二进制指令集，比如传统的PC以及安卓的Davlik虚拟机","parent":"5ae436eebd66","children":[{"id":"7f33d56fbcd7","title":"16位字节码","parent":"e5d00a3ec9a4","children":[]}]},{"id":"f34d49f1f416","title":"大部分情况下，指令集往往以一地址指令，二地址指令和三地址指令为主。","parent":"5ae436eebd66","children":[]}]},{"id":"5c00c6539ef4","title":"javap 查看字节码","children":[{"id":"be28a4de4130","title":"-v输出附加信息","parent":"5c00c6539ef4","children":[]},{"id":"7473158e41eb","title":"-l输出行号和本地变量表","children":[],"parent":"5c00c6539ef4"},{"id":"bc12713ae058","title":"-p显示所有类和成员","children":[],"parent":"5c00c6539ef4"},{"id":"faded19dac4f","title":"-c对代码进行反汇编","children":[],"parent":"5c00c6539ef4"}],"parent":"50c0d2039f5e"}]},{"id":"770402083028","title":"JVM的生命周期","children":[{"id":"9bb3042d051e","title":"虚拟机的启动","children":[{"id":"60064578ddc1","title":"通过引导类加载器bootstrap class loader创建一个初始类来完成的，这个类是由虚拟机的具体实现指定的。","children":[],"parent":"9bb3042d051e"}],"parent":"770402083028"},{"id":"234e5e1a4b96","title":"虚拟机的执行","children":[{"id":"8eab50be641c","title":"执行一个所谓的Java程序的时候，真正执行的是一个叫Java虚拟机的进程","children":[],"parent":"234e5e1a4b96"}],"parent":"770402083028"},{"id":"b15485314d6c","title":"虚拟机的退出","children":[{"id":"99d26542ecaa","title":"程序正常执行结束","children":[],"parent":"b15485314d6c"},{"id":"b81fa252a701","title":"执行过程遇到异常或错误而异常终止","children":[],"parent":"b15485314d6c"},{"id":"6c766dfcf1b7","title":"操作系统错误导致Java虚拟机进程终止","children":[],"parent":"b15485314d6c"},{"id":"fb3385ca0f2c","title":"Runtime类或System类的exit方法、runtime类的halt方法，并且Java安全管理器允许这次exit或halt操作","children":[{"id":"bd5745f14695","title":"halt停止、停下、阻止<br>","children":[],"parent":"fb3385ca0f2c"},{"id":"538f1bd5f773","title":"exit方法源码：static native void halt0（int status）","parent":"fb3385ca0f2c","children":[]}],"parent":"b15485314d6c"},{"id":"974dda4ae046","title":"JNI(Java Native Interface)规范描述了用JNI Invocation API来加载或卸载Java虚拟机时，Java虚拟机退出的情况","children":[],"parent":"b15485314d6c"}],"parent":"770402083028"}],"parent":"010b308004b0"}],"collapsed":true},{"id":"30f15512151b","title":"类加载子系统<br>","lineStyle":{"randomLineColor":"rgb(153,204,255)"},"parent":"root","children":[{"id":"4516cb07ac1c","title":"作用","parent":"30f15512151b","children":[{"id":"0f0a0c34155a","title":"负责从文件系统或者网络中加载Class文件，Class文件开头有特定文件标识","task":{"completion":100},"parent":"4516cb07ac1c","children":[]},{"id":"7cfe16cba296","title":"Classloader只负责class文件的加载，是否可以运行，由执行引擎决定","task":{"completion":100},"parent":"4516cb07ac1c","children":[]},{"id":"0c8ceef0855c","title":"加载的类信息存到内存：方法区，除了类信息，方法区还会存放运行时常量池信息，还可能包括字符串字面量和数字常量","task":{"completion":100},"parent":"4516cb07ac1c","children":[{"id":"abcef6ac447b","title":"常量池运行时加载到内存中，即运行时常量池","task":{"completion":100},"parent":"0c8ceef0855c","children":[]}],"collapsed":true},{"id":"734d38891d7977a7","title":"类加载器加载字节码文件到内存","children":[],"parent":"4516cb07ac1c"}]},{"id":"7c631289e0c4","title":"角色","parent":"30f15512151b","children":[{"id":"46eedafde1a8","title":"截图","children":[],"parent":"7c631289e0c4","image":{"w":900,"url":"http://cdn.processon.com/5ed59ae8e401fd1919f9b2bb?e=1591060728&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:1zyQitPhEYAKA4GsWEwwZwgLWMk=","h":601.6519823788547}}]},{"id":"ebb976b488fc","title":"说一下类装载的执行过程？（5步）","style":{"font-weight":"bold"},"children":[{"id":"c28a7a75b851","title":"加载：根据查找路径找到相应的 class 文件然后导入；<br>","children":[],"parent":"ebb976b488fc"},{"id":"57d31de44ba9","title":"验证：检查加载的 class 文件的正确性；","children":[],"parent":"ebb976b488fc"},{"id":"5b83bdb12724","title":"准备：给类中的静态变量分配内存空间；","children":[],"parent":"ebb976b488fc"},{"id":"3c6bbdc6fd4a","title":"解析：虚拟机将常量池中的符号引用替换成直接引用的过程。符号引用就理解为一个标示，而在直接引用直接指向内存中的地址；","children":[],"parent":"ebb976b488fc"},{"id":"6ce54b91e65e","title":"初始化：对静态变量和静态代码块执行初始化工作。","children":[],"parent":"ebb976b488fc"}],"parent":"30f15512151b","icons":[{"index":"30","text":"&#xe67e","color":"rgb(48, 191, 191)","name":"flag"}]},{"id":"c87fad3334b1","title":"类的加载过程","children":[{"id":"2a9e767008a3","title":"加载","children":[{"id":"8418918a0a54","title":"加载刚好是加载过程的一个阶段，二者意思不能混淆","parent":"2a9e767008a3","children":[]},{"id":"01b2ee39e38c","title":"通过一个类的全限定名获取定义此类的二进制字节流","parent":"2a9e767008a3","children":[{"id":"79aff1030dab","title":"本地系统获取","parent":"01b2ee39e38c","children":[]},{"id":"f8d7d74dd8ad","title":"网络获取，Web Applet","parent":"01b2ee39e38c","children":[]},{"id":"ec0f9d287e12","title":"zip压缩包获取，jar，war","parent":"01b2ee39e38c","children":[]},{"id":"fb2417041dd5","title":"运行时计算生成，动态代理","parent":"01b2ee39e38c","children":[]},{"id":"7e881f136056","title":"有其他文件生成，jsp","parent":"01b2ee39e38c","children":[]},{"id":"27ca014b6519","title":"专有数据库提取.class文件，比较少见","parent":"01b2ee39e38c","children":[]},{"id":"5ff81052eaa0","title":"加密文件中获取，防止Class文件被反编译的保护措施","parent":"01b2ee39e38c","children":[]}]},{"id":"7092e5dfac79","title":"将这个字节流所代表的的静态存储结果转化为方法区的运行时数据结构","parent":"2a9e767008a3","children":[]},{"id":"192bdc051df0","title":"在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据访问入口","parent":"2a9e767008a3","children":[]}],"parent":"c87fad3334b1"},{"id":"4bdf86678996","title":"链接","children":[{"id":"6df908a05c1d","title":"验证","parent":"4bdf86678996","children":[{"id":"4e219e4f4918","title":"目的","parent":"6df908a05c1d","children":[{"id":"2f32b8990522","title":"确保Class文件的字节流中包含信息符合当前虚拟机要求，保证被加载类的正确性，不会危害虚拟机自身安全","parent":"4e219e4f4918","children":[]}]},{"id":"a72a109d3a09","title":"四种验证","children":[{"id":"a9de65f8cee4","title":"文件格式验证","children":[{"id":"fd56cfd4c890","title":"开头：CA FE BA BE(魔数，Java虚拟机识别)","parent":"a9de65f8cee4","children":[]},{"id":"87c05fbe25a0","title":"主次版本号","parent":"a9de65f8cee4","children":[]},{"id":"bd185373f49b","title":"常量池的常量中是否有不被支持的常量类型","parent":"a9de65f8cee4","children":[]},{"id":"3434f11cc4c9","title":"指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量","parent":"a9de65f8cee4","children":[]}],"parent":"a72a109d3a09"},{"id":"a17451bf1dbb","title":"元数据验证","children":[{"id":"a2f198241b9d","title":"对字节码描述的信息进行语义分析，保证描述符合Java规范","parent":"a17451bf1dbb","children":[]},{"id":"f77061e2a7b7","title":"类是否有父类，除了Object之外，所有的类都应该有父类","parent":"a17451bf1dbb","children":[]},{"id":"2ac20ae5a932","title":"类的父类是否继承了不允许被继承的类（被final修饰的类）","parent":"a17451bf1dbb","children":[]},{"id":"b12e87eae475","title":"如果这个类不是 抽象类，是否实现了其父类或接口中要求实现的所有方法。","parent":"a17451bf1dbb","children":[]},{"id":"5fa4a6e3a98b","title":"类的字段，方法是否与父类的产生矛盾。例如方法参数都一样，返回值不同","parent":"a17451bf1dbb","children":[]}],"parent":"a72a109d3a09"},{"id":"7d54b904defd","title":"字节码验证","children":[{"id":"149bc9b4f4d3","title":"通过数据流分析和控制流分析，确定程序语义是合法的，符合逻辑的。","parent":"7d54b904defd","children":[]},{"id":"48a52e31b8b6","title":"对类的方法体，进行校验分析，保证在运行时不会做出危害虚拟机的行为","parent":"7d54b904defd","children":[]},{"id":"5827bd2ea14a","title":"保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，不会出现类似于在操作数栈放了一个int类型的数据，使用时却按照long类型加载到本地变量表中的情况。","parent":"7d54b904defd","children":[]},{"id":"d94242381d4e","title":"保障任何跳转指令都不会跳转到方法体之外的字节码指令上。","parent":"7d54b904defd","children":[]}],"parent":"a72a109d3a09"},{"id":"04b16d886baf","title":"符号引用验证","children":[{"id":"50c80dc8e064","title":"通过字符串描述的全限定名是否能找到对应的类","parent":"04b16d886baf","children":[]},{"id":"7ee55d9400de","title":"符号引用中的类、字段、方法的可访问性是否可被当前类访问","parent":"04b16d886baf","children":[]}],"parent":"a72a109d3a09"}],"parent":"6df908a05c1d"}]},{"id":"5b5d07de5618","title":"准备","parent":"4bdf86678996","children":[{"id":"e4fe89fe7f2c","title":"为类变量（静态变量）分配内存，并且设置该类变量的初始值，即零值","children":[{"id":"62d2398121cb","title":"零值","image":{"w":848,"h":242,"url":"http://cdn.processon.com/5ed8367ae401fd6919543c27?e=1591231626&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:axA5MPjBV6XNVJX7iP1VdtqbYq0="},"parent":"e4fe89fe7f2c","children":[]}],"parent":"5b5d07de5618"},{"id":"b8cab27a45b3","title":"不包含用final修饰的static，因为final在编译的时候就会分配了，准备阶段会显示初始化","children":[],"parent":"5b5d07de5618"},{"id":"6dee46c03017","title":"不会为实例变量分配初始化，<b><font color=\"rgba(0, 0, 0, 0)\">类变量会分配在方法区中</font></b>，实例变量会随着对象一起分配到Java堆中","children":[],"parent":"5b5d07de5618"}]},{"id":"4ea78e8907e4","title":"解析","parent":"4bdf86678996","children":[{"id":"47f1a2eb8155","title":"将常量池内的符号引用转换为直接引用的过程（虚拟机栈，动态链接，解析）","parent":"4ea78e8907e4","children":[]},{"id":"01ccb7f8424d","title":"事实上，解析操作往往会伴随着JVM在执行完初始化之后再执行","parent":"4ea78e8907e4","children":[]},{"id":"1714172e4325","title":"符号引用就是一组符号来描述引用的目标。符号引用的字面量形式明确定义在Java虚拟机规范的Class文件格式中","parent":"4ea78e8907e4","children":[]},{"id":"e6e250fec7b7","title":"直接引用就是直接指向目标的指针，相对偏移量或一个间接定位到目标的句柄","parent":"4ea78e8907e4","children":[]},{"id":"92865e678735","title":"解析动作主要针对类，或接口，字段，类方法，接口方法，方法类型等。对应常量池中的CONSTANT_Class_info、CONSTANT_Fieldref_info、CONSTANT_Methodref_info","parent":"4ea78e8907e4","children":[]}]}],"parent":"c87fad3334b1"},{"id":"210b42969fae","title":"初始化","parent":"c87fad3334b1","children":[{"id":"27babe9b81ef","title":"初始化阶段是执行类构造器方法&lt;clinit&gt;()的过程","parent":"210b42969fae","children":[]},{"id":"ee192ea33c27","title":"此方法不需要定义，是javac编译器自动收集类中的所有类变量的赋值动作和静态代码块中的语句合并而来","parent":"210b42969fae","children":[{"id":"740931730c03","title":"非法的前向引用问题","children":[],"parent":"ee192ea33c27"},{"id":"5d2701125298","title":"<b><font color=\"rgba(0, 0, 0, 0)\">如果没有类变量和静态代码块，也不会有clinit</font></b>","children":[],"parent":"ee192ea33c27"}]},{"id":"16d5d8958832","title":"构造器方法中指令按照语句在源文中出现的顺序执行","parent":"210b42969fae","children":[]},{"id":"0d7df6337a9d","title":"&lt;clinit&gt;()不同于类的构造器（关联：构造器是虚拟机视角下的&lt;init&gt;()）","parent":"210b42969fae","children":[]},{"id":"09852fa5b15c","title":"若该类具有父类，JVM会保证子类的&lt;clinit&gt;()执行前，父类的&lt;clinit&gt;()已经执行完毕","children":[],"parent":"210b42969fae"},{"id":"eef4e6403b6f","title":"虚拟机必须保证一个类的&lt;clinit&gt;()方法在多线程下被同步加锁","parent":"210b42969fae","children":[]}],"collapsed":false},{"id":"ab6665a88147","title":"使用","children":[],"parent":"c87fad3334b1"},{"id":"ad0f13aa64f5","title":"卸载","children":[],"parent":"c87fad3334b1"},{"id":"ca16710641b3","title":"补充说明：","children":[{"id":"483d5a3dd8d2","title":"加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的。","children":[],"parent":"ca16710641b3"},{"id":"3c053bc4e14d","title":"解析阶段不一定，在某些情况下可以在初始化阶段之后再开始，为了支持Java语言的运行时绑定特性（也称为动态绑定或晚期绑定）","parent":"ca16710641b3","children":[]},{"id":"2c2e6eea10dd","title":"Java虚拟机规范严格规定了，有且只有六种情况，必须立即对类进行初始化","children":[{"id":"27a61257bcae","title":"1、遇到new,getstatic，putstatic或invokestatic这四条字节码指令时。","parent":"2c2e6eea10dd","children":[{"id":"e3cd5c32df6e","title":"使用new关键字实例化对象","parent":"27a61257bcae","children":[]},{"id":"769ce7c2b597","title":"读取或设置一个类型的静态字段（final修饰已在编译期将结果放入常量池的静态字段除外）","children":[],"parent":"27a61257bcae"},{"id":"864d34555ec3","title":"调用一个类型的静态方法的时候","parent":"27a61257bcae","children":[]}]},{"id":"56d9df5117da","title":"2、对类型进行反射调用，如果类型没有经过初始化，则需要触发初始化","parent":"2c2e6eea10dd","children":[]},{"id":"4584a0a3044b","title":"3、初始化类的时候，发现父类没有初始化，则先触发父类初始化","children":[],"parent":"2c2e6eea10dd"},{"id":"05516d5f7321","title":"4、虚拟机启动时，用户需要指定一个要执行的主类（包含main方法的那个类），虚拟机会初始化这个主类","children":[],"parent":"2c2e6eea10dd"},{"id":"979e21ef77ad","title":"5、只用JDK7中新加入的动态语言支持，如果一个java.lang.invoke.MethodHandler实例最后的解析结果为REF_getStatic,REF_putStatic,REF_invokeStatic，REF_newInvokeSpecial四种类型的方法句柄，并且这个方法对应的类没有进行初始化，则先触发其初始化","children":[],"parent":"2c2e6eea10dd"},{"id":"84cf3d607306","title":"6、当一个接口中定了JDK8新加入的默认方法时，如果这个接口的实现类发生了初始化，要先将接口进行初始化","children":[],"parent":"2c2e6eea10dd"}],"parent":"ca16710641b3"},{"id":"cb25b0fab5ea","title":"除了以上几种情况，其他使用类的方式被看做是对类的被动使用，都不会导致类的初始化","children":[],"parent":"ca16710641b3"}],"parent":"c87fad3334b1"}],"parent":"30f15512151b"},{"id":"98ac44c792fa","title":"简述java类加载机制?<br>","style":{"font-weight":"bold"},"parent":"30f15512151b","children":[{"id":"e4d48518d0ad","title":"JVM把描述类的数据从Class文件加载到内存（方法区），并对数据进行校验，解析和初始化，最终形成可以被JVM直接使用的java类型。<br>","children":[],"parent":"98ac44c792fa"}],"icons":[{"index":"27","text":"&#xe67e","color":"rgb(96, 160, 240)","name":"flag"}]},{"id":"b7d3e5df848e","title":"描述一下JVM加载Class文件的原理机制<br>","style":{"font-weight":"bold"},"parent":"30f15512151b","children":[],"icons":[{"index":"27","text":"&#xe67e","color":"rgb(96, 160, 240)","name":"flag"}]},{"id":"c9377251872d","title":"什么是类加载器，类加载器有哪些?<br>","style":{"font-weight":"bold"},"parent":"30f15512151b","children":[{"id":"406e7af579a3","title":"通过类的权限定名获取该类的二进制字节流的代码块叫做类加载器","children":[],"parent":"c9377251872d"},{"id":"a28ebffacfec","title":"四种类加载器","style":{"font-weight":"bold"},"parent":"c9377251872d","children":[{"id":"665a67233a8f","title":"启动类加载器(Bootstrap ClassLoader)：用来加载java核心类库，无法被java程序直接引用","parent":"a28ebffacfec","children":[]},{"id":"75106d56a6b5","title":"扩展类加载器(extensions class loader)：它用来加载 Java 的扩展库。JVM的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类","children":[],"parent":"a28ebffacfec"},{"id":"526c1144606e","title":"系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它。","parent":"a28ebffacfec","children":[]},{"id":"401549d7dd1f","title":"用户自定义类加载器，通过继承 java.lang.ClassLoader类的方式实现<br>","children":[],"parent":"a28ebffacfec"}]}],"icons":[{"index":"27","text":"&#xe67e","color":"rgb(96, 160, 240)","name":"flag"}]},{"id":"aca04fba4442","title":"类加载器分类","children":[{"id":"871e788f7933","title":"引导类加载器和自定义加载器","children":[{"id":"880d20811236","title":"概念上，将所有派生于抽象类ClassLoader的类加载器都划分为自定义加载器","parent":"871e788f7933","children":[{"id":"cc10d1d4aa85","title":"图示","image":{"w":891,"h":484,"url":"http://cdn.processon.com/5ed6e443f346fb6b02f6b148?e=1591145043&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:4_gU1ZBzIh2mYgtHE6VpBECYtUw="},"parent":"880d20811236","children":[]},{"id":"235bd78608e0","title":"类","children":[],"parent":"880d20811236","image":{"w":900,"url":"http://cdn.processon.com/5ed6e496f346fb6b02f6b15a?e=1591145126&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:kc5XhCg8I18dyPIMmQLctJauEYs=","h":460.17391304347825}}]}],"parent":"aca04fba4442"},{"id":"25cade4e8d37","title":"代码样例，获取类加载器","children":[{"id":"010bb6edb014","title":"截图","children":[],"parent":"25cade4e8d37","image":{"w":900,"h":433.36267605633805,"url":"http://cdn.processon.com/5ed6e5940791291d5dbd8a8e?e=1591145381&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:3tM-YRj_5-W5sSKR5WxLfPBIQUk="}},{"id":"af73b57641ae","title":"对于用户来说定义器来说，默认使用系统类加载器进行加载","children":[],"parent":"25cade4e8d37"},{"id":"936c38e5880f","title":"Java的核心类库，使用引导类加载器进行加载","parent":"25cade4e8d37","children":[]}],"parent":"aca04fba4442"},{"id":"7ec8cd6391bb","title":"启动类加载器","parent":"aca04fba4442","children":[{"id":"6749e5728b23","title":"C/C++语言实现，嵌套JVM内部","children":[],"parent":"7ec8cd6391bb"},{"id":"23d2cfbbe4a4","title":"用来加载Java核心类库，rt.jar,resources.jar,sun.boot.class.path路径下的内容","children":[{"id":"7a01cca6d2f9","title":"代码获取加载路径","image":{"w":892,"h":122,"url":"http://cdn.processon.com/5ed6e8790791291d5dbd8b85?e=1591146122&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:i5VVukP4QJ7cFqaW9KqvTQyybYk="},"children":[],"parent":"23d2cfbbe4a4"}],"parent":"7ec8cd6391bb"},{"id":"5a90574409f6","title":"并不继承java.lang.ClassLoader，没有父加载器","children":[],"parent":"7ec8cd6391bb"},{"id":"61b20b0db51d","title":"加载扩展类和应用程序类加载器，并指定为他们的父类加载器","children":[],"parent":"7ec8cd6391bb"},{"id":"a5a2f5649183","title":"出于安全考虑，Bootstrap启动类加载器只加载包名为java\\javax\\sun等开头的类","children":[],"parent":"7ec8cd6391bb"}]},{"id":"2c27602fa587","title":"扩展类加载器","parent":"aca04fba4442","children":[{"id":"d417b323c73c","title":"Java语言编写，由sun.misc.Launcher$ExtClassLoader实现","children":[],"parent":"2c27602fa587"},{"id":"f53412078e3d","title":"派生于ClassLoader类","parent":"2c27602fa587","children":[]},{"id":"6c308f9e0371","title":"父类加载器为启动类加载器","parent":"2c27602fa587","children":[]},{"id":"57c4b1f9db2b","title":"从java.ext.dirs系统属性所指定的目录中加载类库，或从jre/lib/ext子目录下加载类库","parent":"2c27602fa587","children":[{"id":"4dc5f786071e","title":"代码","image":{"w":769,"h":212,"url":"http://cdn.processon.com/5ed6e8e76376896c9ad50b77?e=1591146231&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:U8T5x-iPcN2ZiPv_-j3WLFe6fx4="},"parent":"57c4b1f9db2b","children":[]}]}]},{"id":"1e0a3edede8b","title":"应用程序类加载器（系统类加载器）","parent":"aca04fba4442","children":[{"id":"b4e785032730","title":"Java语言编写，由sun.misc.Launcher$AppClassLoader实现","children":[],"parent":"1e0a3edede8b"},{"id":"66efe1c0d0fd","title":"派生于ClassLoader类","parent":"1e0a3edede8b","children":[]},{"id":"77168121a67a","title":"父类加载器为扩展类加载器","children":[],"parent":"1e0a3edede8b"},{"id":"03ce80e3c3e0","title":"负责加载环境变量classpath或系统属性java.class.path指定路径下的类库","children":[],"parent":"1e0a3edede8b"},{"id":"14e2e819ea36","title":"该类加载器是程序中默认的类加载器，一般来说，Java应用的类都是由它来完成加载","children":[],"parent":"1e0a3edede8b"},{"id":"c74bb38c71a3","title":"通过ClassLoader#getSystemClassLoader（）方法可以后去到改类加载器","children":[],"parent":"1e0a3edede8b"}]},{"id":"b862b6c8ce1f","title":"用户自定义类加载器","children":[{"id":"7b9ea5b4242b","title":"为什么要用自定义类加载器","children":[{"id":"081d83fcebb3","title":"隔离加载类","children":[{"id":"ed2c8ea4f262","title":"例如使中间件的Jar包与应用程序Jar包不冲突","children":[],"parent":"081d83fcebb3"}],"parent":"7b9ea5b4242b"},{"id":"a067a35bc534","title":"修改类加载的方式","children":[{"id":"e90d4b6917a3","title":"启动类加载器必须使用，其他可以根据需要自定义加载","children":[],"parent":"a067a35bc534"}],"parent":"7b9ea5b4242b"},{"id":"1ac1643e30cd","title":"扩展加载源","children":[],"parent":"7b9ea5b4242b"},{"id":"87253f38aebf","title":"防止源码泄露","children":[{"id":"0f16a9358ab1","title":"对字节码进行加密，自定义类加载器实现解密","parent":"87253f38aebf","children":[]}],"parent":"7b9ea5b4242b"}],"parent":"b862b6c8ce1f"},{"id":"f30c5e42ec7b","title":"实现步骤","children":[{"id":"ba03e4801d65","title":"继承抽象类java.lang.ClassLoader类的方式，实现自己的类加载器","children":[],"parent":"f30c5e42ec7b"},{"id":"4ef72df96eb2","title":"1.2之前，继承并重写loadClass方法，","children":[],"parent":"f30c5e42ec7b"},{"id":"4a457d394729","title":"1.2之后，建议把自定义的类加载逻辑写在findClass()方法中","children":[],"parent":"f30c5e42ec7b"},{"id":"9fbee8832c8b","title":"如果没有太过复杂的需求，可以直接继承URLClassLoader类，可以避免自己编写findClass（）方法，及其获取字节码流的方式，使自定义类加载器编写更加简洁","children":[],"parent":"f30c5e42ec7b"}],"parent":"b862b6c8ce1f"}],"parent":"aca04fba4442"},{"id":"55945c449a61","title":"关于ClassLoader","children":[{"id":"da6d1986cc43","title":"是一个抽象类，除了启动类加载器，其他类加载器都继承自他","children":[],"parent":"55945c449a61"},{"id":"5217e1d17bcd","title":"<br>","children":[],"parent":"55945c449a61","image":{"w":900,"url":"http://cdn.processon.com/5ed6f04c5653bb1954973143?e=1591148125&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:qsJEjxVxKgvyv5T5XVKV8aC0kHs=","h":262.152133580705}}],"parent":"aca04fba4442"}],"parent":"30f15512151b","collapsed":false},{"id":"9f703c1cd784","title":"什么是双亲委派模型？","style":{"font-weight":"bold"},"parent":"30f15512151b","children":[],"icons":[{"index":"29","text":"&#xe67e","color":"rgb(255, 159, 26)","name":"flag"}]},{"id":"9b7c73819cd6","title":"双亲委派","children":[{"id":"28297178fdaa","title":"原理","children":[{"id":"7ac6624c080f","title":"Java虚拟机对Class文件采用的是按需加载，而且加载class文件时，Java虚拟机使用的是双亲委派模式，即把请求交由父类处理，它是异种任务委派模式","children":[{"id":"cb9ec40420c3","title":"截图","children":[],"parent":"7ac6624c080f","image":{"w":656,"url":"http://cdn.processon.com/5ed83772f346fb1712de0122?e=1591231874&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:QSZ9W-Q6ETf5rUXvqbRi9VGb5yc=","h":531}}],"parent":"28297178fdaa"},{"id":"7b52fbbde9c5","title":"1、如果一个类加载器收到了类加载请求，它并不会自己先去加载。而是把这个请求委托给父类的加载器去执行","parent":"28297178fdaa","children":[]},{"id":"ee972b69c4eb","title":"2、如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将达到顶层的启动类加载器","parent":"28297178fdaa","children":[]},{"id":"af9b93c2cf76","title":"3、如果父类的加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式","parent":"28297178fdaa","children":[]},{"id":"f55b400a66b6","title":"4、原创整理不易，还请扫码，运行时数据区详图关注支持","parent":"28297178fdaa","children":[]}],"parent":"9b7c73819cd6"},{"id":"840349107a02","title":"优势","children":[{"id":"0857f20a99f5","title":"避免类的重复加载","parent":"840349107a02","children":[]},{"id":"294340992804","title":"保护程序安全，防止核心API被篡改","parent":"840349107a02","children":[]}],"parent":"9b7c73819cd6"},{"id":"714f032677b4","title":"沙箱安全机制","parent":"9b7c73819cd6","children":[{"id":"e3fdb3252f18","title":"保证对Java核心源代码的保护","parent":"714f032677b4","children":[]}]}],"parent":"30f15512151b"},{"id":"893ed3da0cec","title":"补充","parent":"30f15512151b","children":[{"id":"9cda9cae6d16","title":"在JVM中表示两个class对象，是否为同一个类存在两个必要条件<br>","parent":"893ed3da0cec","children":[{"id":"85cd21173827","title":"类的完整类名必须一致，包括包名","parent":"9cda9cae6d16","children":[]},{"id":"abf139c487ea","title":"加载这个类的ClassLoader必须相同","parent":"9cda9cae6d16","children":[]}]},{"id":"2e338f705312","title":"JVM必须知道一个类型是由启动类加载器加载的，还是由用户类加载器加载的。如果是用户类加载器加载的，JVM会将这个类加载器的一个引用作为类型信息的一部分，保存到方法区中。","parent":"893ed3da0cec","children":[]}]}],"collapsed":true},{"id":"110dfb8859a1","title":"说一下JVM运行时数据区<br>","lineStyle":{"randomLineColor":"rgb(212, 164, 235)"},"parent":"root","children":[{"id":"4a110b59d400","title":"Java 虚拟机在执行 Java 程序的过程中会把它所管理的内存区域划分为若干个不同的数据区域。","task":{"completion":100},"children":[],"parent":"110dfb8859a1"},{"id":"c49d58acd7dd","title":"灰色为单独线程私有，红色为多个线程共享的","image":{"w":312,"h":289,"url":"http://cdn.processon.com/5fe5934663768932a28012fb?e=1608884566&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:LcC2XTO7y_WWMtF4fCcf1FxXPRs="},"children":[{"id":"7c3a2f13afa5","title":"线程私有：程序计数器、虚拟机栈、本地方法栈","children":[],"parent":"c49d58acd7dd"},{"id":"d3c8af3b9379","title":"线程共享：堆，方法区","children":[],"parent":"c49d58acd7dd"}],"parent":"110dfb8859a1"},{"id":"304d9d6cd1563286","title":"<b>百度：说一下JVM内存模型？分哪几个区，每个区的作用是什么？</b><br>","children":[{"id":"b82745ea000972ec","title":"程序计数器：记录下一条字节码执行指令，实现分支循环跳转、异常处理、线程恢复等功能。","children":[],"parent":"304d9d6cd1563286"},{"id":"b40427b34473a94c","title":"虚拟机栈：存储局部变量表、操作数栈、动态链接、方法返回地址等信息。Java方法调用","children":[],"parent":"304d9d6cd1563286"},{"id":"2768504d91214b66","title":"本地方法栈：本地方法调用","children":[],"parent":"304d9d6cd1563286"},{"id":"cc0d98dea6f2c4ae","title":"堆：所有线程共享，几乎所有对象实例都在堆中分配内存","children":[],"parent":"304d9d6cd1563286"},{"id":"87e49e0589e6f87c","title":"方法区：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。","parent":"304d9d6cd1563286","children":[]}],"parent":"110dfb8859a1"},{"id":"0b94eba79ceede80","title":"说一下堆和栈的区别","style":{"font-weight":"bold"},"children":[{"id":"c188dc8b708c85f1","title":"物理地址","children":[{"id":"1d1d9834b8005e0a","title":"堆：对象分配物理地址不连续，性能相对栈弱些。","children":[{"id":"357fbfc7ca144a76","title":"GC考虑分配不连续，产生算法提升性能：标记-消除，复制，标记-压缩，分代","children":[],"parent":"1d1d9834b8005e0a"}],"parent":"c188dc8b708c85f1"},{"id":"41e500df0853d61b","title":"栈：先进后出，物理地址连续，性能相对堆好些。","children":[],"parent":"c188dc8b708c85f1"}],"parent":"0b94eba79ceede80"},{"id":"f08ab9d3d2e23b24","title":"内存分配","parent":"0b94eba79ceede80","children":[{"id":"ed5337d8eeb36656","title":"堆：在运行时分配，大小不固定","children":[],"parent":"f08ab9d3d2e23b24"},{"id":"e3b938851245404c","title":"栈：在编译时分配，大小固定","parent":"f08ab9d3d2e23b24","children":[]}]},{"id":"2ab641bfe25d42e1","title":"存放内容","children":[{"id":"04a02728000b4a56","title":"堆：对象的实例和数组，更关注：数据存储","parent":"2ab641bfe25d42e1","children":[]},{"id":"7becdd7e85e3d13d","title":"栈：局部变量，操作数，动态链接，方法返回地址等信息，更关注：程序方法的执行","parent":"2ab641bfe25d42e1","children":[]}],"parent":"0b94eba79ceede80"},{"id":"e3c018f212bca64c","title":"程序可见性","parent":"0b94eba79ceede80","children":[{"id":"929fc472867cbf3e","title":"堆：所有线程共享，可见","children":[],"parent":"e3c018f212bca64c"},{"id":"1733ad804e42bd06","title":"栈：线程私有，只对线程可见，生命周期和线程相同","children":[],"parent":"e3c018f212bca64c"}]}],"parent":"110dfb8859a1","icons":[{"text":"&#xe6c6","index":"9","color":"rgb(51, 51, 51)","name":"face"}]},{"id":"4e763032b001","title":"深拷贝与浅拷贝","children":[{"id":"092a0703629d","title":"浅拷贝：增加一个指针指向已有的内存地址","children":[],"parent":"4e763032b001"},{"id":"f8ecafe0ae83","title":"深拷贝：增加一个指针指向新开辟的一块内存空间","children":[],"parent":"4e763032b001"},{"id":"da6c1572f553","title":"原内存发生变化，浅拷贝也随之变化；深拷贝则不会随之改变","children":[],"parent":"4e763032b001"}],"parent":"110dfb8859a1"},{"id":"dc473c561c6e31ab","title":"静态变量--&gt;方法区","children":[],"parent":"110dfb8859a1","icons":[{"text":"&#xe67e","index":"30","color":"rgb(48, 191, 191)","name":"flag"}]},{"id":"d48b3cc469c69ef3","title":"静态对象--&gt;堆","children":[],"parent":"110dfb8859a1","icons":[{"text":"&#xe67e","index":"31","color":"rgb(80, 194, 139)","name":"flag"}]}],"icons":[{"text":"&#xe6c6","index":"9","color":"rgb(68, 68, 68)","name":"face"}],"collapsed":true},{"id":"9ed6db6654ba","title":"程序计数器（PC寄存器）<br>","lineStyle":{"randomLineColor":"#FDB813"},"parent":"root","children":[{"id":"dc2a61720eebe802","title":"特点","parent":"9ed6db6654ba","children":[{"id":"9ecd472fd19a","title":"<font color=\"#000000\" style=\"\">运行时数据区中唯一不会出现OOM的区域，没有垃圾回收。</font>","parent":"dc2a61720eebe802","children":[]},{"id":"271625ca4e86","title":"每个线程有一个私有的程序计数器，线程之间互不影响。","children":[],"parent":"dc2a61720eebe802"},{"id":"a0993cecdde3","title":"程序计数器会存储当前线程正在执行的Java方法的JVM指令地址","children":[],"parent":"dc2a61720eebe802"},{"id":"51bd5e72aa3c","title":"如果正在执行的本地方法，这个计数器值则应为空。（undefined）","children":[],"parent":"dc2a61720eebe802"}]},{"id":"920173131f3464c7","title":"面试题","children":[{"id":"4a803fc224d55e72","title":"使用PC寄存器存储字节码指令地址有什么用<br>","image":{"w":310,"url":"https://cdn.processon.com/5fe597401e08531ceab05030?e=1608885585&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:IhfynR64zvpZ7Mx_WhTDyGKTqsQ=","h":237},"parent":"920173131f3464c7","children":[{"id":"9b835a2f9572605c","title":"因为线程是一个个的顺序执行流，CPU需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行","task":{"completion":100},"children":[],"parent":"4a803fc224d55e72"},{"id":"5c41c86397ebf1d3","title":"JVM的字节码解释器就需要通过改变PC寄存器的值来明确下一条应该执行什么样的字节码指令","task":{"completion":100},"children":[],"parent":"4a803fc224d55e72"},{"id":"095110296025a9ed","title":"记录下一条字节码执行的指令，实现分支循环跳转、异常处理、线程恢复等功能。","children":[],"parent":"4a803fc224d55e72"}]},{"id":"85329c2f43e241fc","title":"PC寄存器为什么被设定为私有的？<br>","summaries":[],"parent":"920173131f3464c7","children":[{"id":"9171af89e579024a","title":"CPU为每个线程分配时间片，多线程在一个特定的时间段内只会执行某一个线程的方法，CPU会不停地进行任务切换，线程需要中断、恢复","task":{"completion":100},"parent":"85329c2f43e241fc","children":[]},{"id":"21a92e79e95840d9","title":"CPU，多线程，分配时间片，只执行一个线程，CPU任务切换，线程中断恢复","children":[],"parent":"85329c2f43e241fc"},{"id":"74ac4535756506df","title":"各个线程、PC寄存器记录、当前字节码指令地址，各个线程之间可进行独立计算，防止相互干扰。","task":{},"parent":"85329c2f43e241fc","children":[]}]}],"parent":"9ed6db6654ba"}],"collapsed":true},{"id":"8fb336cc1522","title":"虚拟机栈<br>","lineStyle":{"randomLineColor":"rgb(232, 124, 37)"},"parent":"root","children":[{"id":"07542583f899","title":"基本内容","parent":"8fb336cc1522","children":[{"id":"f0a29233eb26","title":"Java虚拟机栈，早起也叫Java栈，每个线程创建时都会创建一个虚拟机栈，内部保存一个个栈帧，对应着一次次的Java方法调用","parent":"07542583f899","children":[]},{"id":"4da32e3195ab","title":"生命周期和线程的一致","parent":"07542583f899","children":[]},{"id":"11ee050d0731","title":"主管Java程序的运行，保存方法的局部变量（8种基本数据类型，对象的引用地址），部分结果，并参与方法的调用和返回。","parent":"07542583f899","children":[{"id":"ae51f2e903e6","title":"局部变量&nbsp; vs&nbsp; 成员变量","parent":"11ee050d0731","children":[]},{"id":"40506b1ff55f","title":"基本数据类型&nbsp; &nbsp;VS 引用类型变量（类，数组，接口）","parent":"11ee050d0731","children":[]}]}],"collapsed":false},{"id":"8135a46fa2bc","title":"优点","parent":"8fb336cc1522","children":[{"id":"623a4b9d8776","title":"快速有效的存储方式，访问速度仅次于程序计数器","parent":"8135a46fa2bc","children":[]},{"id":"569d41b8e699","title":"JVM直接对JAVA栈的操作只有两个","parent":"8135a46fa2bc","children":[{"id":"fafeac019687","title":"每个方法执行，伴随着进栈（入栈，压栈）","parent":"569d41b8e699","children":[]},{"id":"2913a5542ba8","title":"执行结束的出栈","parent":"569d41b8e699","children":[]}]},{"id":"18e1af1a22dd","title":"栈不存在垃圾回收，但是存在OOM、栈溢出","parent":"8135a46fa2bc","children":[{"id":"0907bd4d7dad","title":"Java栈大小是动态或者固定不变的","parent":"18e1af1a22dd","children":[{"id":"44b6bd456d11","title":"动态扩展，无法申请到足够内存OOM","children":[],"parent":"0907bd4d7dad"},{"id":"847e04e8c778","title":"如果是固定，线程请求的栈容量超过固定值，则StackOverflowError","children":[],"parent":"0907bd4d7dad"}]}],"image":{"w":601,"h":142.5,"url":"https://cdn.processon.com/5fe5e0c9e401fd549c8f2bad?e=1608904410&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:uXYWFlePYd-DmyFwk1ROP9mN_jY="}},{"id":"a334268c51c8","title":"使用-Xss，MaxStackSize ，设置线程的最大栈空间","parent":"8135a46fa2bc","children":[{"id":"f5fac8677d1b","title":"截图","parent":"a334268c51c8","children":[],"image":{"w":900,"h":396.31083202511775,"url":"http://cdn.processon.com/5ed8477a7d9c086636152d8a?e=1591235978&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:rKAJlOp4GDDRP5g_jjQ9cPl9bjE="}}]}],"collapsed":false},{"id":"8a14542081bb","title":"栈的存储单位","parent":"8fb336cc1522","children":[{"id":"ece5ead6f2a1","title":"每个线程都有自己的栈，栈中的数据以栈帧格式存储","parent":"8a14542081bb","children":[]},{"id":"9a7c35f784f4","title":"线程上正在执行的每个方法都各自对应一个栈帧","parent":"8a14542081bb","children":[]},{"id":"53b2b8ac0924","title":"栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各个数据信息","parent":"8a14542081bb","children":[]},{"id":"eb1b5dc6eb85","title":"先进后出，后进先出","parent":"8a14542081bb","children":[]},{"id":"9a1f96ffb6dc","title":"一条活动的线程中，一个时间点上，只会有一个活动的栈帧。只有当前正在执行的方法的栈顶栈帧是有效的，这个称为当前栈帧，对应方法是当前方法，对应类是当前类","parent":"8a14542081bb","children":[]},{"id":"80fcc48e7dda","title":"执行引擎运行的所有字节码指令只针对当前栈帧进行操作","parent":"8a14542081bb","children":[]},{"id":"50a737f6056a","title":"如果方法中调用了其他方法，对应的新的栈帧会被创建出来，放在顶端，成为新的当前帧","parent":"8a14542081bb","children":[]}],"collapsed":false},{"id":"4c1e57339474","title":"栈运行原理","parent":"8fb336cc1522","children":[{"id":"aa0e4e54584e","title":"不同线程中包含的栈帧不允许存在相互引用。","parent":"4c1e57339474","children":[]},{"id":"5396cf8e94ad","title":"当前方法调用了其他方法，方法返回之际，当前栈帧会传回此方法的执行结果给前一个栈帧，接着虚拟机会丢弃当前栈帧，使得前一个栈帧重新成为新的栈帧。","parent":"4c1e57339474","children":[]},{"id":"e43159622ae1","title":"Java方法有两种返回方式","parent":"4c1e57339474","children":[{"id":"2a08b2f35d16","title":"一种是正常的函数返回，使用return指令","parent":"e43159622ae1","children":[]},{"id":"77bb05ed7f01","title":"另外一种是抛出异常，不管哪种方式，都会导致栈帧被弹出","parent":"e43159622ae1","children":[]}]}],"collapsed":false},{"id":"50920e8753cf","title":"栈的内部结构","image":{"w":388.5,"h":418,"url":"https://cdn.processon.com/5fe5ca09e0b34d29348b428d?e=1608898586&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:hvF8VrbjmFUmDv3rUw2hPixHxYM="},"children":[{"id":"f070e9d42a34","title":"局部变量表","children":[{"id":"9382ae40e6e9","title":"定义为一个数字数组，主要用于存储方法参数，定义在方法体内部的局部变量，数据类型包括各类基本数据类型，对象引用，以及return address类型","parent":"f070e9d42a34","children":[]},{"id":"827bb5f2d9d1","title":"局部变量表建立在线程的栈上，是线程私有的，因此不存在数据安全问题","parent":"f070e9d42a34","children":[]},{"id":"da942ad64f8e","title":"局部变量表容量个数，容量大小（反编译查看locals的值）是在编译期确定下来的","parent":"f070e9d42a34","children":[]},{"id":"174dd08eeb4f","title":"局部变量表存放编译期可知的各种基本数据类型（8种），引用类型（reference）,return address 类型","children":[],"parent":"f070e9d42a34"},{"id":"fd0469ee35ae","title":"最基本的存储单元是slot","children":[{"id":"c6ca56735d26","title":"32位占用一个slot，64位类型（long和double）占用两个slot","children":[],"parent":"fd0469ee35ae"}],"parent":"f070e9d42a34"},{"id":"ffcfe4c6f216","title":"局部变量表中的变量只有在当前方法调用中有效，虚拟机通过使用局部变量表完成参数值到参数变量列表的传递过程。","children":[],"parent":"f070e9d42a34"},{"id":"3e339544c72a","title":"方法调用结束后，随着方法栈帧的销毁，局部变量表也会随之销毁","children":[],"parent":"f070e9d42a34"},{"id":"fde7988496d3","title":"关于Slot的理解","parent":"f070e9d42a34","children":[{"id":"ba96db994ece","title":"JVM虚拟机会为局部变量表中的每个Slot都分配一个访问索引，通过这个索引即可成功访问到局部变量表中指定的局部变量值","children":[],"parent":"fde7988496d3"},{"id":"2e3bce4828de","title":"如果当前帧是由构造方法或者实例方法创建的，那么该对象引用this，会存放在index为0的slot处，其余的参数表顺序继续排列","children":[{"id":"5d82784e1cbb","title":"截图<br>","image":{"w":453,"url":"http://cdn.processon.com/5ed986f4f346fb1712e10524?e=1591317764&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:YE_nIZgKRBb0EvHJFHuHyMgDQtQ=","h":482},"children":[],"parent":"2e3bce4828de"},{"id":"f73eb67e6ad2","title":"this截图","image":{"w":900,"url":"http://cdn.processon.com/5ed987a11e0853199b509ad0?e=1591317937&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:ZgxAdvwmcJNyzQzoYr81vcZ1FaU=","h":310.4968509447166},"children":[],"parent":"2e3bce4828de"}],"parent":"fde7988496d3"},{"id":"a5b411a7a0fb","title":"栈帧中的局部变量表中的槽位是可以重复的，如果一个局部变量过了其作用域，那么其作用域之后申明的新的局部变量就有可能会复用过期局部变量的槽位，从而达到节省资源的目的","children":[],"parent":"fde7988496d3"}]},{"id":"ed471dc34bd9","title":"静态变量与局部变量对比及小结","parent":"f070e9d42a34","children":[{"id":"47c5308293a7","title":"变量的分类","children":[{"id":"e6a859a569ab","title":"按照数据类型分","children":[{"id":"a5121aebf87b","title":"基本数据类型","children":[],"parent":"e6a859a569ab"},{"id":"2a2961ada73e","title":"引用数据类型","children":[],"parent":"e6a859a569ab"}],"parent":"47c5308293a7"},{"id":"5957d4da0c54","title":"按照声明的位置","children":[{"id":"5c60ca0771b6","title":"成员变量，在使用前经历过初始化过程","children":[{"id":"9d74518b4219","title":"类变量","children":[{"id":"9e2d0649abd9","title":"链接的准备阶段给类变量默认赋值，初始化阶段显示赋值，即静态代码块赋值","children":[],"parent":"9d74518b4219"}],"parent":"5c60ca0771b6"},{"id":"a112e2eb7fcd","title":"实例变量","children":[{"id":"a5238154ce4d","title":"随着对象的创建，会在堆空间分配实例变量空间，并进行默认赋值","children":[],"parent":"a112e2eb7fcd"}],"parent":"5c60ca0771b6"}],"parent":"5957d4da0c54"},{"id":"25bd2270699f","title":"局部变量","children":[{"id":"c8a60a8081b5","title":"在使用前，必须进显式赋值，否则编译不通过","children":[],"parent":"25bd2270699f"}],"parent":"5957d4da0c54"}],"parent":"47c5308293a7"}],"parent":"ed471dc34bd9"}]},{"id":"e134d3161aac","title":"补充：","children":[{"id":"45e77c698e86","title":"在栈帧中，与性能调优关系最密切的部分，就是局部变量表，方法执行时，虚拟机使用局部变量表完成方法的传递","parent":"e134d3161aac","children":[]},{"id":"42f168952fdb","title":"局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收","parent":"e134d3161aac","children":[]}],"parent":"f070e9d42a34"}],"parent":"50920e8753cf","collapsed":false},{"id":"a13ea3fdfbc3","title":"操作数栈","children":[{"id":"792e3da622c4","title":"在方法执行的过程中，根据字节码指令，往栈中写入数据或提取数据，即入栈/出栈","parent":"a13ea3fdfbc3","children":[{"id":"dda64518441e","title":"截图","parent":"792e3da622c4","children":[],"image":{"w":643,"url":"http://cdn.processon.com/5ed98b6b6376891862184dd7?e=1591318907&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:HOXL24aD0riV03MrUP0vx8p53F4=","h":211}}]},{"id":"0ebfc8138b0b","title":"作用：计算过程中变量临时存储空间，保存计算过程的中间结果","summaries":[],"children":[],"parent":"a13ea3fdfbc3"},{"id":"ae60f22e3f0c","title":"当一个方法刚开始执行的时候，一个新的栈帧也会随之被创建出来，这个方法的操作数栈是空的","parent":"a13ea3fdfbc3","children":[],"summaries":[]},{"id":"1d9fe3bb9179","title":"每一个操作数栈会拥有一个明确的栈深度，用于存储数值，最大深度在编译期就定义好（反编译 Stack=2)","summaries":[],"children":[],"parent":"a13ea3fdfbc3"},{"id":"39a1446b504f","title":"栈中，32bit类型占用一个栈单位深度，64bit类型占用两个栈单位深度","parent":"a13ea3fdfbc3","children":[],"summaries":[]},{"id":"813c7f0eb945","title":"操作数栈并非采用访问索引方式进行数据访问，而是只能通过标准的入栈、出栈操作完成一次数据访问","summaries":[],"children":[],"parent":"a13ea3fdfbc3"},{"id":"39a1446b504f","title":"栈中，32bit类型占用一个栈单位深度，64bit类型占用两个栈单位深度","summaries":[],"children":[],"parent":"a13ea3fdfbc3"},{"id":"a176c599c1e9","title":"如果被调用方法带有返回值的话，其返回值将会被压入当前栈帧的操作数栈中，并更新程序计数器中下一条需要执行的字节码指令","children":[],"parent":"a13ea3fdfbc3","summaries":[]},{"id":"dfc2de12da6f","title":"Java虚拟机的解释引擎是基于栈的执行引擎，其中栈就是操作数栈","parent":"a13ea3fdfbc3","children":[]},{"id":"ac9907862eb13f24","title":"i++和++i的区别<br>","style":{"font-weight":"bold"},"parent":"a13ea3fdfbc3","children":[{"id":"b1b9726b1d0eded9","title":"i++：先将 i 的值加载到操作数栈，再将 i 的值加 1","parent":"ac9907862eb13f24","children":[]},{"id":"e993ae82b90b7a40","title":"++i：先将 i 的值加 1，在将 i 的值加载到操作数栈","parent":"ac9907862eb13f24","children":[]}]},{"id":"220f9f2e7527","title":"栈顶缓存技术","parent":"a13ea3fdfbc3","children":[{"id":"3c74a30cd689","title":"由于操作数是存储在内存中，频繁的进行内存读写操作影响执行速度，将栈顶元素全部缓存到物理CPU的寄存器中，依此降低对内存的读写次数，提升执行引擎的执行效率，指令更少，执行速度快","parent":"220f9f2e7527","children":[]},{"id":"eda9a0ea79da","title":"操作数栈顶元素缓存于寄存器","parent":"220f9f2e7527","children":[]}]}],"parent":"50920e8753cf","collapsed":false},{"id":"aa9d5e5422d0","title":"动态链接","image":{"w":612,"url":"https://cdn.processon.com/5fe5d88a5653bb054789ed88?e=1608902298&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:L_jE6Th82gjWQRT3Lp--ABZ_fi4=","h":293},"children":[{"id":"0f881c57ca13","title":"指向运行时常量池的方法引用","parent":"aa9d5e5422d0","children":[{"id":"e5e44c6a3888","title":"每一个栈帧内部都包含一个指向运行时常量池中，该帧所属方法的引用","parent":"0f881c57ca13","children":[]},{"id":"5782e6a0e47a","title":"包含引用目的：支持当前方法的代码实现动态链接，如invokedynamic指令","children":[],"parent":"0f881c57ca13"},{"id":"5a74c4a18e7b","title":"在java源文件被编译成字节码文件中时，所有的变量、方法引用都作为符号引用，保存在class文件的常量池中。","parent":"0f881c57ca13","children":[]},{"id":"f4a7dcc8ea81","title":"描述一个方法调用了其他方法：用常量池中指向方法的符号引用来表示。作用：将符号引用转换为调用方法的直接引用","parent":"0f881c57ca13","children":[]},{"id":"4f70e79a24539e7f","title":"代码参考：https://blog.csdn.net/sj15814963053/article/details/109922984","children":[],"parent":"0f881c57ca13"}]},{"id":"f94c4fcfda7b","title":"常量池、运行时常量池","task":{},"parent":"aa9d5e5422d0","children":[{"id":"628ebce2cf04","title":"常量池在字节码文件中，运行时常量池，在运行时的方法区中","task":{},"parent":"f94c4fcfda7b","children":[]},{"id":"1eee9232a3ffc9c7","title":"为什么要用常量池？","parent":"f94c4fcfda7b","children":[{"id":"bd4ea2b49a581be9","title":"存储一份，供多个方法调用，需记录索引，节省空间","parent":"1eee9232a3ffc9c7","children":[]},{"id":"6afded01091fbad4","title":"作用：提供符号、常量便于指令识别","parent":"1eee9232a3ffc9c7","children":[]}]}]}],"parent":"50920e8753cf","collapsed":true},{"id":"c010ea40ee77","title":"方法返回地址","children":[{"id":"e78cea4353fb","title":"存放调用该方法的pc寄存器的值","parent":"c010ea40ee77","children":[]},{"id":"959955a62e9e","title":"方法的结束","parent":"c010ea40ee77","children":[{"id":"eb7fc51ce8f3","title":"正常执行完成","parent":"959955a62e9e","children":[]},{"id":"ce506cd551c5","title":"出现未处理异常，非正常退出","parent":"959955a62e9e","children":[]}]},{"id":"093cb38bb641","title":"无论哪种方式退出，方法退出后，都会返回该方法被调用的位置。方法正常退出时，调用者的PC计数器的值作为返回地址，即调用该方法的指令的下一条指令的地址。","parent":"c010ea40ee77","children":[]},{"id":"2a06531a36bf","title":"异常退出的，返回地址是通过异常表来确定，栈帧中一般不会保存这部分信息","parent":"c010ea40ee77","children":[]},{"id":"4fb009e7dc8d","title":"执行引擎遇到任意一个方法返回的字节码指令（return）,会有返回值传递给上层的方法调用者，简称正常完成出口","children":[{"id":"33b75ec50f34","title":"返回指令包括","children":[{"id":"333fc8f49d38","title":"ireturn返回值是boolean，byte，char，short，和int类型时使用","children":[],"parent":"33b75ec50f34"},{"id":"ed9496d5e4c5","title":"lreturn","children":[],"parent":"33b75ec50f34"},{"id":"998b7c05ff82","title":"dreturn","children":[],"parent":"33b75ec50f34"},{"id":"8ccd23683759","title":"areturn","parent":"33b75ec50f34","children":[{"id":"e20cec81875a","title":"引用类型","parent":"8ccd23683759","children":[]}]},{"id":"0fbba44bff88","title":"还有一个return指供声明为 void的方法、实例初始化方法、类和接口的初始化方法使用","parent":"33b75ec50f34","children":[]}],"parent":"4fb009e7dc8d"}],"parent":"c010ea40ee77"},{"id":"4b20559481ce","title":"本质上，方法的退出就是当前栈帧出栈的过程。此时需要恢复上层方法的局部变量表，操作数栈，将返回值压入调用者栈帧的操作数栈，设置PC寄存器值等，让调用者方法继续执行下去。","parent":"c010ea40ee77","children":[]},{"id":"5a1c2213a413","title":"正常完成出口和异常完成出口的区别在于：通过异常完成出口退出的不会给他的上层调用者产生任何的返回值","parent":"c010ea40ee77","children":[]}],"parent":"50920e8753cf","collapsed":false},{"id":"1c7bb2d35149","title":"一些附加信息","children":[{"id":"852f2a049b15","title":"允许携带与Java虚拟机实现相关的一些附加信息，例如对程序调试提供支持的信息。不确定有，可选情况","parent":"1c7bb2d35149","children":[]}],"parent":"50920e8753cf","collapsed":false},{"id":"721800d935f2","title":"方法的调用","parent":"50920e8753cf","children":[{"id":"5ddbe128e7fa","title":"静态链接","children":[{"id":"f45b2d4d1969","title":"当一个字节码文件被装载进JVM内部时，如果被调用的目标方法在编译期可知，且运行时期间保持不变，这种情况下将调用方的符号引用转为直接引用的过程称为静态链接","children":[],"parent":"5ddbe128e7fa"}],"parent":"721800d935f2"},{"id":"e5330abc568c","title":"动态链接","children":[{"id":"a2bba46a982b","title":"如果被调用的方法无法再编译期被确定下来，只能在运行期将调用的方法的符号引用转为直接引用，这种引用转换过程具备动态性，因此被称为动态链接","children":[],"parent":"e5330abc568c"}],"parent":"721800d935f2"},{"id":"2ca634c7cb5a","title":"方法的绑定","parent":"721800d935f2","children":[{"id":"88a3b0399726","title":"绑定是一个字段、方法、或者类在符号引用被替换为直接引用的过程。仅仅发生一次。","parent":"2ca634c7cb5a","children":[]},{"id":"06a020645a05","title":"早期绑定（invokespecial ）","parent":"2ca634c7cb5a","children":[{"id":"1c844b9b13c4","title":"被调用的目标方法如果在编译期可知，且运行期保持不变时，即可将这个方法与所属的类型进行绑定，这样一来，由于明确了被调用的目标方法究竟是哪一个，因此也就可以使用静态链接的方式将符号引用转换为直接引用。","parent":"06a020645a05","children":[]}]},{"id":"920e3a83a951","title":"晚期绑定（invokevirtual、invokeinterface ）","parent":"2ca634c7cb5a","children":[{"id":"ddc386d427d6","title":"被调用的方法在编译期无法被确定，只能够在程序运行期根据实际的类型绑定相关的方法。","parent":"920e3a83a951","children":[]}]}]},{"id":"ed090e83a7f8","title":"Java中任何一个普通方法都具备虚函数的特征（运行期确认，具备晚期绑定的特点），C++中则使用关键字virtual来显式定义","parent":"721800d935f2","children":[]},{"id":"9d16e29630b5","title":"如果在java程序中，不希望某个方法拥有虚函数的特征，则可以使用关键字final来标记这个方法","parent":"721800d935f2","children":[]},{"id":"53a40bcb1770","title":"虚方法和非虚方法","children":[{"id":"36219e889c9e","title":"非虚方法","children":[{"id":"7cff1bdc2058","title":"如果方法在编译期就确定了具体的调用版本，则这个版本在运行时是不可变的。这样的方法称为非虚方法","children":[],"parent":"36219e889c9e"},{"id":"4ecf52e7e033","title":"静态方法，私有方法，final方法，实例构造器，父类方法都是非虚方法","children":[],"parent":"36219e889c9e"}],"parent":"53a40bcb1770"},{"id":"cdd7b4af34ae","title":"其他方法称为虚方法","children":[],"parent":"53a40bcb1770"}],"parent":"721800d935f2"},{"id":"c08dce3e2ec8","title":"方法调用指令","parent":"721800d935f2","children":[{"id":"7fea2347a3c5","title":"普通调用指令","children":[{"id":"a8e546e293f7","title":"invokestatic","children":[{"id":"72205e4372f8","title":"调用静态方法，解析阶段确定唯一方法版本","children":[],"parent":"a8e546e293f7"}],"parent":"7fea2347a3c5"},{"id":"3adcb650f3a6","title":"invokespecial","children":[{"id":"5f7d73cf76d3","title":"调用&lt;init&gt;方法，私有及父类方法，解析阶段确定唯一方法版本","children":[],"parent":"3adcb650f3a6"}],"parent":"7fea2347a3c5"},{"id":"c042458f7036","title":"invokevirtual","parent":"7fea2347a3c5","children":[{"id":"4fea48926dc2","title":"调用所有虚方法","children":[],"parent":"c042458f7036"}]},{"id":"13f8a5ab5223","title":"invokeinterface","children":[{"id":"95bdf0760ced","title":"调用接口方法","children":[],"parent":"13f8a5ab5223"}],"parent":"7fea2347a3c5"},{"id":"6db5698869cc","title":"其中invokestatic指令和invokespecial指令调用的方法称为非虚方法，其余的（final修饰的除外）称为虚方法","children":[],"parent":"7fea2347a3c5"}],"parent":"c08dce3e2ec8"},{"id":"154fb33ef46b","title":"动态调用指令JDK1.7新增","children":[{"id":"c81f3f7b2211","title":"invokedynamic","children":[{"id":"2caa870a243b","title":"动态解析出需要调用的方法，然后执行","children":[],"parent":"c81f3f7b2211"}],"parent":"154fb33ef46b"},{"id":"f812f203d15d","title":"直到Java8的Lambda表达式的出现，invokedynamic指令的生成，在Java中才有了直接的生成方式","parent":"154fb33ef46b","children":[{"id":"3e8fdd0e8efb","title":"截图","children":[],"parent":"f812f203d15d","image":{"w":900,"url":"http://cdn.processon.com/5eda13c1e0b34d413900dc10?e=1591353810&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:h5kRfdpT_AwoOvZtUu64IHAsoyY=","h":476.72904800650934}}]}],"parent":"c08dce3e2ec8"},{"id":"435848dd7943","title":"静态语言和动态语言","parent":"c08dce3e2ec8","children":[{"id":"c05ea9aa107d","title":"区别在于对类型的检查是编译器还是运行期，满足编译期就是静态类型语言，反之就是动态类型语言。","parent":"435848dd7943","children":[]},{"id":"fc4b6c74657b","title":"Java是静态类型语言，动态调用指令增加了动态语言的特性","parent":"435848dd7943","children":[]}]}]},{"id":"ec8f6fdfad01","title":"方法重写的本质","parent":"721800d935f2","children":[{"id":"3998fc2c998f","title":"找到操作数栈顶的第一个元素所执行的对象的实际类型，记做C","parent":"ec8f6fdfad01","children":[]},{"id":"875c611ff2ce","title":"如果在类型C中找到与常量池中描述符和简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束，如果不通过，则返回java.lang.IllegalAccessError异常","children":[],"parent":"ec8f6fdfad01"},{"id":"eb481cc8099b","title":"否则，按照继承关系从下往上依次对C的各个父类进行上一步的搜索和验证过程。","children":[],"parent":"ec8f6fdfad01"},{"id":"d32872695136","title":"如果始终没有找到合适的方法，则抛出java.lang.AbstractMethodError异常","children":[],"parent":"ec8f6fdfad01"}]},{"id":"8d539b2fce59","title":"虚方法表（存在方法区）","children":[{"id":"8c7c223d22aa","title":"面向对象的编程中，会很频繁的使用动态分配，如果每次动态分配的过程都要重新在类的方法元数据中搜索合适的目标的话，就可能影响到执行效率，因此为了提高性能，JVM采用在类的方法区建立一个虚方法表，使用索引表来代替查找","children":[],"parent":"8d539b2fce59"},{"id":"bff1b3b88666","title":"每个类都有一个虚方法表，表中存放着各个方法的实际入口","children":[],"parent":"8d539b2fce59"},{"id":"09c940f3fc54","title":"虚方法表会在类加载的链接阶段被创建，并开始初始化，类的变量初始值准备完成之后，JVM会把该类的方法也初始化完毕","children":[{"id":"236c44fe63fd","title":"截图","children":[],"parent":"09c940f3fc54","image":{"w":900,"url":"http://cdn.processon.com/5eda1bad7d9c0866361a2861?e=1591355838&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:xGK3q05kxmJql6QhQk8nYhynSr4=","h":566.1290322580645}}],"parent":"8d539b2fce59"}],"parent":"721800d935f2"}],"collapsed":false}],"parent":"8fb336cc1522","collapsed":false}],"collapsed":true},{"id":"16238a0bfc91","title":"本地方法接口","lineStyle":{"randomLineColor":"#e85d4e"},"children":[{"id":"d0dc476b4529","title":"什么是本地方法<br>","task":{"completion":100},"parent":"16238a0bfc91","children":[{"id":"36b068239627","title":"简单讲，就是一个Java调用非Java代码的接口","task":{"completion":100},"parent":"d0dc476b4529","children":[]}],"collapsed":false},{"id":"6f2538c3b73e","title":"为什么使用native method<br>","task":{"completion":100},"parent":"16238a0bfc91","children":[{"id":"ea0ef4801fb9","title":"与Java环境外交互","task":{"completion":100},"parent":"6f2538c3b73e","children":[{"id":"8dfff5124d96","title":"例如与操作系统底层或硬件交换信息时的情况","parent":"ea0ef4801fb9","children":[]},{"id":"b0d2a03ab68c","title":"例如启动一个线程","children":[],"parent":"ea0ef4801fb9"}]}]},{"id":"10efeed68bfd3701","title":"接口、交互","children":[],"parent":"16238a0bfc91"}],"parent":"root","collapsed":true},{"id":"7cd3d67de857","title":"本地方法栈","lineStyle":{"randomLineColor":"rgb(212, 164, 235)"},"children":[{"id":"73ac22bd5286","title":"Java虚拟机栈：Java方法调用，本地方法栈：本地方法调用","children":[],"parent":"7cd3d67de857"},{"id":"8fe2dc096692","title":"本地方法栈，线程私有。（key生成hash值为native方法）","children":[],"parent":"7cd3d67de857"},{"id":"c2ab57ce05ff","title":"允许被实现成固定或者是可动态扩展的内存大小。","children":[{"id":"a5300a0f7e2e","title":"内存溢出情况和Java虚拟机栈相同","children":[],"parent":"c2ab57ce05ff"}],"parent":"7cd3d67de857"},{"id":"a1962e25e996","title":"使用C语言实现","children":[],"parent":"7cd3d67de857"},{"id":"997f5622db4d","title":"具体做法是Native Method Stack 中登记native方法，在Execution Engine执行时加载到本地方法库","children":[],"parent":"7cd3d67de857"},{"id":"573628895323","title":"当某个线程调用一个本地方法时，就会进入一个全新，不受虚拟机限制的世界，它和虚拟机拥有同样的权限。","parent":"7cd3d67de857","children":[]},{"id":"03f38206b524","title":"并不是所有的JVM都支持本地方法，因为Java虚拟机规范并没有明确要求本地方法栈的使用语言，具体实现方式，数据结构等","children":[],"parent":"7cd3d67de857"},{"id":"5e66a7e3227f","title":"Hotspot JVM中，直接将本地方法栈和虚拟机栈合二为一","children":[],"parent":"7cd3d67de857"}],"parent":"root","collapsed":true},{"id":"f6a4366f2a09","title":"堆","lineStyle":{"randomLineColor":"#127c97"},"parent":"root","children":[{"id":"6a6663c82acc","title":"Java内存管理的核心区域","parent":"f6a4366f2a09","children":[{"id":"e943c2b6c02a","title":"一个JVM实例只存在一个堆内存","parent":"6a6663c82acc","children":[]},{"id":"b677814a0887","title":"JVM启动就创建，空间大小确定，可调节，参数-Xms，-Xmx","task":{},"children":[{"id":"9ea9a3af66f066ef","title":"Java堆区在JVM启动的时候即被创建，其空间大小也就确认了。堆内存的大小是可调节的","task":{"completion":100},"children":[],"parent":"b677814a0887"}],"parent":"6a6663c82acc"},{"id":"4fef2de96b30","title":"堆内存物理可不连续，逻辑要连续","children":[{"id":"f534ed9b97277c3e","title":"《Java虚拟机规范》规定，堆可以处于物理上不连续的内存空间中，但在逻辑上它应该被视为连续的。","task":{"completion":100},"children":[],"parent":"4fef2de96b30"}],"parent":"6a6663c82acc"},{"id":"518bfc3e1fc9","title":"所有线程共享Java堆，单个线程可以有TLAB","children":[{"id":"6b2d3019c1cd83cb","title":"所有的线程共享Java堆，在这里还可以划分线程私有的缓冲区（TLAB：thread local allocation buffer）","task":{"completion":100},"parent":"518bfc3e1fc9","children":[]}],"parent":"6a6663c82acc"},{"id":"49aa6bca29210501","title":"所有对象实例、数组应在运行时分配在堆上","children":[{"id":"82bb397b201fa55d","title":"《Java虚拟机规范》中对Java堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。（The heap is the run-time data area from which memory for all class instances and arrays is allocated）《Java虚拟机规范》中对JavaL堆的描述是：所有的对象实例以及数组都应当在运行时分配在堆上。（The heap is the run-time data area from which memory for all class instances and arrays is allocated）","task":{"completion":100},"parent":"49aa6bca29210501","children":[]}],"parent":"6a6663c82acc"},{"id":"e2e1ccd3a646","title":"“几乎”所有的对象实例都在堆分配内存。有些对象可能栈上分配：逃逸分析，标量替换","children":[],"parent":"6a6663c82acc"},{"id":"c512603574d2","title":"栈帧：保存引用，引用指向对象或数组在堆中的位置","children":[],"parent":"6a6663c82acc"},{"id":"ba7d96fa7e16","title":"方法结束后，堆中的对象不会马上被移除，仅仅在垃圾回收的时候才会被移除。","children":[{"id":"0bc3f4d38fc9ddc5","title":"eden区满，触发GC，进行垃圾回收","children":[],"parent":"ba7d96fa7e16"},{"id":"1587bc952eb3d96a","title":"如果堆中对象马上被回收，用户线程会受到影响，stop the world","parent":"ba7d96fa7e16","children":[]}],"parent":"6a6663c82acc","collapsed":false},{"id":"5baf94508586","title":"堆是GC执行垃圾回收的重点区域","image":{"w":469.5,"url":"https://cdn.processon.com/5fe5ec3a63768932a285ce2b?e=1608907338&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:Qfa3IVumm0zkz1NStIFEWNiWukU=","h":210},"children":[],"parent":"6a6663c82acc"},{"id":"527b9503a450","title":"堆空间细分为：","image":{"w":474,"url":"https://cdn.processon.com/5fe5ed747d9c087ce99bc8dc?e=1608907653&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:Me2uR4nlIe3gEamh9-4mHfU0-Z0=","h":334},"children":[{"id":"be60cfadfda5","title":"Java7及之前","children":[{"id":"caf2fbb640c2","title":"内存逻辑上分为：","parent":"be60cfadfda5","children":[{"id":"edd773d9e7d9","title":"新生区Young Generation Space ","parent":"caf2fbb640c2","children":[{"id":"f9571d20e7cd","title":"Eden区","children":[],"parent":"edd773d9e7d9"},{"id":"ac9154c92a42","title":"Survivor区","children":[{"id":"dd7a78a3eb3f","title":"from/to&nbsp; 谁空谁是to","children":[],"parent":"ac9154c92a42"}],"parent":"edd773d9e7d9"}]},{"id":"0111b7de19a5","title":"养老区Old/Tenure generation space ","parent":"caf2fbb640c2","children":[]},{"id":"0820b11afdea","title":"永久区Permanent&nbsp;","parent":"caf2fbb640c2","children":[]}]}],"parent":"527b9503a450"},{"id":"41fe64276369","title":"Java8及之后","children":[{"id":"bae699a03409","title":"内存逻辑上分为：","children":[{"id":"a449b59e6bdb","title":"新生区","children":[{"id":"b2d55fcf8910","title":"Eden区","children":[],"parent":"a449b59e6bdb"},{"id":"4d67b8d78336","title":"Survivor区","parent":"a449b59e6bdb","children":[{"id":"066090dc51b8","title":"from/to  谁空谁是to","children":[],"parent":"4d67b8d78336"}]}],"parent":"bae699a03409"},{"id":"aaf67841d027","title":"养老区","children":[],"parent":"bae699a03409"},{"id":"961dade19c30","title":"元空间Meta Space","children":[],"parent":"bae699a03409"}],"parent":"41fe64276369"}],"parent":"527b9503a450"},{"id":"dcc253ee734d","title":"","children":[],"parent":"527b9503a450","image":{"w":640.5,"h":306.5,"url":"https://cdn.processon.com/5fe5edde7d9c087ce99bc93e?e=1608907758&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:rDS24Itmjj_GkubiJYScB-dAIig="}}],"parent":"6a6663c82acc","collapsed":false},{"id":"c1202be57519","title":"-XX:+PrintGCDetails&nbsp;可开启打印查看方法区实现","parent":"6a6663c82acc","children":[]}],"image":{"w":641.5,"h":266.5,"url":"https://cdn.processon.com/5fe5e862e401fd549c8f36ae?e=1608906354&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:ImmFZC8YlF4mvBgMGxFo_sQ8Qu4="},"icons":[],"collapsed":false},{"id":"f9fc5bab7655","title":"设置堆内存的大小与OOM","parent":"f6a4366f2a09","children":[{"id":"c1869c19ad17","title":"-Xms9m ：堆空间的起始内存。X执行 memory start","children":[],"parent":"f9fc5bab7655","icons":[]},{"id":"0010af67f886","title":"-Xmx9m：堆空间的最大内存。X执行 memory max&nbsp; &nbsp;超过最大内存将抛出OOM","children":[],"parent":"f9fc5bab7655","icons":[]},{"id":"27c321c8922f","title":"通常将-Xms和-Xmx两个参数配置相同的值","children":[{"id":"7ec5aa7fe2963aeb","title":"目的：在Java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小，从而提高性能。","parent":"27c321c8922f","children":[]}],"parent":"f9fc5bab7655"},{"id":"7c4c6c7db2b8","title":"默认情况下","children":[{"id":"cdf53a1d750f","title":"初始内存大小","children":[{"id":"ff34adc3c248","title":"物理电脑内存大小/64","children":[{"id":"ad75af8518c6","title":"","image":{"w":900,"h":333.83458646616543,"url":"http://cdn.processon.com/5eded9401e08532637190f3e?e=1591666512&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:H1lEzp4SlnGn8CKn8nuM-L3l79k="},"parent":"ff34adc3c248","children":[]}],"parent":"cdf53a1d750f"}],"parent":"7c4c6c7db2b8"},{"id":"ad0adeae431d","title":"最大内存大小","parent":"7c4c6c7db2b8","children":[{"id":"7ff7706abf66","title":"物理电脑内存/4","parent":"ad0adeae431d","children":[]}]}],"parent":"f9fc5bab7655"},{"id":"53173341896a","title":"jps命令&nbsp; &nbsp;查看当前程序运行的进程","children":[],"parent":"f9fc5bab7655"},{"id":"b24816ec9402","title":"jstat&nbsp; &nbsp;查看JVM在gc时的统计信息&nbsp; &nbsp;jstat -gc 进程号","children":[],"parent":"f9fc5bab7655"}],"icons":[],"collapsed":false},{"id":"d889a92d48a5","title":"新生代与老年代","image":{"w":326.5,"url":"https://cdn.processon.com/5fe5ee9363768932a285d0fd?e=1608907939&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:FBGPeQusGwbzzqKyR-gDB8XJUM4=","h":180},"parent":"f6a4366f2a09","children":[{"id":"9870e15ff397","title":"为什么要有新生代和老年代<br>","style":{"font-weight":"bold"},"parent":"d889a92d48a5","children":[{"id":"a0c1303731f06ff9","title":"分代的目的：优化GC的性能（不分代完全可以）","children":[],"parent":"9870e15ff397"},{"id":"7f6f81808ddb6931","title":"若不分代--&gt;GC需要扫描整个堆空间，分代之后--&gt;对具体某一区域进行适合的GC","children":[],"parent":"9870e15ff397"},{"id":"8e3c4cd484e0f0c0","title":"不同代根据其特点进行不同的垃圾回收算法--&gt;提高回收效率（分代收集算法）","children":[],"parent":"9870e15ff397"}],"icons":[{"index":"27","text":"&#xe67e","color":"rgb(96, 160, 240)","name":"flag"}]},{"id":"384e21afe62d","title":"新生代与老年代空间默认比例1:2","parent":"d889a92d48a5","children":[{"id":"5aa33fc9fb06","title":"-XX:NewRatio=2，表示新生代占1，老年代占2，新生代占整个堆的1/3","children":[],"parent":"384e21afe62d"}],"image":{"w":591,"h":120,"url":"https://cdn.processon.com/5fe5eee0e0b34d29348b7680?e=1608908016&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:4kkuQPb_teZwraCQ3PdgMMibMiU="}},{"id":"172421238e73","title":"jinfo -flag NewRatio 进程号，查看参数设定值","children":[],"parent":"d889a92d48a5"},{"id":"943792ef7baf","title":"在HotSpot中，Eden空间和另外两个Survivor空间缺省所占的比例是：8:1:1","children":[{"id":"372423431701","title":"-XX:SurvivorRatio调整这个空间比例&nbsp; &nbsp;Eden与Survivor区的比例","children":[],"parent":"943792ef7baf"}],"parent":"d889a92d48a5"},{"id":"bb14ff9bd63e7902","title":"<b>为什么新生代被划分为Eden和survivor？</b><br>","parent":"d889a92d48a5","children":[{"id":"9632bb8e235c65ec","title":"如果没有survivor区，Eden区进行一次MinorGC，存活对象--&gt;老年代--满--&gt;MajorGC","parent":"bb14ff9bd63e7902","children":[]},{"id":"fb2cd0ad9bc096f5","title":"MajorGC消耗时间更长，影响程序执行和响应速度。","children":[],"parent":"bb14ff9bd63e7902"},{"id":"f752993f07f02fba","title":"survivor存在意义：增加进入老年代的筛选条件，减少送到老年代的对象，减少FullGC的次数。","children":[],"parent":"bb14ff9bd63e7902"}],"icons":[{"text":"&#xe67e","index":"27","color":"rgb(96, 160, 240)","name":"flag"}]},{"id":"0e1baf7f7e50836d","title":"<b>为什么要设置两个survivor区</b><br>","parent":"d889a92d48a5","children":[{"id":"5ebe1ff8afa867a0","title":"只有一个survivor区，在第一次Eden区满进行MinorGC，存活对象放到survivor区；第二次Eden区满MinorGC--&gt;survivor区，会产生不连续的内存，无法存放更多的对象。","image":{"w":720,"url":"https://cdn.processon.com/5ff193396376896cfa008846?e=1609670986&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:zpAaVsPm2imw1dm_mfzOsID6WzE=","h":335.5},"children":[],"parent":"0e1baf7f7e50836d"},{"id":"7e7bf82cd0b29adf","title":"设置三个四个survivor区，则每个被分配的survivor空间相对较小，很快被填满。","children":[],"parent":"0e1baf7f7e50836d"},{"id":"d112aea4ae91787a","title":"设置两个survivor区，在MinorGC时可以将Eden区和S0存活的对象以连续存储的方式存入S1区。减少碎片化。（清除阶段的复制算法）","parent":"0e1baf7f7e50836d","children":[],"image":{"w":653,"h":320.5,"url":"https://cdn.processon.com/5ff193595653bb21c1b63365?e=1609671018&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:kHHSGxOiDW0LINseFpbOfXg1hzw="}}],"icons":[{"text":"&#xe67e","index":"27","color":"rgb(96, 160, 240)","name":"flag"}]},{"id":"2de19619fa18d10e","title":"复制算法也是减少碎片化的过程（减少Eden区，减少survivor区）","image":{"w":714,"url":"https://cdn.processon.com/5ff192e1e0b34d19e4f8e758?e=1609670897&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:AmwWkAmdfqOHYMFfD-ebhV3bvtk=","h":303},"parent":"d889a92d48a5","children":[]},{"id":"57e6fc2e7709","title":"几乎所有的Java对象都是在Eden区被new出来的。","children":[{"id":"2614f3ad5918","title":"Eden放不了的大对象，直接进入老年代了。","parent":"57e6fc2e7709","children":[]}],"parent":"d889a92d48a5"},{"id":"d20fd0885deb","title":"IBM研究表明，新生代80%的对象都是朝生夕死","parent":"d889a92d48a5","children":[]},{"id":"82a2e554dd45","title":"-Xmn：设置新生代最大内存大小 memory new。","parent":"d889a92d48a5","children":[]},{"id":"3e783d5a8daccf05","title":"新生区的对象默认生命周期超过 15 ，就会去养老区养老","children":[],"parent":"d889a92d48a5","image":{"w":599.5,"h":220.5,"url":"https://cdn.processon.com/5fe5f00963768932a285d28d?e=1608908313&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:jFtHt2wyyQ2vmA3jyAOxal1qsxA="}}]},{"id":"b0526fd976da","title":"图解对象分配一般过程","parent":"f6a4366f2a09","children":[{"id":"ab3ed18a2762","title":"1、new的对象先放Eden区，放得下直接放入（此区有大小限制 参数-Xmn 一般默认）","children":[],"parent":"b0526fd976da"},{"id":"c4c06b8bb58a","title":"2、当创建新对象，Eden空间填满，会触发一次Minor GC/YGC,young，将Eden不再被其他对象引用的对象进行销毁。将Eden中未销毁的对象移到survive0区。survive0区每个对象都有一个年龄计数器，一次回收还存在的对象，年龄加1","children":[],"parent":"b0526fd976da"},{"id":"abc357d989fe","title":"3、如果Eden有空间，加载的新对象放到Eden区（超大对象放不下入老年代）","children":[],"parent":"b0526fd976da"},{"id":"31854d2032c6","title":"4、再次eden区满，触发垃圾回收，回收eden＋survive0，幸存下来的放在survive1区，年龄加1","children":[],"parent":"b0526fd976da"},{"id":"a3a76fefe97c","title":"5、再垃圾回收，又会将幸存者重新放回survive0区，依次类推","children":[],"parent":"b0526fd976da"},{"id":"fd0548b6b7f4344f","title":"6、超大对象放入老年代，老年代满或放不下，触发majorGC，再放不下，OOM","children":[],"parent":"b0526fd976da"},{"id":"fdcb43d6e196","title":"7、可以设置存活次数，默认15次，超过15次，对象将从年轻区步入老年区","children":[{"id":"4494ff26e537","title":"-XX:MaxTenuringThreshold=N进行设置","children":[{"id":"6f6ebe6c1ab9","title":"","image":{"w":900,"h":684.2157842157842,"url":"http://cdn.processon.com/5edf4c6ae0b34d2a6bda31c4?e=1591695995&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:zC0Au9urXWmy0LefJCMcsoFMGTI="},"children":[],"parent":"4494ff26e537"}],"parent":"fdcb43d6e196"}],"parent":"b0526fd976da"},{"id":"f7e3ac117ac8","title":"总结：","children":[{"id":"a11198dd2271","title":"针对幸存者s0，s1区的总结：复制之后有交换，谁空谁是to。","children":[{"id":"36fb3e0127f1db5e","title":"新生代采用复制算法的目的：为了减少内碎片","children":[],"parent":"a11198dd2271"}],"parent":"f7e3ac117ac8"},{"id":"08b174d5a02a","title":"频繁在新生区收集，很少在养老区收集，几乎不在永久区/元空间搜集","children":[],"parent":"f7e3ac117ac8"}],"parent":"b0526fd976da"}]},{"id":"a338c05f2579","title":"对象分配特殊过程","parent":"f6a4366f2a09","children":[{"id":"ff867443e3ed","title":"","image":{"w":804,"h":649,"url":"http://cdn.processon.com/5edf4d877d9c0844200adedc?e=1591696279&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:zu6OFTSxhhye-a-GyDWVNkaV-yc="},"parent":"a338c05f2579","children":[]},{"id":"2e675cddbb4f","title":"触发YGC，幸存者区就会进行回收，不会主动进行回收","children":[],"parent":"a338c05f2579"},{"id":"215bd9a49e8057c1","title":"幸存区满了咋办？","children":[{"id":"5b792e5760041f54","title":"特别注意，在Eden区满了的时候，才会触发MinorGC，而幸存者区满了后，不会触发MinorGC操作","children":[],"parent":"215bd9a49e8057c1"},{"id":"939a6bb81d89a355","title":"如果Survivor区满了后，新对象可能直接晋升老年代","parent":"215bd9a49e8057c1","children":[]}],"parent":"a338c05f2579"}]},{"id":"f6c5b7af272a","title":"说一下 JVM 调优的工具？<br>","style":{"font-weight":"bold"},"parent":"f6a4366f2a09","children":[{"id":"63f86792347e","title":"<strike>Visual VM（实时监控 推荐~）</strike>","parent":"f6c5b7af272a","children":[]},{"id":"5dba4c043637","title":"<strike>Jprofiler&nbsp;（推荐~）</strike>","parent":"f6c5b7af272a","children":[]},{"id":"4eab9adfad6e","title":"<strike>Java Flight Recorder&nbsp;（实时监控）</strike>","parent":"f6c5b7af272a","children":[]},{"id":"63b35d4dc685","title":"jconsole <br>","children":[{"id":"0a3203ab3250","title":"用于对 JVM 中的内存、线程和类等进行监控","parent":"63b35d4dc685","children":[]}],"parent":"f6c5b7af272a"},{"id":"10eee66b48d6","title":"jvisualvm","parent":"f6c5b7af272a","children":[{"id":"381cb3f61500","title":"JDK 自带的全能分析工具，可以分析：内存快照、线程快照、程序死锁、监控内存的变化、gc 变化等。<br>","children":[],"parent":"10eee66b48d6"}]},{"id":"7021f16596b4","title":"说一下 JVM 调优的工具？","children":[],"parent":"f6c5b7af272a"}],"icons":[{"text":"&#xe6c6","index":"9","name":"face"}]},{"id":"aec8e3735f38","title":"分代收集思想 MinorGC，MajorGC，FullGC&nbsp;","parent":"f6a4366f2a09","children":[{"id":"4da7d185c2d7","title":"针对HotSpotVM的实现","parent":"aec8e3735f38","children":[{"id":"1224e31fa8a9","title":"GC按照内存回收区域分为","children":[{"id":"060a74647d79","title":"部分收集，不是完整收集整个Java堆","children":[{"id":"d84d01106440","title":"新生代收集，MinorGC （YoungGC），新生代( Eden、S0/S1 )的垃圾收集","children":[],"parent":"060a74647d79"},{"id":"10cb24f8ee2a","title":"老年代收集，MajorGC/oldGC","children":[{"id":"d3ae49941387","title":"目前只有CMS（concurrent mark sweep并行标记扫描） GC会单独收集老年代的行为","parent":"10cb24f8ee2a","children":[]}],"parent":"060a74647d79"},{"id":"ae8b51e66455","title":"混合收集","children":[{"id":"b84b4ef70bae","title":"收集整个新生代以及部分老年代的垃圾收集","parent":"ae8b51e66455","children":[{"id":"cbdf5344d1d7","title":"目前只有G1 GC会有这种行为","parent":"b84b4ef70bae","children":[]},{"id":"2bb84815837816cb","title":"很多时候MajorGC与FullGC混淆使用，具体分辨是老年代回收还是整堆回收","children":[],"parent":"b84b4ef70bae"}]}],"parent":"060a74647d79"}],"parent":"1224e31fa8a9","collapsed":false},{"id":"7d7829aa2bc7","title":"整堆收集收集，整个Java堆和方法区的垃圾收集","parent":"1224e31fa8a9","children":[]}],"parent":"4da7d185c2d7"}]},{"id":"c7b00f3a8a77","title":"MinorGC的触发条件","parent":"aec8e3735f38","children":[{"id":"c4e518a85e4d","title":"Eden区满，触发MinorGC，Survivor区满不触发GC。每次MinorGC会清理年轻代（eden＋survivor）的内存","parent":"c7b00f3a8a77","children":[]},{"id":"e08d06c74c99","title":"因为Java对象大多朝生夕灭，所以MinorGC非常频繁","parent":"c7b00f3a8a77","children":[]},{"id":"4a8051f5e09d","title":"MinorGC会引发STW（拓展）","parent":"c7b00f3a8a77","children":[]}]},{"id":"50003a8b41e0","title":"老年代GC（MajorGC/FullGC）触发条件","children":[{"id":"56904594030f","title":"老年代空间不足，会触发MinorGC，空间还不足，触发MajorGC或FullGC。还不足，OOM","children":[{"id":"e31c8131a02d","title":"出现了MajorGC，经常会伴随至少一次MinorGC","children":[{"id":"a28c99b6e2d76ad7","title":"非绝对，在Parallel Scavenge收集器的收集策略里就直接进行MajorGC的策略选择过程","parent":"e31c8131a02d","children":[]}],"parent":"56904594030f"}],"parent":"50003a8b41e0"},{"id":"13dd9899b97c","title":"MajorGC的速度比MinorGC慢10倍以上，STW的时间更长","children":[],"parent":"50003a8b41e0"}],"parent":"aec8e3735f38"},{"id":"b5ee553b29ac","title":"FullGC的触发机制","children":[{"id":"36443ef7c9aa","title":"1、调用System.gc()时，系统建议执行FullGC，但是不必然执行","children":[],"parent":"b5ee553b29ac"},{"id":"940196caddc2","title":"2、老年代空间不足","children":[],"parent":"b5ee553b29ac"},{"id":"8918e47e8b4a","title":"3、方法区空间不足","children":[],"parent":"b5ee553b29ac"},{"id":"dabc8ef5de66","title":"4、通过MinorGC后进入老年代的平均大小，大于老年代的可用内存","children":[],"parent":"b5ee553b29ac"},{"id":"0cff7806d11a","title":"5、由Eden区，Survivor 0区向Survivor 1区复制时，对象的大小大于ToSpace可用内存，则把改对象转存到老年代，且老年代的可用内存小于该对象的大小","children":[],"parent":"b5ee553b29ac"},{"id":"79fedbf64e07","title":"FullGC是开发或调优中尽量要避免的，这样暂停时间会短一些。","children":[],"parent":"b5ee553b29ac"}],"parent":"aec8e3735f38"},{"id":"2d96df9d0280b016","title":"Minor GC 针对于新生区，Major GC 针对于老年区，Full GC 针对于整个堆空间和方法区","parent":"aec8e3735f38","children":[]},{"id":"84f41b61ec1dfe74","title":"CMS","children":[],"parent":"aec8e3735f38"},{"id":"6d96c0efbf88c13f","title":"G1","children":[],"parent":"aec8e3735f38"},{"id":"228b3d82007faa99","title":"STW&nbsp;&nbsp;暂停其它用户的线程，等待垃圾回收线程结束，用户线程才恢复运行","children":[],"parent":"aec8e3735f38"}],"icons":[{"text":"&#xe693","index":"45","color":"rgb(51, 51, 51)","name":""}]},{"id":"7aefa4cdca29","title":"简述分代垃圾回收器是怎么工作的？<br>","style":{"font-weight":"bold"},"children":[{"id":"9d08c1b0c09b","title":"老年代：新生代=2:1","parent":"7aefa4cdca29","children":[]},{"id":"cbd51c78bec1","title":"Eden区：from区：to区=8:1:1","parent":"7aefa4cdca29","children":[{"id":"04e566349ffb","title":"Eden区满，进行GC，将Eden+from区存活的对象移动到to区","parent":"cbd51c78bec1","children":[]},{"id":"7fac1bc4a2a4","title":"清空 Eden 和 From Survivor 分区，from/to调换名称","parent":"cbd51c78bec1","children":[]},{"id":"f50a5231f6a9","title":"对象到to区后，对象头的GC分代年龄加一，到达年龄阈值后进入老年代；to区满eden区的对象可能直接进入老年代；大对象可能直接进入老年代","parent":"cbd51c78bec1","children":[]},{"id":"1c102b7153bd","title":"老年代达到一定阈值时，进行老年代的垃圾回收（标记-压缩算法）","parent":"cbd51c78bec1","children":[]}]}],"parent":"f6a4366f2a09","icons":[{"index":"9","text":"&#xe6c6","color":"rgb(51, 51, 51)","name":"face"}]},{"id":"08470a44c9d9","title":"堆空间分代思想（堆空间为什么分代）","parent":"f6a4366f2a09","children":[{"id":"e65e949bedfd","title":"可以不分代，分代目的：优化GC性能，避免对所有对象进行扫描，统一对新对象进行管理","parent":"08470a44c9d9","children":[]}]},{"id":"751d50eeea5a","title":"GC第一大任务：内存分配（第二大任务：内存回收）","style":{"font-weight":"bold"},"parent":"f6a4366f2a09","children":[{"id":"3d9fc9103f41","title":"如果对象再Eden出生并经过第一次MinorGC后仍然存活，并且能被Survivor区容纳，则被移动到Survivor空间中，并将对象年龄设置为1，对象再Survivor区每熬过一次MinorGC，年龄就+1，当年龄增加到一定程度（默认为15，不同Jvm，GC都所有不同）时，就会被晋升到老年代中","children":[{"id":"b6bfd31288d4","title":"-XX:MaxTenuringThreshold","children":[],"parent":"3d9fc9103f41"}],"parent":"751d50eeea5a"},{"id":"355900e9f70b","title":"优先分配到Eden","children":[],"parent":"751d50eeea5a"},{"id":"f8b1dbe8832d","title":"大对象直接分配到老年代","children":[{"id":"f54f7a64d6e6","title":"尽量避免程序中出现过多的大对象","children":[],"parent":"f8b1dbe8832d"}],"parent":"751d50eeea5a"},{"id":"e234551d8c48","title":"长期存活的对象分配到老年代","children":[],"parent":"751d50eeea5a"},{"id":"4080a602f7b2","title":"动态对象年龄分配","parent":"751d50eeea5a","children":[{"id":"40b9c3a830e0","title":"如果Survivor区中相同年龄的所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象可以直接进入老年代，无需等到MaxTenuringThreshold中要求的年龄","parent":"4080a602f7b2","children":[]}]},{"id":"e1e14861388a","title":"空间分配担保","parent":"751d50eeea5a","children":[{"id":"277abcb8bd6c","title":"-XX:HandlePromotionFailure","parent":"e1e14861388a","children":[]},{"id":"123ec8ee8586","title":"在发生Minor GC之前，jvm会检查老年代最大可用的连续空间，是否大于新生代所有对象的总空间","task":{"completion":100},"parent":"e1e14861388a","children":[{"id":"b89b560f95d7","title":"如果大于，则此次MinorGC是安全的","task":{"completion":100},"children":[],"parent":"123ec8ee8586"},{"id":"27244768b94e","title":"如果小于，则查看-XX:HandlePromotionFailure设置是否允许担保失败","task":{"completion":100},"parent":"123ec8ee8586","children":[{"id":"fed8e5533b5e","title":"true","parent":"27244768b94e","children":[{"id":"7dfd97854ce4","title":"会继续检查老年代最大可用连续空间是否大于历次晋升到老年代的对象的平均大小","parent":"fed8e5533b5e","children":[]},{"id":"89b5b45b1a75","title":"大于，则尝试进行一次MinorGC，但是这次MinorGC依然是有风险的","parent":"fed8e5533b5e","children":[]},{"id":"6285865e4263","title":"小于，则改为进行一次FullGC","parent":"fed8e5533b5e","children":[]}]},{"id":"6e34b2ce59c2","title":"false","children":[{"id":"25f90cf87fad","title":"则改为进行一次FullGC","parent":"6e34b2ce59c2","children":[]}],"parent":"27244768b94e"}]},{"id":"d4b726e23fff","title":"jdk6update24之后，这个参数不会再影响到虚拟机的空间分配担保策略。","children":[{"id":"fa9b392e04fb","title":"规则改为只要老年代的连续空间大于新生代对象总大小，或者历次晋升的平均大小，就会进行MinorGC","children":[],"parent":"d4b726e23fff"},{"id":"c98c9c06c0ba","title":"否则进行FullGC","children":[],"parent":"d4b726e23fff"}],"parent":"123ec8ee8586"}]}]}],"icons":[{"index":"9","text":"&#xe6c6","color":"rgb(51, 51, 51)","name":"face"}]},{"id":"cff4ccbbb824","title":"为对象分配内存TLAB","parent":"f6a4366f2a09","children":[{"id":"258f8e825bbd","title":"Thread Local Allocation Buffer","parent":"cff4ccbbb824","children":[]},{"id":"b6679d121973","title":"堆区是线程共享区域，任何线程都可以访问到堆区的共享数据","parent":"cff4ccbbb824","children":[]},{"id":"68cdf5827304","title":"由于对象实例的创建在JVM中非常频繁，因此在并发环境下从堆区中划分内存空间是线程不安全的。","parent":"cff4ccbbb824","children":[]},{"id":"5c91234898d0","title":"为避免多个线程操作（<b>指针碰撞</b>方式分配内存）同一地址，需要使用加锁等机制，进而影响分配速度","parent":"cff4ccbbb824","children":[]},{"id":"ee7d617289bf","title":"TLAB","children":[{"id":"62fb992b7eab","title":"从内存模型而不是垃圾收集的角度，对Eden区域进行划分，JVM为每个线程分配了一个私有缓存区域，包含在Eden空间中","children":[],"parent":"ee7d617289bf"},{"id":"2d6a368a8c24","title":"多线程同时分配内存时，使用TLAB可以避免一系列的非线程安全问题，同时还能够提升内存分配的吞吐量，因此我们将这种内存分配方式成为快速分配策略","parent":"ee7d617289bf","children":[]},{"id":"54e32d5e7826","title":"openjdk衍生出来的JVM都提供了TLAB的设计","parent":"ee7d617289bf","children":[{"id":"8cab2d76c73b","title":"","image":{"w":900,"h":468.5609532538955,"url":"http://cdn.processon.com/5ee0339fe0b34d2a6bdb7c69?e=1591755183&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:SoKcLOWFU5YnCg_HPgrGTSd13OE="},"parent":"54e32d5e7826","children":[]}]},{"id":"dcf2add9cb85","title":"补充","children":[{"id":"7e9b7d4563b3","title":"尽管不是所有的对象实例都能够在TLAB中成功分配内存，但是JVM确实是将TLAB作为内存分配的首选","children":[],"parent":"dcf2add9cb85"},{"id":"2bd756d83f77","title":"开发人员通过-XX:UseTLAB设置是否开启TLAB空间","children":[],"parent":"dcf2add9cb85"},{"id":"591e74c1b75d","title":"默认情况下，TLAB空间内存非常小，仅占有整个Eden空间的1%，通过-XX:TLABWasteTargetPercent设置TLAB空间所占用Eden空间的百分比大小","parent":"dcf2add9cb85","children":[]},{"id":"61718e29233d","title":"一旦对象在TLAB空间分配内存失败，JVM就会尝试通过使用加锁机制确保数据操作的原子性，从而直接在Eden空间中分配内存","style":{"font-weight":"bold"},"parent":"dcf2add9cb85","children":[{"id":"78febdb04980","title":"HotSpot虚拟机对象探秘--&gt;对象创建--&gt;并发问题<br>","style":{"font-weight":"bold"},"children":[],"parent":"61718e29233d"}]}],"parent":"ee7d617289bf"}],"parent":"cff4ccbbb824"}]},{"id":"caabdca72ae9","title":"面试题：堆是分配对象的唯一选择吗<br>","task":{},"parent":"f6a4366f2a09","children":[{"id":"3eb02bf7ec6f","title":"随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术，将会导致一些微秒变化，所有对象分配到堆上渐渐变得不那么绝对了。","task":{"completion":100},"children":[],"parent":"caabdca72ae9"},{"id":"d5fad968ef79","title":"有一种特殊情况，如果经过逃逸分析后发现，一个对象并没有逃逸出方法的话，那么就可能被优化成栈上分配，这样无需堆上分配，也不需要垃圾回收了，也是最常见的堆外存储技术","task":{"completion":100},"children":[],"parent":"caabdca72ae9"},{"id":"fc1435af3d513cfd","title":"逃逸分析，未逃逸，栈上分配","parent":"caabdca72ae9","children":[]},{"id":"78bf83a03dd6a203","title":"标量替换","children":[],"parent":"caabdca72ae9"},{"id":"c978cac3f34a","title":"TaoBaoVM，其中创新的GCIH（GC invisible heap）技术实现了off-heap,实现了将生命周期较长的Java对象从heap中移动heap外，并且GC不能管理GCIH内部的Java对象，以此达到降低GC的回收频率和提升GC的回收效率的目的","task":{"completion":100},"children":[],"parent":"caabdca72ae9"},{"id":"1035c84ee730","title":"逃逸分析概述","task":{},"children":[{"id":"89b940d97c1a","title":"对象引用范围分析，减少程序同步负载、内存堆分配压力","parent":"1035c84ee730","children":[{"id":"09408b28000c","title":"对象在方法中定义，对象只在方法内部使用，未逃逸","parent":"89b940d97c1a","children":[]},{"id":"90ba557e124c","title":"被外部方法引用，发生逃逸","parent":"89b940d97c1a","children":[{"id":"620fe15073c6","title":"判断：new的对象实体是否有可能在方法外被调用（csdn）","parent":"90ba557e124c","children":[]}]},{"id":"c12136a374205030","title":"启示：开发中使用局部变量，替代在方法外定义。","children":[],"parent":"89b940d97c1a"}]},{"id":"95ce2d99fddfa802","title":"逃逸分析：代码优化","children":[{"id":"b13a2506ef08","title":"栈上分配：调用栈内运行，线程结束，栈空间被回收，局部变量对象也被回收。无须进行垃圾回收。","parent":"95ce2d99fddfa802","children":[]},{"id":"3664ed4f4950","title":"同步省略（线程同步代价高，同步降低并发性和性能。又叫锁清除）","parent":"95ce2d99fddfa802","children":[{"id":"9e743255776c","title":"动态编译（解释运行）阶段，JIT编译器用，逃逸分析，来判断同步块所使用的锁对象，是否只能被一个线程访问","children":[{"id":"fdaf2eabe684","title":"是，JIT编译器在编译阶段，会取消对这部分代码的同步。提高并发性和性能","children":[{"id":"9fcbda0f2cc5","title":"","image":{"w":900,"h":419.9544764795144,"url":"http://cdn.processon.com/5ee180e607912929cb397a9c?e=1591840502&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:fcWrG7_oKXRFBoFzLJNCa1h0tgw="},"parent":"fdaf2eabe684","children":[]}],"parent":"9e743255776c"}],"parent":"3664ed4f4950"}]},{"id":"5314328422a6","title":"标量替换（分离对象）","parent":"95ce2d99fddfa802","children":[{"id":"59bd78c57489","title":"JIT编译器在编译阶段，经过逃逸分析，发现一个对象不会被外界访问，那么经过JIT优化，就会把这对象拆解成若干个成员变量来代替。","children":[],"parent":"5314328422a6"},{"id":"885d40d86b2f","title":"标量：无法再分解的更小的数据，如Java中原始数据类型，聚合量分解为标量","children":[],"parent":"5314328422a6"},{"id":"6e89349e911d","title":"","children":[{"id":"f619d611f865","title":"","children":[],"parent":"6e89349e911d","image":{"w":900,"url":"http://cdn.processon.com/5ee18195f346fb1ae559526c?e=1591840677&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:5Jlee7EFKbEO0Vi6w4JfwnliYak=","h":261.59769008662175}},{"id":"459c0377aa24","title":"","parent":"6e89349e911d","children":[],"image":{"w":900,"url":"http://cdn.processon.com/5ee181c7e401fd1fd287923d?e=1591840727&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:d7LMuv6gdzJ3fAxHT-5Lq2LkE_8=","h":249.94913530010172}}],"parent":"5314328422a6"},{"id":"6e23633834ff","title":"标量替换参数：-XX:EliminateAllocations，默认打开","parent":"5314328422a6","children":[]}]}],"parent":"1035c84ee730"}],"parent":"caabdca72ae9"}]},{"id":"5c68ee009333","title":"常用的 JVM 调优的参数都有哪些？<br>","style":{"font-weight":"bold"},"parent":"f6a4366f2a09","children":[{"id":"29777a120638745f","title":"-Xms2g","parent":"5c68ee009333","children":[{"id":"94c26ad54a1b","title":"初始化堆大小为2g<br>","children":[],"parent":"29777a120638745f"}]},{"id":"af7e23c699dc46d3","title":"-Xmx2g","parent":"5c68ee009333","children":[{"id":"1b9aa46ecd64","title":"最大堆内存为2g","parent":"af7e23c699dc46d3","children":[]}]},{"id":"9537d1453643455c","title":"-Xmn","parent":"5c68ee009333","children":[{"id":"aab1994a51dc","title":"设置新生区内存大小","children":[],"parent":"9537d1453643455c"}]},{"id":"7a1f7d4c41d6b7b9","title":"-XX:NewRatio=2","children":[{"id":"695219fac4c5","title":"设置新生代与老年代内存比例为1:2","children":[],"parent":"7a1f7d4c41d6b7b9"}],"parent":"5c68ee009333"},{"id":"9f36c4089365bfb3","title":"-XX:SurviveRatio=8","parent":"5c68ee009333","children":[{"id":"f2c697a872e5","title":"设置eden区与survivor区内存比例为8:1:1<br>","parent":"9f36c4089365bfb3","children":[]}]},{"id":"5eabd61d6be3d55c","title":"-XX:MaxTenuringThreshold","parent":"5c68ee009333","children":[{"id":"3515fd9fb9cd","title":"设置分代年龄阈值","children":[],"parent":"5eabd61d6be3d55c"}]},{"id":"966f0cb5aa9b9185","title":"-XX:＋UseParNewGC","parent":"5c68ee009333","children":[{"id":"8486a939df26","title":"指定使用 ParNew + Serial Old 垃圾回收器组合<br>","children":[],"parent":"966f0cb5aa9b9185"}]},{"id":"28e0f2ce8007","title":"-XX:+UseParallelGC&nbsp;","children":[{"id":"4b599b85d511","title":"指定年轻代使用Parallel scavenge+Parallel Old并行收集器执行内存回收任务","parent":"28e0f2ce8007","children":[]}],"parent":"5c68ee009333"},{"id":"e54b6dfd7755","title":"-XX:+UseParallelOldGC","parent":"5c68ee009333","children":[{"id":"37b112b07b6e","title":"默认jdk8开启。默认开启一个，另一个也会被开启。（互相激活）<br>","parent":"e54b6dfd7755","children":[]}]},{"id":"58e6fe962cf49422","title":"-XX:＋UseConcMarkSweepGC","parent":"5c68ee009333","children":[{"id":"3190da15de95","title":"开启该参数后会自动将-XX:+UseParNewGC打开。即：ParNew（Young区）+CMS（Old区）+Serial Old（Old区备选方案）的组合。","children":[],"parent":"58e6fe962cf49422"}]},{"id":"f1dee3d2a63b","title":"-XX:+PrintGC：开启打印 gc 信息","children":[],"parent":"5c68ee009333"},{"id":"b6171c264e34","title":"-XX:+PrintGCDetails：打印 gc 详细信息<br>","children":[],"parent":"5c68ee009333"}],"icons":[{"index":"27","text":"&#xe67e","color":"rgb(96, 160, 240)","name":"flag"}]}],"collapsed":true},{"id":"535260158856","title":"方法区","lineStyle":{"randomLineColor":"#FDB813"},"children":[{"id":"40c8c3a76c84","title":"运行时数据区的最后一部分","image":{"w":565,"url":"https://cdn.processon.com/5fe9dc781e08531ceaba328e?e=1609165449&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:KU5so-2sA3cikJu65tM09toxLWc=","h":190},"children":[],"parent":"535260158856"},{"id":"bd4bfe3fabbe","title":"栈、堆、方法区交互关系","parent":"535260158856","children":[{"id":"cca87d06119d","title":"","parent":"bd4bfe3fabbe","children":[],"image":{"w":900,"url":"http://cdn.processon.com/5ee182c35653bb29259000bc?e=1591840980&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:QSK3EDM-oFaoY8tGJnfHOGzH9zk=","h":434.5864661654135}},{"id":"6983f9cc1778","title":"","parent":"bd4bfe3fabbe","children":[],"image":{"w":900,"url":"http://cdn.processon.com/5ee183dc6376891e81c275c7?e=1591841261&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:JVUdx5ydUMmJ4WmgJwuyQO5OaGA=","h":467.62048192771084}},{"id":"845b173fe72e1aa7","title":"Person 类的 .class 信息存放在方法区中","children":[],"parent":"bd4bfe3fabbe"},{"id":"9a19c8b17d12768b","title":"person 变量存放在 Java 栈的局部变量表中","children":[],"parent":"bd4bfe3fabbe"},{"id":"27bf70a32195ec1d","title":"真正的 person 对象存放在 Java 堆中","children":[],"parent":"bd4bfe3fabbe"},{"id":"f95da9b3a9470a76","title":"在 person 对象中，有个指针指向方法区中的 person 类型数据，表明这个 person 对象是用方法区中的 Person 类 new 出来的","children":[],"parent":"bd4bfe3fabbe"}],"collapsed":false},{"id":"cea3b57ce489","title":"方法区的理解","parent":"535260158856","children":[{"id":"49e5d6e9b44d","title":"方法区定位","parent":"cea3b57ce489","children":[{"id":"69714cb5728443ef","title":"《Java虚拟机规范》：尽管所有方法区在逻辑上属于堆一部分，但一些简单实现，可能不会进行垃圾收集或进行压缩。","parent":"49e5d6e9b44d","children":[]},{"id":"e3a8eef91d517627","title":"对于HotSpot，方法区又名：Non-Heap（非堆），目的：区分堆。","parent":"49e5d6e9b44d","children":[]},{"id":"0f82a7d9f124d9fe","title":"方法区看作是一块独立于Java堆的内存空间","parent":"49e5d6e9b44d","children":[]}]},{"id":"60290d6b63eb47d5","title":"方法区和堆的异同","parent":"cea3b57ce489","children":[{"id":"259f6e4609b4e4cd","title":"方法区主要存放Class，堆中主要存放实例化对象（堆和方法区的不同点）","children":[],"parent":"60290d6b63eb47d5"},{"id":"c9efc207ea60","title":"方法区/Java堆，各个线程共享内存区域（同）","parent":"60290d6b63eb47d5","children":[]},{"id":"fe3c9cee5fdd","title":"方法区/Java堆，在JVM启动时被创建，物理内存空间可以不连续，逻辑空间要连续（同）","parent":"60290d6b63eb47d5","children":[]},{"id":"5ae16b55e345","title":"方法区/Java堆，可以选择固定大小或者可扩展（同）","parent":"60290d6b63eb47d5","children":[]},{"id":"9591cf3ba2b3","title":"方法区大小决定了系统可以保存多少个类，如果类定义太多，导致方法区溢出，JVM同样抛出内存溢出异常 OOM","parent":"60290d6b63eb47d5","children":[{"id":"699718400c9f955f","title":"java.lang.OutofMemoryError:PermGen space","children":[],"parent":"9591cf3ba2b3"},{"id":"8b99baaeaf1cb53f","title":"java.lang.OutOfMemoryError:Metaspace","parent":"9591cf3ba2b3","children":[]}]},{"id":"3aa5685e0ad8","title":"关闭JVM就会释放这个区域的内存（待）","children":[],"parent":"60290d6b63eb47d5"}]},{"id":"3551202c61b50b64","title":"举例说明方法区OOM","children":[{"id":"f8fd44bd25ab43d0","title":"加载大量的第三方的jar包","children":[],"parent":"3551202c61b50b64"},{"id":"ba63803dd2e9b3b5","title":"Tomcat部署的工程过多（30~50个）","children":[],"parent":"3551202c61b50b64"},{"id":"c71e30fe8f35bce6","title":"大量动态的生成反射类","children":[],"parent":"3551202c61b50b64"}],"parent":"cea3b57ce489"}]},{"id":"60ab7bfa0365","title":"HotSpot中方法区的演进","parent":"535260158856","children":[{"id":"078f03286182","title":"HostSpot可看作方法区永久代等价，本质不等价，《Java虚拟机规范》对如何实现方法区，不做统一要求。","children":[],"parent":"60ab7bfa0365"},{"id":"329c2582952b","title":"在jdk7及以前，方法区--&gt;永久代，jdk8开始，永久代--&gt;元空间","parent":"60ab7bfa0365","children":[{"id":"1fe4ce1caebd","title":"元空间永久代，都是对JVM规范中方法区的实现。","parent":"329c2582952b","children":[]},{"id":"eee8b247f85bcb23","title":"元空间永久代区别：元空间不在虚拟机中设置内存，使用本地内存（堆外内存）","parent":"329c2582952b","children":[]},{"id":"1f7185fe40f9","title":"根据Jvm规范，如果方法区无法满足新的内存分配需求，将抛出OOM异常","parent":"329c2582952b","children":[]}]},{"id":"3c165f3c6c30","title":"永久代更容易导致Java程序OOM（超过-XX:MaxPermsize上限）","parent":"60ab7bfa0365","children":[]}]},{"id":"2536115b5784","title":"设置方法区大小与OOM","parent":"535260158856","children":[{"id":"9611055d7a3d","title":"方法区大小可固定，jvm可根据应用需求动态调整","parent":"2536115b5784","children":[{"id":"e39f3a883ae8","title":"JDK7及之前设置永久代大小","parent":"9611055d7a3d","children":[{"id":"b256a3552d08","title":"-XX:PermSize 设置永久代初始分配空间","parent":"e39f3a883ae8","children":[]},{"id":"53c8c85bf9b7","title":"-XX:MaxPermSize 设置永久代最大可分配空间","parent":"e39f3a883ae8","children":[]},{"id":"c3ec96b72093","title":"JVM加载类信息容量超过设定值，会报异常OutofMemoryError:PermGen space","parent":"e39f3a883ae8","children":[]}]},{"id":"a6e75b9655d0","title":"JDK8设置元空间大小","parent":"9611055d7a3d","children":[{"id":"61b1ba13d797","title":"-XX:MetaspaceSize：设置初始元空间大小","parent":"a6e75b9655d0","children":[{"id":"37aa0d0cfd19554c","title":"64位服务端JVM，默认初始元数据区空间21M，初始的高水位线","parent":"61b1ba13d797","children":[]},{"id":"eb0632bbcec774b0","title":"触及水位线，FullGC触发并卸载没用类，高水位线会被重置。新高水位线值取决于GC后释放了多少元空间。","children":[{"id":"7a7a6571a804a1c3","title":"如果释放空间不足，在不超过最大设定值时，适当提高该值。","children":[],"parent":"eb0632bbcec774b0"},{"id":"9e60fe29c65dd536","title":"如果释放空间过多，则适当降低该值。","children":[],"parent":"eb0632bbcec774b0"}],"parent":"61b1ba13d797"},{"id":"6f04c91c1009039a","title":"如果初始化高水位线设置过低，上述高水位线调整情况会发生很多次，FullGC多次调用。为避免频繁FullGC，建议将-XX:MetaspaceSize设置为一个相对较高值","parent":"61b1ba13d797","children":[]}]},{"id":"563c2ab434f9","title":"-XX:MaxMetaspaceSize：-1（没有限制）","parent":"a6e75b9655d0","children":[{"id":"b3e096b9b45a","title":"不指定大小，虚拟机耗尽所有系统可用内存，一样抛出异常OutOfMemoryError:Metaspace","parent":"563c2ab434f9","children":[]}]}]}]}]},{"id":"c521e93569a8","title":"如何解决OOM或heap space异常","children":[{"id":"33dfb1ee59a4","title":"一般手段：通过内存映像分析工具（如Eclipse Memory Analyzer），对dump出来的堆转存储快照分析，重点确认：内存中的对象是否是必要的。先分清：内存泄露，还是内存溢出","parent":"c521e93569a8","children":[]},{"id":"a25dba415bf71ba8","title":"什么是内存泄漏？","children":[{"id":"0692a4b002961341","title":"大量引用指向某些对象，但是这些对象以后不会使用。这些对象还和GC ROOT有关联，所以也不会被回收","task":{"completion":100},"parent":"a25dba415bf71ba8","children":[]},{"id":"dbed7907e6b67ed1","title":"大量饮用--&gt;对象，不去用又不能回收","children":[],"parent":"a25dba415bf71ba8"}],"parent":"c521e93569a8"},{"id":"4754207974a3","title":"若内存泄露，可进一步通过工具查看泄露对象到GC Roots的引用链，于是就能找到内存泄露对象时通过怎样的路径与GC Roots相关联，导致垃圾收集器无法自动回收他们。根据引用链信息，可以较准确的定位出泄露代码的位置","task":{"completion":100},"children":[],"parent":"c521e93569a8"},{"id":"633b86b52bc0362a","title":"若内存泄漏，导致垃圾回收器无法自动回收原因","parent":"c521e93569a8","children":[]},{"id":"105332196af7","title":"如果不存在内存泄露，或者说内存中的对象确实都还必须存活着，那就应当检查虚拟机的堆参数（-Xmx与-Xms），与物理机器内存对比是否还可以调大，从代码检查是否某些对象生命周期过长，持有状态时间过长，尝试减少程序运行时的内存耗用","task":{"completion":100},"children":[],"parent":"c521e93569a8"},{"id":"80ac90bbc4726c4c","title":"若内存溢出，jvm参数-Xmx/-Xms 调大，减少程序运行时的内存耗用","children":[],"parent":"c521e93569a8"}],"parent":"535260158856"},{"id":"e291dc18cf98","title":"方法区的内部结构","parent":"535260158856","children":[{"id":"a5f8f76fbef3","title":"方法区存储什么","children":[{"id":"a6a7b4ba3149","title":"用于存储已被虚拟机加载的类型信息，常量，静态变量，即时编译器编译后的代码缓存","children":[],"parent":"a5f8f76fbef3","image":{"w":529,"h":95.5,"url":"https://cdn.processon.com/5feacc38e0b34d2934f25d51?e=1609226824&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:zHMRwkDkgH0y_rMsVDYkCyWw7lM="}},{"id":"3e60f2669eac","title":"对于每个加载的类型（类Class，接口Interface，枚举Enum，注解annotation）JVM必须在方法区中存储以下类型信息","children":[{"id":"cd2328f593d1","title":"这个类型的修饰符（public，abstract，final的某个子集）","children":[],"parent":"3e60f2669eac"},{"id":"e883b361f4a5","title":"这个类的完整有效名称（全名=包名.类名）","children":[],"parent":"3e60f2669eac"},{"id":"c58c904c077c","title":"这个类型直接父类的完整有效名（对于interface或是java.lang.Object，都没有父类）","children":[],"parent":"3e60f2669eac"},{"id":"05d03c4a9c82","title":"这个类型直接接口的一个有序列表","children":[],"parent":"3e60f2669eac"},{"id":"387e93f6113c93fd","title":"例：public class MethodInnerStrucTest extends Object implements Comparable&lt;String&gt;, Serializable ","children":[],"parent":"3e60f2669eac"}],"parent":"a5f8f76fbef3","collapsed":false},{"id":"3c7eb85309ea","title":"域（Field）信息","children":[{"id":"9035176b4959","title":"JVM必须在方法区中保存类型的所有域的相关信息，以及域的声明顺序","children":[],"parent":"3c7eb85309ea"},{"id":"36d8716db43d","title":"域的相关信息包括","children":[{"id":"2d8da3f5bbb46fe6","title":"域修饰符（public，private，protected，static，final，volatile，transient的某个子集）","children":[],"parent":"36d8716db43d"},{"id":"6590c803700ca2d9","title":"域类型","task":{},"children":[],"parent":"36d8716db43d"},{"id":"bff033396323f6a0","title":"域名称","parent":"36d8716db43d","children":[]},{"id":"f703dde5d1ef8b3a","title":"例：public int num = 10;","children":[],"parent":"36d8716db43d"}],"parent":"3c7eb85309ea"},{"id":"0d53c0a03a2dda9e","title":"域信息特殊情况","children":[{"id":"f55fcfcbb81931ae","title":"类变量：non-final 类型","parent":"0d53c0a03a2dda9e","children":[{"id":"722431c561b8de0a","title":"静态变量和类关联在一起，随着类的加载而加载，他们成为类数据在逻辑上的一部分","task":{"completion":100},"children":[],"parent":"f55fcfcbb81931ae"},{"id":"91e3540b44c04f2c","title":"类变量被类的所有实例共享，即使没有类实例时，你也可以访问它（空指针调用不会异常）","task":{"completion":100},"children":[],"parent":"f55fcfcbb81931ae"},{"id":"560eb97f98c19b1b","title":"证明不属于特定类实例，随着类的加载而加载","parent":"f55fcfcbb81931ae","children":[]}]},{"id":"b04ca2a16552ded7","title":"全局常量：static final 进行修饰","parent":"0d53c0a03a2dda9e","children":[{"id":"59760ed0d673989a","title":"每个全局常量在编译阶段被分配。","children":[],"parent":"b04ca2a16552ded7"},{"id":"de9335d0fe7cf0a5","title":"反编译，查看字节码指令，可以发现 number 的值已写死在字节码文件中","parent":"b04ca2a16552ded7","children":[]}]}],"parent":"3c7eb85309ea"}],"parent":"a5f8f76fbef3","collapsed":false},{"id":"c9dfacc49860","title":"方法信息","parent":"a5f8f76fbef3","children":[{"id":"b5ab22c53732","title":"JVM必须保存所有方法的以下信息，同域信息一样包括声明顺序","children":[],"parent":"c9dfacc49860"},{"id":"8663f1cde4e6","title":"方法的修饰符（public，private，protected，static，final，synchronized，native，abstract的一个子集）","parent":"c9dfacc49860","children":[]},{"id":"f8169c3046f5","title":"方法的返回类型（包括 void 返回类型），void 在 Java 中对应的类为 void.class","parent":"c9dfacc49860","children":[]},{"id":"3c8db945d5f1","title":"方法名称","children":[],"parent":"c9dfacc49860"},{"id":"9f5c260388e0","title":"方法参数的数量和类型（按顺序）","children":[],"parent":"c9dfacc49860"},{"id":"4b6c2b907483","title":"方法的字节码（bytecodes）、操作数栈、局部变量表及大小（abstract和native方法除外）","children":[],"parent":"c9dfacc49860"},{"id":"591c7a8af901","title":"异常表（abstract和native方法除外），异常表记录每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引","children":[],"parent":"c9dfacc49860"}],"collapsed":false},{"id":"ecaa5f0ab7ed","title":"运行时常量池 VS 常量池","parent":"a5f8f76fbef3","children":[{"id":"ffeeb05a79d0","title":"方法区，内部包含了运行时常量池","parent":"ecaa5f0ab7ed","children":[]},{"id":"d3f09f8b484d","title":"字节码文件，内部包含了常量池","children":[{"id":"a9bb83722f5a","title":"运行时将常量池加载到方法区，就是运行时常量池","children":[],"parent":"d3f09f8b484d"},{"id":"e67e981efd8f30ca","title":"执行时，将常量池中的符号引用（字面量）转换为直接引用（真正的地址值）","parent":"d3f09f8b484d","children":[]}],"parent":"ecaa5f0ab7ed"},{"id":"17811aa4f832","title":"加载类的信息在方法区，需要理解字节码文件","children":[],"parent":"ecaa5f0ab7ed"},{"id":"0fc3873b5bb9","title":"要弄清方法区的运行时常量池，需要理解字节码文件中的常量池","children":[],"parent":"ecaa5f0ab7ed"},{"id":"8fe1aa5bd4cfdfe0","title":"运行时常量池，相对于class文件常量池：具备动态性","parent":"ecaa5f0ab7ed","children":[]}],"collapsed":false},{"id":"b6ff787a76ea","title":"常量池","image":{"w":479,"url":"https://cdn.processon.com/5feae2c8e401fd549c985a32?e=1609232601&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:JLxoEsjoVbeZvo2L5SNC7rduv0A=","h":240},"parent":"a5f8f76fbef3","children":[{"id":"5c940de8ffe2","title":"字节码文件包含：类的版本信息、字段、方法以及接口等描述信息","children":[],"parent":"b6ff787a76ea"},{"id":"48c492a6ff3fda45","title":"还包含常量池表（Constant Pool Table），包括编译生成各个字面量和对类型、域和方法的符号引用","parent":"b6ff787a76ea","children":[]},{"id":"3f5d12012728","title":"为什么要用常量池？","children":[{"id":"0dfa0e35c611","title":"一个java源文件中的类、接口、编译后产生字节码文件。而Java中的字节码需要数据支持，通常这种数据会很大，以至于不能直接存到字节码里。","task":{"completion":100},"children":[],"parent":"3f5d12012728"},{"id":"f7d8e3ba8378a5bc","title":"可以存到常量池，这个字节码包含了指向常量池的引用。在动态链接会用到运行时常量池。","task":{"completion":100},"children":[],"parent":"3f5d12012728"},{"id":"cf18fdf2dd23feae","title":"编译产生字节码文件需要大量数据支持，不能存在字节码文件中，存到常量池里，字节码包含指向常量池的引用","parent":"3f5d12012728","children":[]}],"parent":"b6ff787a76ea"},{"id":"fcb85729d5c2","title":"常量池有什么？","children":[{"id":"faa5c23a0a97","title":"数量值","children":[],"parent":"fcb85729d5c2"},{"id":"dd9a48dff81d","title":"字符串值","children":[],"parent":"fcb85729d5c2"},{"id":"b6b854be3a56","title":"类引用","children":[],"parent":"fcb85729d5c2"},{"id":"af1cffb83473","title":"字段引用","children":[],"parent":"fcb85729d5c2"},{"id":"68b4493044b4","title":"方法引用","children":[],"parent":"fcb85729d5c2"}],"parent":"b6ff787a76ea"},{"id":"1ef777d1d702f71a","title":"常量池总结","parent":"b6ff787a76ea","children":[{"id":"b99a869c75545eb1","title":"常量池，可看做一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型","parent":"1ef777d1d702f71a","children":[]}]}],"collapsed":false},{"id":"f339f7f96ebd","title":"运行时常量池","parent":"a5f8f76fbef3","children":[{"id":"4c13fbb494a4","title":"运行时常量池（Runtime Constant Pool）是方法区一部分","children":[],"parent":"f339f7f96ebd"},{"id":"7dd7bc68ab97","title":"常量池表（Constant Pool Table）是class字节码文件一部分，（用于存放编译生成各个字面量和对类型、域和方法的符号引用），这部分内容将在类加载后存放到方法区的运行时常量池中。","parent":"f339f7f96ebd","children":[]},{"id":"4fd6cc200066","title":"创建：在加载类和接口到虚拟机后，就会创建对应的运行时常量池","parent":"f339f7f96ebd","children":[]},{"id":"fb26732c7d65","title":"当创建类或接口的运行时常量池，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值。则JVM会抛出OOM异常","children":[],"parent":"f339f7f96ebd"},{"id":"62b33ca9dfa0","title":"JVM为每个已加载的类和接口都维护一个运行常量池，池中的数据像数组项一样，通过索引访问","parent":"f339f7f96ebd","children":[]},{"id":"13f9e3ef2362","title":"运行时常量池包含多种不同的常量，（包括编译期就已经明确的数值字面量，也包括到运行期解析后，才能够获得的方法或者字段引用。）此时不再是常量池中的符号地址，这里转换为真实地址。","parent":"f339f7f96ebd","children":[]},{"id":"ae929acdb496","title":"运行时常量池，相对于class文件常量池：具备动态性","parent":"f339f7f96ebd","children":[{"id":"d76fe1b3f4fd","title":"例如：String.intern可以将字符串也放入运行时常量池","task":{"completion":100},"parent":"ae929acdb496","children":[]}]},{"id":"c0591f586346","title":"常量池数量为N，则索引为1到N-1?","parent":"f339f7f96ebd","children":[]}],"image":{"w":557.5,"h":298.5,"url":"https://cdn.processon.com/5feae5d8f346fb16fdca22e6?e=1609233385&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:xkl8vde6CRlLQvn8cRwZPvLc7ko="},"collapsed":false}],"parent":"e291dc18cf98","image":{"w":572,"h":328.5,"url":"https://cdn.processon.com/5feaca6d07912910e48947f4?e=1609226366&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:dSp6iVZtTFRqC6oIHLHohTA-Iro="},"collapsed":false}]},{"id":"0a04a0179820","title":"方法区使用举例","parent":"535260158856","children":[]},{"id":"bef78520ab29","title":"方法区的演进细节","parent":"535260158856","children":[{"id":"fbf9b0908957","title":"首先明确，只有HotSpot才有永久代","children":[],"parent":"bef78520ab29"},{"id":"92a6afcacfbc","title":"HotSpot中方法区的变化","children":[{"id":"35c0737a9a50","title":"jdk1.6及之前，有永久代，静态变量存放在永久代上。使用 JVM 虚拟机内存","children":[],"parent":"92a6afcacfbc","image":{"w":524.5,"h":252.5,"url":"https://cdn.processon.com/5fed43587d9c0863d3009a9f?e=1609388392&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:HuFXxFGN_Z64-dBM8VHBNMz4ex4="}},{"id":"16a25e0184e6","title":"jdk1.7，有永久代，但已经逐步去永久代，字符串常量池，静态变量移除，保存在堆中。使用 JVM 虚拟机内存","children":[],"parent":"92a6afcacfbc","image":{"w":526.5,"h":249,"url":"https://cdn.processon.com/5fed4395e0b34d19e4f4264e?e=1609388453&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:44qvanVnvGORxl-XCUxH3FLkNf4="}},{"id":"f85966ec8686bd6c","title":"阿里：Java8的内存分代改进（问题同：为什么被替代）<br>","style":{"font-weight":"bold"},"task":{},"children":[{"id":"ce53886508eaec92","title":"jdk7及之前：永久代和堆物理内存连续，与老年代一起进行垃圾回收","children":[],"parent":"f85966ec8686bd6c"},{"id":"32f28c4c175e3d0c","title":"方法区是JVM的规范，永久代，元空间是方法区的实现","task":{"completion":100},"parent":"f85966ec8686bd6c","children":[]}],"parent":"92a6afcacfbc","icons":[{"index":"31","text":"&#xe67e","color":"rgb(48, 191, 191)","name":"flag"}]},{"id":"23442641c879","title":"jdk8，取消永久代，使用元空间实现方法区（保存类型信息，字段，方法，常量）&nbsp; &nbsp; &nbsp;JVM内存--&gt;本地内存。","children":[],"parent":"92a6afcacfbc","image":{"w":672,"h":257.5,"url":"https://cdn.processon.com/5fed43ed6376896cfafb85d3?e=1609388541&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:L_tgDk8bXuHC-BnX7Td36dhjEP0="},"icons":[{"text":"&#xe67e","index":"30","color":"rgb(48, 191, 191)","name":"flag"}]}],"parent":"bef78520ab29"},{"id":"ba548806402a","title":"永久代为什么要被元空间替代？","style":{"font-weight":"bold"},"parent":"bef78520ab29","children":[{"id":"ea7396a3218c","title":"永久代设置空间大小很难确定","parent":"ba548806402a","children":[{"id":"2a8ad54092a0775c","title":"如果动态加载类过多，就容易产生OOM","parent":"ea7396a3218c","children":[]},{"id":"40731fbc59ef7902","title":"会经常触发Full GC","parent":"ea7396a3218c","children":[]},{"id":"35e0c420a733","title":"设置-XX:PermSize，初始化分配一块连续的内存块","parent":"ea7396a3218c","children":[{"id":"604bd526338c","title":"设置过大：内存浪费","children":[],"parent":"35e0c420a733"},{"id":"9a15a02c8ac9","title":"设置过小：OOM","children":[],"parent":"35e0c420a733"}]}]},{"id":"12b16477cc7ffdea","title":"存储在本地内存，仅受本地内存限制。","children":[{"id":"8ce08e7ea8e168b2","title":"-XX:MetaspaceSize","children":[{"id":"bf898c30e6c1","title":"设置一样大，一般设置256M<br>","parent":"8ce08e7ea8e168b2","children":[]}],"parent":"12b16477cc7ffdea"},{"id":"ba1ccdb08fe4","title":"-XX:MaxMetaspaceSize","parent":"12b16477cc7ffdea","children":[]},{"id":"7fdc112c30614c7a","title":"达到-XX:MetaspaceSize--&gt;触发FGC--&gt;进行类型卸载，同时GC会对该值进行调整<b>（可动态调整）</b>","children":[{"id":"c0b411b05a947bd2","title":"如果释放了大量的空间，就适当降低该值","children":[],"parent":"7fdc112c30614c7a"},{"id":"f373fb3f9b522bc0","title":"如果释放了很少的空间，那么在不超过MaxMetaspaceSize，适当提高该值。","children":[],"parent":"7fdc112c30614c7a"}],"parent":"12b16477cc7ffdea"}],"parent":"ba548806402a"},{"id":"3709253bcbdc","title":"对永久代进行调优很困难","parent":"ba548806402a","children":[{"id":"e5a5ad13224d58fb","title":"方法区的垃圾收集主要回收两部分内容：常量池中废弃的常量和不再用的类型，方法区的调优主要是为了减少Full GC次数","parent":"3709253bcbdc","children":[]},{"id":"8d59dfeb99d2d91b","title":"有些人认为方法区（如HotSpot虚拟机中的元空间或者永久代）是没有垃圾收集行为的，其实不然。《Java虚拟机规范》对方法区的约束是非常宽松的，提到过可以不要求虚拟机在方法区中实现垃圾收集。事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如JDK11时期的ZGC收集器就不支持类卸载）。","task":{"completion":100},"children":[],"parent":"3709253bcbdc"},{"id":"d758b8f694330ea4","title":"一般来说这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻。但是这部分区域的回收有时又确实是必要的。以前Sun公司的Bug列表中，曾出现过的若干个严重的Bug就是由于低版本的HotSpot虚拟机对此区域未完全回收而导致内存泄漏","task":{"completion":100},"parent":"3709253bcbdc","children":[]}]}],"icons":[{"index":"30","text":"&#xe67e","color":"rgb(48, 191, 191)","name":"flag"}]},{"id":"e7dc7115ca6fd672","title":"字符串常量池 StringTable 为什么要调整位置？","parent":"bef78520ab29","children":[{"id":"2213379cd9b29ca5","title":"JDK7中将StringTable从运行时常量池移到堆空间。Full GC执行永久代的垃圾回收，永久代回收效率低。Full GC触发条件：老年代空间不足、永久代空间不足","children":[],"parent":"e7dc7115ca6fd672"},{"id":"41a839e46f525931","title":"开发中会有大量字符串被创建，回收效率低，导致永久代内存不足。","children":[],"parent":"e7dc7115ca6fd672"},{"id":"d40b808752af73fa","title":"移动到堆，提高回收效率","parent":"e7dc7115ca6fd672","children":[]}]},{"id":"426d6718adb320e9","title":"静态变量存放在哪里？","parent":"bef78520ab29","children":[{"id":"d31826b8e13a1260","title":"JDK7及其以后版本的HotSpot虚拟机选择把静态变量与类型在Java语言一端的映射Class对象存放在一起，存储于Java堆之中","children":[],"parent":"426d6718adb320e9"}]}]},{"id":"7a96f2e00fe3","title":"方法区的垃圾回收：常量池中废弃的常量和不再使用的类型。","parent":"535260158856","children":[{"id":"b07b2b042736","title":"常量池中废弃的常量","children":[{"id":"917dcb0d25df","title":"HotSpot对常量池的回收策略很明确，只要常量池中的常量没有被任何地方引用，就可以被回收","parent":"b07b2b042736","children":[]},{"id":"a48244989617","title":"回收废弃常量与回收Java堆中对象非常类似","parent":"b07b2b042736","children":[]},{"id":"ce80b09df0b2","title":"方法区内常量池中主要存放两大类常量：","children":[{"id":"de153b20043d","title":"字面量（常量）:如文本字符串，被声明为final的常量值等","children":[],"parent":"ce80b09df0b2"},{"id":"fc7f48f431d5","title":"符号引用（编译原理）","children":[{"id":"9166ae3db2f7","title":"类和接口的全限定名","parent":"fc7f48f431d5","children":[]},{"id":"9b3f0b59c480","title":"字段的方法和描述符","parent":"fc7f48f431d5","children":[]},{"id":"9b48d32939f8","title":"方法的名称和描述符","parent":"fc7f48f431d5","children":[]}],"parent":"ce80b09df0b2"}],"parent":"b07b2b042736"}],"parent":"7a96f2e00fe3"},{"id":"7ff19f92b2f23f16","title":"方法区类的回收","parent":"7a96f2e00fe3","children":[{"id":"b9aebc55182c","title":"不再使用的类型，需要同时满足三个条件","children":[{"id":"4ff298023947","title":"该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例","children":[],"parent":"b9aebc55182c"},{"id":"5e90a3aefe72","title":"加载该类的类加载器已经被回收（难达成）","children":[],"parent":"b9aebc55182c"},{"id":"3e76eb3c1288","title":"该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。","children":[],"parent":"b9aebc55182c"}],"parent":"7ff19f92b2f23f16"},{"id":"4a189c573f2e","title":"满足以上三个条件后，并不是和对象一样立即被回收，仅仅是被允许。","children":[],"parent":"7ff19f92b2f23f16"},{"id":"80e7fb090900","title":"HotSpot虚拟机提供了-Xnoclassgc参数进行控制","children":[],"parent":"7ff19f92b2f23f16"},{"id":"a0a03f6d257b","title":"在大量使用反射，动态代理，CGLib等字节码框架，动态生成JSP以及OSGI这类频繁自定义类加载器的场景中，通常都需要Java虚拟机具备类型卸载的能力，以保证不会对方法区造成过大的内存压力","parent":"7ff19f92b2f23f16","children":[]}]}]}],"parent":"root","collapsed":true},{"id":"dedcf391f712","title":"HotSpot虚拟机对象探秘","lineStyle":{"randomLineColor":"rgb(51, 156, 168)"},"parent":"root","children":[{"id":"85892e4604e6","title":"对象的实例化","parent":"dedcf391f712","children":[{"id":"aa51c3a0d389","title":"创建对象的方式","parent":"85892e4604e6","children":[{"id":"e1a1dd06084b","title":"new","parent":"aa51c3a0d389","children":[{"id":"00ebcd1c300f","title":"最常见的方式","parent":"e1a1dd06084b","children":[]},{"id":"e8b8c60dae30","title":"变形：Xxx的静态方法","parent":"e1a1dd06084b","children":[]},{"id":"6a0193fea0f6","title":"XxxBuilder/XxxFactory的静态方法","parent":"e1a1dd06084b","children":[]}]},{"id":"ddea6c6637fb","title":"Class的newInstance","parent":"aa51c3a0d389","children":[{"id":"88ade9da9b86","title":"JDK9标记过时，反射的方式，只能调用空参的构造器，权限必须是public","parent":"ddea6c6637fb","children":[]}]},{"id":"73b9944311b9","title":"Constructor的newInstance","parent":"aa51c3a0d389","children":[{"id":"b71cdfae326a","title":"反射的方式，可以调用空参，带参的构造器，权限没有要求。","parent":"73b9944311b9","children":[]}]},{"id":"37df4c6333a8","title":"使用clone","parent":"aa51c3a0d389","children":[{"id":"30b3c09f174d","title":"不调用任何构造器，当前类需要实现Cloneable接口，实现clone方法","children":[],"parent":"37df4c6333a8"}]},{"id":"e69dc9e179e8","title":"使用反序列化","parent":"aa51c3a0d389","children":[{"id":"f3a1413596da","title":"从文件、网络等获取一个对象的二进制流","children":[],"parent":"e69dc9e179e8"}]},{"id":"1590096f9134","title":"第三方库Objenesis","parent":"aa51c3a0d389","children":[]}]},{"id":"76d4dd7f703e","title":"创建对象的步骤","parent":"85892e4604e6","children":[{"id":"21242febdb01","title":"1、判断对象对应的类是否被常量池加载","parent":"76d4dd7f703e","children":[{"id":"7f154d193e75","title":"当虚拟机遇到一条字节码new指令时。首先去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否被加载解析初始化过。如果没有，在双亲委派模式下，使用当前类加载器以ClassLoader+包名+类名为key值进行查找对应的.class文件，如果没有找到文件，则抛出ClassNotFoundException异常","parent":"21242febdb01","children":[]}]},{"id":"c96d8248f96a","title":"2、（类加载通过后）为对象分配内存","parent":"76d4dd7f703e","children":[{"id":"1c9dad3dd287","title":"首先计算对象占用空间大小，接着在堆中划分一块内存给新对象","children":[{"id":"038d46be4394","title":"如果实例成员变量是引用变量，仅分配引用变量空间，即4个字节大小","children":[],"parent":"1c9dad3dd287"},{"id":"a4e4897c337d","title":"如果Java堆内存中不规整，虚拟机就必须维护一个列表，记录哪些内存可用，哪些不可用。分配的时候在列表中找一个足够大的空间分配，然后更新列表。这种分配方式叫空闲列表(Free List)。--&gt;标记-清除算法","parent":"1c9dad3dd287","children":[]},{"id":"b86b61fbf511","title":"假设Java 堆中内存是规整的，所有被使用过的内存放在一边，空闲的内存放在另一边，中间放一个指针作为分界点指示器。那么内存分配就是指针指向空闲的方向，挪动一段与对象大小相等的距离。指针碰撞（Bump The Pointer）。--&gt;标记-清除-压缩算法","parent":"1c9dad3dd287","children":[]}],"parent":"c96d8248f96a"},{"id":"c0f912aa73c9","title":"选择哪种由Java堆是否规整决定，Java堆是否规整由所采用的的垃圾收集器是否带有空间压缩整理（Compact）的能力决定","parent":"c96d8248f96a","children":[{"id":"fd895c2ae324","title":"当使用Serial，ParNew等带有压缩整理过程的收集器，指针碰撞简单高效；","parent":"c0f912aa73c9","children":[]},{"id":"7b556aaa62d9","title":"当使用CMS基于清除（Sweep）算法收集器时，只能采用空闲列表来分配内存；（CMS为了能在多数情况下分配内存更快，设计了一个Linear Allocatioin Buffer的分配缓冲区，通过空闲列表拿到一大块分配缓冲区后，在它里面仍可使用指针碰撞方式分配）","parent":"c0f912aa73c9","children":[]}]}]},{"id":"617e047ee374","title":"3、处理并发安全问题","parent":"76d4dd7f703e","children":[{"id":"cc2400262dff","title":"对象创建是非常频繁的行为，还需要考虑并发情况下，仅仅修改一个指针所指向的位置也是不安全的，例如正在给对象A分配内存，指针还未修改，对象B又使用原来的指针分配内存。解决问题有两种可选方案：: CAS同步处理、本地线程分配缓冲(Thread Local Allocation Buffer, TLAB)<br>","parent":"617e047ee374","children":[{"id":"96549f1a421d","title":"a、对分配内存空间的动作进行同步处理。实际上虚拟机采取CAS配上失败重试的方式保证更新操作的原子性。","parent":"cc2400262dff","children":[]},{"id":"d43b27ad29c5","title":"b、把内存分配的动作按照线程划分到不同的空间中进行，每个线程在Java堆中，预先分配一小块内存，称为本地线程分配缓冲（Thread Local Allocation Buffer，TLAB），只有本地缓冲区用完了，分配新的缓存区时才需要同步锁定。","parent":"cc2400262dff","children":[]}]},{"id":"bbc48b406876","title":"虚拟机是否使用TLAB，可以通过-XX: +/-UseTLAB参数来设定。","parent":"617e047ee374","children":[]}]},{"id":"28fe205a126b","title":"4、初始化分配到的空间","parent":"76d4dd7f703e","children":[{"id":"2ef5b2b2cb25","title":"内存分配完成后，虚拟机将分配到的内存空间（不包括对象头）都初始化为零值。如果使用了TLAB，这个工作可以提前到TLAB分配时进行。<br><br>这步操作保证对象的实例字段在Java代码中，可以不赋初始值就直接使用，程序可以访问到字段对应数据类型所对应的零值。","parent":"28fe205a126b","children":[]}]},{"id":"ce46cc00bce7","title":"5、设置对象的对象头","parent":"76d4dd7f703e","children":[{"id":"963fd32ecd18","title":"接下来Java虚拟机还要对对象进行必要的设置，例如对象是哪个类的实例、如何才能找到类的元数据信息，对象的哈希码（实际上对象的HashCode会延后真正调用Object::hashCode()方法时才计算）、对象的GC分代年龄等信息。这些信息存放到对象的对象头（Object Header）<br>","parent":"ce46cc00bce7","children":[]}]},{"id":"5a79956b1ddb","title":"6、执行init方法进行初始化","children":[{"id":"2303327fe3a3","title":"上面工作完成后，从虚拟机角度来说，一个新的对象已经产生了，但是从Java程序的视角来说，对象创建才刚刚开始，对象的构造方法（Class文件中init()方法）还未执行，所有字段都是默认的零值。new指令之后接着执行init方法，按照程序员的意愿对对象进行初始化，这样一个真正可用的对象才算完全构造出来<br>","children":[],"parent":"5a79956b1ddb"}],"parent":"76d4dd7f703e"}]}]},{"id":"cd0fcc695376","title":"对象的内存布局","parent":"dedcf391f712","children":[{"id":"e8989624adbb","title":"对象头","parent":"cd0fcc695376","children":[{"id":"35a97bcdc0a2","title":"包含两部分","parent":"e8989624adbb","children":[{"id":"3f74899ec20b","title":"这部分数据的长度在32位和64位的虚拟机（未开启指针压缩中）分别是32bit和64bit，【Mark Word】运行时元数据","parent":"35a97bcdc0a2","children":[{"id":"5b7b3548883c","title":"哈希值","parent":"3f74899ec20b","children":[]},{"id":"80ee74e9d568","title":"GC分代年龄","parent":"3f74899ec20b","children":[]},{"id":"692284656b3c","title":"锁状态标志","parent":"3f74899ec20b","children":[]},{"id":"f52e9c4fdda3","title":"线程持有的锁","parent":"3f74899ec20b","children":[]},{"id":"49048db2e60e","title":"偏向线程ID","parent":"3f74899ec20b","children":[]},{"id":"154f4ae14c48","title":"偏向时间戳","parent":"3f74899ec20b","children":[]},{"id":"9577da8d21bf","title":"对象头里的信息是与对象自身定义的数据无关的额外存储成本，考虑到虚拟机的空间效率，根据对象状态的不同，Markword可以复用自己的空间。","children":[],"parent":"3f74899ec20b"}]},{"id":"2e5c5248b380","title":"类型指针（Klass Word）","parent":"35a97bcdc0a2","children":[{"id":"7bafe5b88398","title":"即对象指向它的类型元数据的指针，Java虚拟机通过这个指针来确认该对象属于哪个类的实例","parent":"2e5c5248b380","children":[]}]}]},{"id":"a1229c740fa0","title":"说明：如果是数组，还需要记录数组的长度","parent":"e8989624adbb","children":[]}]},{"id":"42093225ad2d","title":"实例数据","parent":"cd0fcc695376","children":[{"id":"a3d1af12f2f4","title":"对象的实例数据部分，是对象的真正存储的有效信息，即我们在程序代码中定义的各种类型的字段内容，无论是父类继承下来，还是子类中定义的字段都要记录下来。","parent":"42093225ad2d","children":[]},{"id":"549cd588529f","title":"1、这部分的存储顺序会受到虚拟机分配策略参数和字段在Java源码中定义顺序的影响。<br>2、分配策略参数-XX:FieldsAllocationStyle<br>3、HotSpot虚拟机默认的分配顺序为longs/doubles、ints、shorts/chars、bytes/booleans、oops（Ordinary Object Pointers）<br>4、从默认的分配策略中可以看出，相同宽度的字段总被分配到一起存放。<br>5、在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前。<br>6、如果HotSpot虚拟机的+XX：CompactFields参数值为true（默认也是true），那么子类中较窄的变量也允许插入父类变量的空隙之间，以节省空间。<br>","children":[],"parent":"42093225ad2d"}]},{"id":"4fda4b500a68","title":"对齐填充","parent":"cd0fcc695376","children":[{"id":"c5829574d4cf","title":"仅起占位符作用","parent":"4fda4b500a68","children":[{"id":"8294bd6344f0","title":"因为HotSpot虚拟机自动内存管理系统，要对对象的起始地址要求8字节的整数倍<br>","parent":"c5829574d4cf","children":[]},{"id":"aee408ead04a","title":"对象头已经精心设计为8字节的整数倍，1倍或者2倍","children":[],"parent":"c5829574d4cf"},{"id":"d252f07b0373","title":"对象实例数据部分若未对齐，需对齐填充","children":[],"parent":"c5829574d4cf"}]}]}]},{"id":"f2e00a75f401","title":"对象的访问定位","parent":"dedcf391f712","children":[{"id":"5ff8246ae853","title":"<b style=\"\"><font face=\"宋体\" color=\"#8a8a8a\">Java程序需要通过 JVM 栈上的引用访问堆中的具体对象。对象的访问方式</font></b><br>","style":{"box-shadow":"1px 0px 0px #ccc","bold":false,"color":"#735C45","backgroundColor":"#f0f0f0","family":"微软雅黑","lineStyle":{"lineColor":"#eb5e41","lineWidth":1},"font-size":"13px","border-bottom":"1px solid #eb5e41","lineStype":{"lineType":"roundBroken","lineColor":"#eb5e41","underLine":true,"lineWidth":1},"textAlign":"left","italic":false,"padding":"2px 9px 4px 9px"},"lineStyle":{"lineColor":"#eb5e41","lineWidth":1},"children":[{"id":"2d2ccfe056c6","title":"直接指针：指向对象，代表一个对象在内存中的起始地址。","children":[],"parent":"5ff8246ae853"},{"id":"996fb5cb062f","title":"句柄：可以理解为指向指针的指针，维护着对象的指针。句柄不直接指向对象，而是指向对象的指针（句柄不发生变化，指向固定内存地址），再由对象的指针指向对象的真实内存地址。","children":[],"parent":"5ff8246ae853"}],"parent":"f2e00a75f401"},{"id":"6b128fbcba56","title":"【使用句柄】","children":[{"id":"a7e5a5cbccd2","title":"句柄池：Java堆，reference中存储：对象的句柄地址，句柄包含对象实例数据、对象类型数据","children":[{"id":"4ce3183d4c65","title":"截图","children":[],"parent":"a7e5a5cbccd2","image":{"w":900,"url":"http://cdn.processon.com/5ee4401707912929cb3f6cce?e=1592020519&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:mrH8AHORqA-TWKiYWWkGf6oVT9Q=","h":416.48936170212767}}],"parent":"6b128fbcba56"}],"parent":"f2e00a75f401"},{"id":"03ff3a3d1b0b","title":"【直接指针】","children":[{"id":"2fbe96a12c4f","title":"reference中存储：对象地址，如果访问对象本身，不需要多一次的间接访问的开销。","children":[{"id":"b350095ad036","title":"截图","image":{"w":900,"h":417.85714285714283,"url":"http://cdn.processon.com/5ee440387d9c084420150533?e=1592020552&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:xJXsMO-Ew2OOPHFOZSUYhA5jD7s="},"parent":"2fbe96a12c4f","children":[]}],"parent":"03ff3a3d1b0b"}],"parent":"f2e00a75f401"},{"id":"e79aff488102","title":"两种方式各有优势：","children":[{"id":"9cfb04274245","title":"使用句柄最大好处：reference中存放稳定句柄地址，在对象被移动时（垃圾收集）只改变句柄中实例数据指针，reference本身不改变。","children":[],"parent":"e79aff488102"},{"id":"e142f4f5a4a1","title":"使用指针最大好处：速度快，节省了一次指针定位的时间开销，由于对象访问在Java中非常频繁，所以积少成多也是一项可观的执行成本。","children":[{"id":"616f58d235fa","title":"HotSpot所采用","children":[],"parent":"e142f4f5a4a1"}],"parent":"e79aff488102"}],"parent":"f2e00a75f401"}]}],"collapsed":true},{"id":"224629d667fd","title":"直接内存","lineStyle":{"randomLineColor":"rgb(0, 94, 170)"},"parent":"root","children":[{"id":"9f2a1a0d341c","title":"不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域","parent":"224629d667fd","children":[]},{"id":"4ef3ceecd4a1","title":"直接内存是在java堆外的，直接向系统申请的内存区间","parent":"224629d667fd","children":[]},{"id":"cbf75eb9ac93","title":"来源于NIO（non-blocking IO），通过存在堆中的DirectByteBuffer操作Native内存","children":[],"parent":"224629d667fd"},{"id":"ada25b056da3","title":"通常，访问直接内存的速度会优于Java堆，即读写性能高","children":[{"id":"bf3f02a1f28a","title":"因此出于性能考虑，读写频繁的场合可能会考虑使用直接内存","children":[],"parent":"ada25b056da3"},{"id":"f2c946c9b2ec","title":"Java的NIO库允许Java程序使用直接内存，用于数据缓冲区","children":[],"parent":"ada25b056da3"}],"parent":"224629d667fd"},{"id":"17af273164ba","title":"也可能导致OOM异常","children":[{"id":"378b4d32dc2a","title":"直接内存在堆外，所以大小不受限于-Xmx指定的最大堆大小","children":[],"parent":"17af273164ba"},{"id":"7c87e57a317c","title":"但是系统内存是有限的，Java堆和直接内存的总和依然受限于操作系统能给出的最大内存","children":[],"parent":"17af273164ba"}],"parent":"224629d667fd"},{"id":"124d6737358a","title":"缺点","children":[{"id":"9f4138666757","title":"分配回收成本较高","children":[],"parent":"124d6737358a"},{"id":"9f676bacf5ec","title":"不受JVM内存回收管理","children":[],"parent":"124d6737358a"}],"parent":"224629d667fd"},{"id":"ec1b25feb18c","title":"直接内存大小可以通过MaxDirectMemorySize设置","children":[],"parent":"224629d667fd"},{"id":"caa3f332f50e","title":"如果不指定，默认与堆的最大值-Xmx参数值一致","children":[],"parent":"224629d667fd"}],"collapsed":true},{"id":"0bb3e9e05b3c","title":"执行引擎","lineStyle":{"randomLineColor":"rgb(153,204,255)"},"parent":"root","children":[{"id":"d5629f360115","title":"执行引擎概述","parent":"0bb3e9e05b3c","children":[{"id":"2ca1c330e1f6","title":"执行引擎是Java虚拟机核心的组成部分之一","parent":"d5629f360115","children":[]},{"id":"7a034fa752e0","title":"虚拟机的执行引擎由软件自行实现，物理机的执行引擎是操作系统层面上","children":[],"parent":"d5629f360115"},{"id":"244ecbac9f08","title":"能够执行不被硬件直接支持的指令格式","children":[],"parent":"d5629f360115"},{"id":"dd8be702a300","title":"执行引擎的工作过程","children":[{"id":"7c8870ca4c7d","title":"1、执行引擎在执行的过程中究竟需要执行什么样的字节码指令完全依赖于PC寄存器。","children":[],"parent":"dd8be702a300"},{"id":"f60e4d8103f2","title":"2、每当执行完一项指令操作后，PC寄存器就会更新下一条需要被执行的指令地址","children":[],"parent":"dd8be702a300"},{"id":"f23d8a374938","title":"3、当然方法在执行的过程中，执行引擎有可能会通过存储在局部变量表中的对象引用准确定位到存储在Java堆区中的对象实例信息，以及通过对象头中的元数据指针定位到目标对象的类型信息","children":[],"parent":"dd8be702a300"}],"parent":"d5629f360115"}]},{"id":"39f03142bb7f","title":"Java代码编译和执行过程","parent":"0bb3e9e05b3c","children":[{"id":"dea179272c9d","title":"大部分的程序代码转换成物理机的目标代码或虚拟机能执行的指令集之前，都需要经过上图中的各个步骤","image":{"w":463,"h":239,"url":"http://cdn.processon.com/5ee5894c6376891e81c9b843?e=1592104796&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:dOaPhZkndmatMy_B168SCloGtXU="},"parent":"39f03142bb7f","children":[]},{"id":"2652f36364df","title":"为什么说Java是半编译半解释型语言","children":[{"id":"12b9b729d427","title":"JVM在执行Java代码的时候，通常会将解释执行与编译执行二者结合起来进行","children":[],"parent":"2652f36364df"}],"parent":"39f03142bb7f"}]},{"id":"43f1de8f222e","title":"机器码，指令，汇编语言","parent":"0bb3e9e05b3c","children":[{"id":"3c3eacc7af82","title":"机器码","children":[{"id":"a105e514b17b","title":"各种采用二进制编码方式表示的指令，叫做机器指令码。机器语言。机器指令与CPU紧密相关，不同种类的CPU所对应的机器指令也就不同","children":[],"parent":"3c3eacc7af82"}],"parent":"43f1de8f222e"},{"id":"98b66979ef4f","title":"指令","parent":"43f1de8f222e","children":[{"id":"17921d4a0c33","title":"由于机器码由01组成，可读性太差。于是人们发明了指令","parent":"98b66979ef4f","children":[]},{"id":"13e24a658636","title":"指令就是把机器码特定的0和1序列，简化成对应的指令，一般为英文编写如mov，inc等，可读性稍好","parent":"98b66979ef4f","children":[]},{"id":"b5d04b82633d","title":"由于不同的硬件平台，执行同一个操作，对应的机器码可能不同。所以不同的硬件平台的同一种指令，对应的机器码也可能不同","parent":"98b66979ef4f","children":[]}]},{"id":"4f5ade71d8f4","title":"指令集","parent":"43f1de8f222e","children":[{"id":"c1b83a21625d","title":"不同硬件平台，各自支持的指令，是有差别的。因此每个平台所支持的指令，称之为对应平台的指令集","parent":"4f5ade71d8f4","children":[]},{"id":"eab706a71fde","title":"x86指令集，对应的x86架构的平台","parent":"4f5ade71d8f4","children":[]},{"id":"e1a4b19020de","title":"ARM指令集，对应的是ARM架构的平台","parent":"4f5ade71d8f4","children":[]}]},{"id":"0d01d7b77a2f","title":"汇编","parent":"43f1de8f222e","children":[{"id":"9354b4e914a5","title":"由于指令的可读性太差，于是又有了汇编语言","parent":"0d01d7b77a2f","children":[]},{"id":"d61242562c16","title":"汇编语言用助记符代替机器指令的操作码，用地址符号或标号，代替指令或操作数的地址。","parent":"0d01d7b77a2f","children":[]},{"id":"d1d7ade27aa5","title":"汇编语言要翻译成机器指令码，计算机才能识别和执行","parent":"0d01d7b77a2f","children":[]}]}]},{"id":"c2377bf44e5c","title":"解释器","parent":"0bb3e9e05b3c","children":[{"id":"85aa028d13b4","title":"当Java虚拟机启动时，会根据预定义的规范对字节码采用逐行解释的方式执行，将每条字节码文件中的内容翻译为赌赢平台的本地机器指令执行","parent":"c2377bf44e5c","children":[]},{"id":"5b71a8203d21","title":"解析器真正意义上所承担的角色就是一个运行时翻译者，将字节码文件中的内容翻译为对应的平台的本地机器指令执行","parent":"c2377bf44e5c","children":[]},{"id":"abdafe516187","title":"当一条字节码指令被解释执行完成后，接着在根据PC寄存器中的记录下一条需要被执行的字节码执行解释执行","parent":"c2377bf44e5c","children":[]},{"id":"3d7111f27f84","title":"古老的字节码解释器","parent":"c2377bf44e5c","children":[]},{"id":"27a36d721166","title":"现在普遍使用的模板解释器","parent":"c2377bf44e5c","children":[{"id":"5936b0650524","title":"模板解释器将每一条字节码和一个模板函数相关联，模板函数直接产生这条字节码执行时的机器码，提高解释器的性能","parent":"27a36d721166","children":[]}]},{"id":"84bcc1add8fc","title":"HotSpot中","parent":"c2377bf44e5c","children":[{"id":"e4e1252f7dbc","title":"Interpreter模块","parent":"84bcc1add8fc","children":[{"id":"3a8ed408ab93","title":"实现了解释器的核心功能","parent":"e4e1252f7dbc","children":[]}]},{"id":"c5709be17557","title":"Code模块","parent":"84bcc1add8fc","children":[{"id":"1f7355242dc3","title":"用于管理HotSpot在运行时生成的本地机器指令","parent":"c5709be17557","children":[]}]}]}]},{"id":"27943fd82d33","title":"JIT编译器","parent":"0bb3e9e05b3c","children":[{"id":"5b5a063893e6","title":"就是虚拟机将源代码直接编译成和本地机器平台相关的机器语言","parent":"27943fd82d33","children":[]},{"id":"2553a5531c66","title":"JVM平台支持一种叫做即时编译的技术，目的是避免解释执行，而是将整个函数体编译成机器码，每次函数执行时，只执行编译后的机器码即可。使执行效率大幅提升","parent":"27943fd82d33","children":[]}]},{"id":"024bdf519013","title":"为什么两条腿走路？","parent":"0bb3e9e05b3c","children":[{"id":"7e6479661ca3","title":"首先程序启动后，解释器可以马上发挥作用，省去编译时间，立即执行","parent":"024bdf519013","children":[]},{"id":"0df2098250ca","title":"编译器要想发挥作用，把代码编译成本地代码，需要一定的执行时间。但编译为本地代码后执行效率更高","parent":"024bdf519013","children":[]},{"id":"b1a527ae8302","title":"对于服务端应用，启动时间并非关注重点，但是对于看重启动时间的应用场景，就需要找到一个平衡点。","parent":"024bdf519013","children":[]},{"id":"89ef426624d7","title":"当Java虚拟机启动时，解释器可以首先发挥作用，而不是等待即时编译器全部编译完成后再执行，这样可以省去很多不必要的编译时间，随着时间的推移，编译器发挥作用，把越来越多的代码编译成本地代码，获得更高的执行效率","parent":"024bdf519013","children":[]}]},{"id":"04272027c22b","title":"概念解释","parent":"0bb3e9e05b3c","children":[{"id":"10cd559e451c","title":"前端编译器","parent":"04272027c22b","children":[{"id":"b6052beaff52","title":"把.java文件转换为.class文件的过程","parent":"10cd559e451c","children":[{"id":"91af9134995d","title":"sun的Javac，","children":[],"parent":"b6052beaff52"}]}]},{"id":"3464c0c91fd3","title":"后端运行期编译器","parent":"04272027c22b","children":[{"id":"e9a6711afb89","title":"把字节码转为机器码的过程","parent":"3464c0c91fd3","children":[{"id":"a99892756ea2","title":"JIT编译器：hotSpot的C1,C2编译器","children":[],"parent":"e9a6711afb89"}]}]},{"id":"fd3d81781c06","title":"静态提前编译器","parent":"04272027c22b","children":[{"id":"930046a9f212","title":"Ahead of Time Compliler AOT，直接把.java文件编译器本地机器代码的过程","parent":"fd3d81781c06","children":[{"id":"8e57ba2b9752","title":"GNU Compiler for the Java（GCJ）","children":[],"parent":"930046a9f212"}]}]}]},{"id":"afccd290d1e7","title":"什么时候选择JIT","parent":"0bb3e9e05b3c","children":[{"id":"8682eed5c702","title":"热点代码及探测方式","parent":"afccd290d1e7","children":[{"id":"ef8973f1305c","title":"需要根据代码被调用执行的频率而定，需要被编译为本地代码的字节码，也称之为热点代码。","parent":"8682eed5c702","children":[]},{"id":"a1eadf0cb8f3","title":"JIT编译器会在运行时针对频繁调用的热点代码做出深度优化，将其直接编译为对应平台的本地机器指令。以此提升Java程序的执行性能","children":[],"parent":"8682eed5c702"},{"id":"bc39a6b4ceea","title":"一个被多次调用的方法，后者一个方法体内部循环次数较多的循环体，都可以被称之为热点代码","parent":"8682eed5c702","children":[]},{"id":"5d44be5825fa","title":"因此可以通过JIT编译器编译为本地机器指令，由于这种编译方法发生在方法的执行过程中，因此也被称之为栈上替换，OSR On Statck Replacement","parent":"8682eed5c702","children":[]},{"id":"2c7084e418b3","title":"一个方法调用都少次才能达到标准？这个依靠热点探测功能","children":[{"id":"c3a6114aa4d6","title":"hotspot采用的基于计数器的热点探测","children":[{"id":"033a13a58a0c","title":"方法调用计数器","children":[{"id":"3bc1ae4f2201","title":"统计方法调用次数","children":[{"id":"e2e4d975b3d8","title":"默认阈值，Client模式下是1500次，Server模式下是10000次","children":[],"parent":"3bc1ae4f2201"},{"id":"e9e7427a0b1d","title":"-XX:CompileThreshold","children":[],"parent":"3bc1ae4f2201"}],"parent":"033a13a58a0c"}],"parent":"c3a6114aa4d6"},{"id":"3e47b337cfa7","title":"回边计数器","children":[{"id":"65b13679dcf7","title":"统计循环体执行的循环次数","children":[{"id":"28a6ebd1c2f4","title":"截图","image":{"w":548,"url":"http://cdn.processon.com/5ee59836e0b34d4dba397012?e=1592108614&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:vIlyO5diCJ-ddKTPqBV7tHC7N9I=","h":519},"parent":"65b13679dcf7","children":[]}],"parent":"3e47b337cfa7"}],"parent":"c3a6114aa4d6"},{"id":"6292fa34d26a","title":"当一个方法被调用时，如果不存在已被编译过的版本，则将此方法的调用计数器+1，然后判断方法调用计数器与回边计数器之和，是否超过方法调用计数器的阈值。如果已经超过，会向即时编译器提交一个该方法的代码编译请求。","parent":"c3a6114aa4d6","children":[{"id":"3efb0280b371","title":"截图","image":{"w":591,"url":"http://cdn.processon.com/5ee5975707912929cb40d27c?e=1592108391&amp;token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:9EDCj6vMLfv9oQ7F04ltrU54GTE=","h":477},"parent":"6292fa34d26a","children":[]}]},{"id":"5b152b34737c","title":"热度衰减","parent":"c3a6114aa4d6","children":[{"id":"ed801e96b2de","title":"当超过一定的时间限度，如果方法调用次数仍然不足以提交即时编译器编译，那么这个方法的调用计数器就会被减少一半。","parent":"5b152b34737c","children":[]},{"id":"8166e5c376be","title":"-XX:UseCounterHalfLifeTime参数设置半衰周期的时间，单位是秒","parent":"5b152b34737c","children":[]}]}],"parent":"2c7084e418b3"}],"parent":"8682eed5c702"}],"collapsed":false}]},{"id":"df492d99e1c3","title":"hotspot可以设置程序执行的方式","parent":"0bb3e9e05b3c","children":[{"id":"c52d3bcaebf1","title":"-Xint：完全采用解释器模式执行","parent":"df492d99e1c3","children":[]},{"id":"1639d3acf7df","title":"-Xcomp完全采用即时编译器模式执行，如果即时编译器出现问题，解释器会介入执行","parent":"df492d99e1c3","children":[]},{"id":"f99ca147544b","title":"-Xmixed采用解释器+即时编译器的混合模式共同执行","parent":"df492d99e1c3","children":[]}]},{"id":"21dd8ddea235","title":"hotspot中JIT分类","parent":"0bb3e9e05b3c","children":[{"id":"9c3f47f4dd0b","title":"内嵌两个JIT编译器","parent":"21dd8ddea235","children":[{"id":"9d004d9358d4","title":"client&nbsp;","parent":"9c3f47f4dd0b","children":[]},{"id":"c4c0d191911a","title":"server","parent":"9c3f47f4dd0b","children":[]},{"id":"f30c44657bf9","title":"大多情况下简称C1,C2","parent":"9c3f47f4dd0b","children":[]},{"id":"6bebbc8bc9a1","title":"-client：指定Java虚拟机在Client模式下，并使用C1编译器","parent":"9c3f47f4dd0b","children":[{"id":"d839fcbe1796","title":"C1编译器会对字节码进行简单和可靠的优化，耗时短，以达到更快的编译速度","parent":"6bebbc8bc9a1","children":[{"id":"da712ccba633","title":"方法内联","children":[{"id":"5759603b9026","title":"将引用的函数代码编译到引用点处，减少栈帧的生成，减少参数传递以及跳转过程","children":[],"parent":"da712ccba633"}],"parent":"d839fcbe1796"},{"id":"cc6a82a70c91","title":"去虚拟化","children":[{"id":"98269cb6ecf9","title":"对唯一的实现类进行内联","children":[],"parent":"cc6a82a70c91"}],"parent":"d839fcbe1796"},{"id":"01297c147e44","title":"冗余消除","children":[{"id":"b0c415bdcc5d","title":"在运行期把一些不会执行的代码折叠掉","children":[],"parent":"01297c147e44"}],"parent":"d839fcbe1796"}]}]},{"id":"cefe6177b9fc","title":"-server：指定虚拟机在server模式下，并使用C2编译器","children":[{"id":"f7a00d100092","title":"C2进行耗时较长的优化，以及激进优化，单优化后的代码执行效率更高","children":[{"id":"517580d2d3fd","title":"逃逸分析是优化的基础，基于逃逸分析在C2上有几种优化","parent":"f7a00d100092","children":[{"id":"886eec6023d5","title":"标量替换","parent":"517580d2d3fd","children":[{"id":"9bff27e76b05","title":"用标量值代替聚合对象的属性值","parent":"886eec6023d5","children":[]}]},{"id":"38c9ca418d25","title":"栈上分配","parent":"517580d2d3fd","children":[{"id":"15e9f9094a23","title":"对于未逃逸的对象分配在栈而不是堆","parent":"38c9ca418d25","children":[]}]},{"id":"9a69c35b431d","title":"同步消除","parent":"517580d2d3fd","children":[{"id":"57c7f6537eb9","title":"清除同步操作，通常指synchronized","parent":"9a69c35b431d","children":[]}]}]}],"parent":"cefe6177b9fc"}],"parent":"9c3f47f4dd0b"}]}]},{"id":"b460ad0b378c","title":"最后","parent":"0bb3e9e05b3c","children":[{"id":"617000b7ecae","title":"jdk10起，hotspot又引入了个全新的即时编译器Graal编译器","parent":"b460ad0b378c","children":[]},{"id":"a2019bdee002","title":"JDK9引入了AOT编译器","children":[],"parent":"b460ad0b378c"}]}],"collapsed":true},{"id":"21c9837d97fb","title":"StringTable","lineStyle":{"randomLineColor":"rgb(255,204,204)"},"parent":"root","children":[{"id":"22c9318311c5","title":"StringTable为什么要调整","parent":"21c9837d97fb","children":[{"id":"7bfa0ae01841","title":"因为字符串放在永久代中回收效率很低。老年代或永久代空间不足才会触发fullGC。","parent":"22c9318311c5","children":[]},{"id":"e7ed7e9d602c","title":"开发中会创建大量字符串，回收效率低，导致永久代内存不足。JDK7放到堆中，能及时进行回收。","parent":"22c9318311c5","children":[]}]},{"id":"6360a9b3b78e","title":"String的基本特性","parent":"21c9837d97fb","children":[{"id":"84360df8cc80","title":"字符串，用\"\"引起来表示","children":[{"id":"58745040d2d05539","title":"String s1 = \"mogublog\" ;   \t\t\t// 字面量的定义方式，声明在字符串常量池","children":[],"parent":"84360df8cc80"},{"id":"5f1992a58049e57a","title":"String s2 =  new String(\"moxi\");     // new 对象的方式","children":[],"parent":"84360df8cc80"}],"parent":"6360a9b3b78e"},{"id":"4630de91ca0d","title":"声明为final的不可被继承的","children":[],"parent":"6360a9b3b78e"},{"id":"d3bff4b2a9fe","title":"实现了Serializable接口，表示支持序列化","children":[],"parent":"6360a9b3b78e"},{"id":"d5bd3ec1d3b3","title":"实现了Comparable接口，表示可以比较大小","children":[],"parent":"6360a9b3b78e"},{"id":"f1ee8a7e74b9","title":"jdk8及以前，内部定义了final char[] value用于存储字符串数据","children":[],"parent":"6360a9b3b78e"},{"id":"f75a588c47da","title":"jdk9类型更改：private final char value[];--&gt;private final byte[] value;","children":[{"id":"1fd7d36d9b6c","title":"char数组每个字符占两个字节16位，String是堆空间的主要部分，大部分是拉丁字符，占一个字节，节省空间","children":[],"parent":"f75a588c47da"},{"id":"c8f1bc72e51b","title":"String再也不用char[] 来存储，改成了byte [] 加上编码标记","parent":"f75a588c47da","children":[]},{"id":"5b41d7ca4e43","title":"StringBuffer，StringBuilder同样做了修改","parent":"f75a588c47da","children":[]}],"parent":"6360a9b3b78e"},{"id":"4cb3a35f0850","title":"String代表不可变的字符序列（不可变性）","parent":"6360a9b3b78e","children":[{"id":"b88acdb6af71","title":"当字符串重新赋值，需要重写指定内存区域赋值，不能使用原有的value进行赋值","parent":"4cb3a35f0850","children":[]},{"id":"cc2ef1ec806a","title":"当调用String的replace方法修改指定字符或字符串时，也需要重新指定内存区域赋值，不能使用原有的value进行赋值。","children":[],"parent":"4cb3a35f0850"},{"id":"2bd65fb5fb5c","title":"当对现有的字符串进行连接操作时，也需要重新指定内存区域赋值，不能对使用原有的value进行赋值","children":[],"parent":"4cb3a35f0850"}]},{"id":"9158fb01faca","title":"字符串常量池中不会存储相同的字符串","parent":"6360a9b3b78e","children":[{"id":"176b76d3f4fc","title":"String的String Pool是一个固定大小的Hashtable，默认值大小长度是1009。如果放进String Pool的String非常多，就会造成Hash冲突严重，从而导致链表会很长，而链表长了后直接会造成的影响就是当调用String.intern()方法时性能会大幅下降。","parent":"9158fb01faca","children":[]},{"id":"5dedb0281d5d","title":"使用-XX:StringTablesize可设置StringTable的长度","parent":"9158fb01faca","children":[]},{"id":"f587cb92da16","title":"在JDK6中StringTable是固定的，就是1009的长度，所以如果常量池中的字符串过多就会导致效率下降很快，StringTablesize设置没有要求","parent":"9158fb01faca","children":[]},{"id":"d452acfe2b986a6a","title":"在JDK7中，StringTable的长度默认值是60013，StringTablesize设置没有要求","parent":"9158fb01faca","children":[]},{"id":"b6cb69b20ec856cf","title":"在JDK8中，StringTable的长度默认值是60013，StringTable可以设置的最小值为1009","parent":"9158fb01faca","children":[]}]}]},{"id":"2dde57ed45c8","title":"String的内存分配","parent":"21c9837d97fb","children":[{"id":"9ed8b13a65e6","title":"Java语言中有8种基本数据类型和一种比较特殊的类型String，这些类型为了使他们再运行过程中速度更快，更节省内存，都提供了一种常量池的概念","children":[{"id":"e27956165c12","title":"String的常量池比较特殊，主要使用方法有两种","children":[{"id":"938951a03ce1","title":"直接使用双引号，声明出来的String对象会直接存储在常量池中","parent":"e27956165c12","children":[]},{"id":"c3e6f2bf69c3","title":"如果不是双引号声明的String对象，可以使用String提供的intern()方法","parent":"e27956165c12","children":[]}],"parent":"9ed8b13a65e6"}],"parent":"2dde57ed45c8"},{"id":"6630d0864f11","title":"jdk6及之前，字符串常量池存在永久代，与应用程序创建的其他对象一起分配。","parent":"2dde57ed45c8","children":[]},{"id":"17fcb5a07229","title":"jdk7中，字符串常量池调整到Java堆中","parent":"2dde57ed45c8","children":[{"id":"2d417295dcbd","title":"调优时仅需调整堆大小就可以","parent":"17fcb5a07229","children":[]}]},{"id":"50680961771e","title":"Jdk8中，元空间，字符串常量在堆","parent":"2dde57ed45c8","children":[]},{"id":"8a0aa15e2448","title":"为什么要调整？","parent":"2dde57ed45c8","children":[{"id":"23b037011e9d","title":"永久代默认情况下比较小，大量字符串容易导致OOM。","parent":"8a0aa15e2448","children":[]},{"id":"ee984651c415","title":"永久代垃圾回收频率低","parent":"8a0aa15e2448","children":[]},{"id":"0c8e58132f626df5","title":"堆中空间足够大，字符串可被及时回收","children":[],"parent":"8a0aa15e2448"}]}]},{"id":"b2cf9b36a46d","title":"String的基本操作","children":[{"id":"7c0b127d3f12","title":"Java语言规范要求完全相同的字符串字面量，应该包含同样的Unicode字符序列，包含同一份码点序列的常量，并且必须指向同一个String类实例","parent":"b2cf9b36a46d","children":[]}],"parent":"21c9837d97fb"},{"id":"1b5af0446522","title":"字符串拼接操作","children":[{"id":"6451cb94c4ec","title":"常量与常量的拼接结果在常量池，原理是编译期优化","parent":"1b5af0446522","children":[],"image":{"w":421.5,"h":200,"url":"https://cdn.processon.com/5ff29b94e0b34d19e4fa8f50?e=1609738660&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:lX-qjjUpCcOEwj0m47dCB8bq6UA="}},{"id":"240cae8001a0","title":"常量池中不存在相同内容的常量（hashtable）","children":[],"parent":"1b5af0446522"},{"id":"ecfe86bda1cb","title":"只要有一个变量，拼接结果就在堆中（常量池以外的堆），变量的拼接原理是StringBuilder","image":{"w":586,"h":401,"url":"https://cdn.processon.com/5ff29c127d9c0863d3070a80?e=1609738786&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:aXi2lBQzWmEb28CZFeNtOCzN8po="},"children":[{"id":"84433ad12873","title":"+ ：字符串拼接底层","children":[],"parent":"ecfe86bda1cb","image":{"w":584,"h":373,"url":"https://cdn.processon.com/5ff29e0fe401fd661a0f4b26?e=1609739296&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:NkKZHN4-9cFZudAx_1f5fE_0rEE="}}],"parent":"1b5af0446522"},{"id":"b0d884c75de6","title":"Final修饰符","children":[],"parent":"1b5af0446522","image":{"w":613,"url":"https://cdn.processon.com/5ff29ebe07912977bee051e2?e=1609739470&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:LGaHaG4ndCOu06Q75-CHJsdVv6Y=","h":224}},{"id":"12baa8a6f849","title":"对比用+号拼接字符串和StringBuilder.append操作","children":[{"id":"0b0355fda1ce","title":"拼接10万次，+号4000，append用了7毫秒，原因是+号每次循环创建一个StringBuilder，还要通过toString创建一个String对象","children":[],"parent":"12baa8a6f849"},{"id":"0333ebbf8b0e","title":"内存中由于创建了较多的对象，内存占用更大，如果需要GC需要花费额外的时间","children":[],"parent":"12baa8a6f849"},{"id":"59df7a0da57c","title":"改进空间：StringBuilder默认是16长度的char型数组，不够的时候会扩容，可以一次建一个比较大长度的数组。","children":[],"parent":"12baa8a6f849"}],"parent":"1b5af0446522"},{"id":"4314310c8bbae787","title":"体会执行效率：通过StringBuilder的append()的方式添加字符串的效率要远高于使用String的字符串拼接方式（+）","children":[{"id":"614505fc9d60f4b5","title":"原因 ① StringBuilder的append()的方式： 自始至终中只创建过一个StringBuilder的对象；使用String的字符串拼接方式：创建过多个StringBuilder和String的对象 ","children":[],"parent":"4314310c8bbae787"},{"id":"b4d68993b7128b09","title":"原因② 使用String的字符串拼接方式（+）： 内存中由于创建了较多的StringBuilder和String对象，内存占用更大； 如果进行GC，需要花费额外的时间。","parent":"4314310c8bbae787","children":[]},{"id":"4647ccff343d69ea","title":"改进的空间： 在实际开发中，如果基本确定要前前后后添加的字符串长度不高于某个限定值highLevel的情况下，建议使用构造器实例化","parent":"4314310c8bbae787","children":[{"id":"c2a176e9e49b1f44","title":"StringBuilder s = new StringBuilder(highLevel);//new char[highLevel]","children":[],"parent":"4647ccff343d69ea"}]}],"parent":"1b5af0446522"}],"parent":"21c9837d97fb"},{"id":"1390cb949ca335c5","title":"如何保证变量s指向的是字符串常量池中的数据呢？（两种方式）","children":[{"id":"179d2d91a84a81df","title":"String s = \"shkstart\";//字面量定义的方式","children":[],"parent":"1390cb949ca335c5"},{"id":"917abfd333073f38","title":"调用intern()","children":[{"id":"8324937046c3d672","title":"String s = new String(\"shkstart\").intern();","parent":"917abfd333073f38","children":[]},{"id":"8cfc93309e3652f0","title":"String s = new StringBuilder(\"shkstart\").toString().intern();","parent":"917abfd333073f38","children":[]}],"parent":"1390cb949ca335c5"}],"parent":"21c9837d97fb"},{"id":"7ff4a171ec4c","title":"intern()方法（见上test2）","children":[{"id":"49b1f5d1b416","title":"确保字符串在内存里只有一份拷贝，这样可以节约内存空间，加快字符串操作任务的执行速度，注意，这个值会被存放在字符串内部池。（String intern pool）","parent":"7ff4a171ec4c","children":[]},{"id":"38f09daa26e4","title":"new String(\"ab\")会创建几个对象？","children":[{"id":"551502907e81","title":"一个对象是：new关键字在堆空间创建的","children":[{"id":"14b80ab9a27d4797","title":"0 new <span class=\"tag\">#2</span>&nbsp;&lt;java/lang/String&gt;：在堆中创建了一个 String 对象","children":[],"parent":"551502907e81"}],"parent":"38f09daa26e4"},{"id":"d3ea6a123813965c","title":"另一个对象是：字符串常量池中的对象\"ab\"。 字节码指令：ldc","children":[{"id":"7274aff464c32269","title":"4 ldc <span class=\"tag\">#3</span>&nbsp;&lt;ab&gt; ：在字符串常量池中放入 “ab”（若之前字符串常量池中没有&nbsp; “ab” ）","children":[],"parent":"d3ea6a123813965c"}],"parent":"38f09daa26e4"}],"parent":"7ff4a171ec4c"},{"id":"649272299b58","title":"new String(“a”) + new String(“b”) 会创建几个对象？","parent":"7ff4a171ec4c","children":[{"id":"452f9fbf5a38","title":"对象1，new StringBuilder()&nbsp; &nbsp;（有拼接操作）","children":[{"id":"ec1c16e7b6e8d292","title":"0 new <span class=\"tag\">#2</span>&nbsp;&lt;java/lang/StringBuilder&gt; ：拼接字符串会创建一个 StringBuilder 对象","parent":"452f9fbf5a38","children":[]}],"parent":"649272299b58"},{"id":"a92d3af75d3d","title":"对象2，new String(\"a\")","children":[{"id":"c27156b314289f59","title":"7 new <span class=\"tag\">#4</span>&nbsp;&lt;java/lang/String&gt; ：创建 String 对象，对应于 new String(“a”)","children":[],"parent":"a92d3af75d3d"}],"parent":"649272299b58"},{"id":"aefcd9cdc6a0","title":"对象3，常量池中的\"a\"","children":[{"id":"a915484d8a6b0be8","title":"11 ldc <span class=\"tag\">#5</span>&nbsp;&lt;a&gt; ：在字符串常量池中放入 “a”（如果之前字符串常量池中没有 “a” ）","parent":"aefcd9cdc6a0","children":[]}],"parent":"649272299b58"},{"id":"5e4b6e5e30db","title":"对象4，new String(\"b\")","children":[{"id":"1817e73dd735eca0","title":"19 new <span class=\"tag\">#4</span>&nbsp;&lt;java/lang/String&gt; ：创建 String 对象，对应于 new String(“b”)","parent":"5e4b6e5e30db","children":[]}],"parent":"649272299b58"},{"id":"4f5c3cfe17e5","title":"对象5，常量池中的\"b\"","children":[{"id":"162ed91c3fa52929","title":"23 ldc <span class=\"tag\">#8</span>&nbsp;&lt;b&gt; ：在字符串常量池中放入 “b”（如果之前字符串常量池中没有 “b”）","children":[],"parent":"4f5c3cfe17e5"}],"parent":"649272299b58"},{"id":"e51e36ae699c","title":"对象6，StringBuilder的toString()&nbsp; &nbsp;new String(\"ab\")","children":[{"id":"3a1f229f0780","title":"toString()的调用，在字符串常量池中，没有生成\"ab\"","children":[],"parent":"e51e36ae699c"},{"id":"02180336081ab2e9","title":"31 invokevirtual <span class=\"tag\">#9</span>&nbsp;&lt;java/lang/StringBuilder.toString&gt; ：调用 StringBuilder 的 toString() 方法，会生成一个 String 对象","parent":"e51e36ae699c","children":[]}],"parent":"649272299b58"}]},{"id":"077f94e058bb","title":"面试题","children":[{"id":"dbdb9d331d01","title":"截图（一定要在main方法中测试，@test方式，第二个为false）","children":[{"id":"c10beb30bb8edf69","title":"JDK6","children":[{"id":"6c455307691cbdaf","title":"new String() 即在堆中","children":[],"parent":"c10beb30bb8edf69"},{"id":"23c6b6ff09dfc8bb","title":"str.intern() 则把字符串放入常量池中","parent":"c10beb30bb8edf69","children":[]}],"parent":"dbdb9d331d01","image":{"w":572.5,"h":337.5,"url":"https://cdn.processon.com/5ff2b0d27d9c0863d30744e5?e=1609744098&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:MJ3igy6jJXnpB8lOGAoE0qL5F6w="}},{"id":"6a91cb4eced88eab","title":"JDK7/8&nbsp;","image":{"w":579.5,"url":"https://cdn.processon.com/5ff2b1275653bb21c1b81fce?e=1609744183&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:V29Hu9E24QqT4m4f7_cxroVg5gc=","h":255.5},"parent":"dbdb9d331d01","children":[{"id":"3f2b2dbad8127506","title":"new String() 即在堆中","children":[],"parent":"6a91cb4eced88eab"},{"id":"666048d06c8adb00","title":"str.intern() 则把字符串放入常量池中，出于节省空间的目的，如果 str 不存在于字符串常量池中，则将 str 在堆中的引用存储在字符串常量池中，没错，字符串常量池中存的是 str 在堆中的引用，所以 s3 == s4 为 true","parent":"6a91cb4eced88eab","children":[]}]}],"parent":"077f94e058bb","image":{"w":583,"url":"https://cdn.processon.com/5ff2ad3b7d9c0863d307327e?e=1609743180&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:OzAM9CX_sXxi0ZFQ6OKRMzDMX_A=","h":341}}],"parent":"7ff4a171ec4c","collapsed":false},{"id":"32505fdebcf3","title":"截图","children":[],"parent":"7ff4a171ec4c","image":{"w":610,"h":315,"url":"https://cdn.processon.com/5ff2b2b0f346fb432bd53930?e=1609744577&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:-mdzZHr4t5uLUH77XLZgut_Jqco="}},{"id":"9755524154dd","title":"总结（对应下面的案例）","children":[{"id":"5bc3eaef6de8","title":"jdk1.6中，s.intern()&nbsp; &nbsp;将这个字符串对象放入串池","children":[{"id":"53ae990a7a68","title":"如果串池中有，则并不会放入，返回已有串池中的对象的地址，","parent":"5bc3eaef6de8","children":[]},{"id":"8b806859126c","title":"如果没有，会把对象复制一份，放入串池，并返回串池中的对象地址","parent":"5bc3eaef6de8","children":[]}],"parent":"9755524154dd"},{"id":"a1549fe81325","title":"jdk1.7起，s.intern()&nbsp; &nbsp;将这个字符串对象尝试放入串池","parent":"9755524154dd","children":[{"id":"6fcbd718bd9b","title":"如果串池中有，则并不会放入，返回已有的串池中的对象的地址","children":[],"parent":"a1549fe81325"},{"id":"969d7e24179e","title":"如果没有，则会把对象的引用地址复制一份，放入串池，并返回串池中的引用地址","children":[],"parent":"a1549fe81325"}]},{"id":"e3740a46a617","title":"案例1","children":[],"parent":"9755524154dd","image":{"w":613.5,"url":"https://cdn.processon.com/5ff2e24c5653bb21c1b9524f?e=1609756764&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:fnT1SlqdPmNsPABMpuytLED3O_s=","h":320.5}}],"parent":"7ff4a171ec4c","icons":[{"text":"&#xe6c6","index":"9","color":"rgb(51, 51, 51)","name":"face"}]},{"id":"d9533563fc5adfb6","title":"案例2","parent":"7ff4a171ec4c","children":[],"image":{"w":601,"h":318,"url":"https://cdn.processon.com/5ff2e26be401fd661a10a3a1?e=1609756795&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:yxhGK3O1WU6hOJ7nQmuh5S5HT5I="}},{"id":"db7a1ac3820524bb","title":"案例3","parent":"7ff4a171ec4c","children":[],"image":{"w":630,"h":343.5,"url":"https://cdn.processon.com/5ff2ea815653bb21c1b973f3?e=1609758865&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:zb11CHvw-Us-o-uQCpEIk7GydwU="}},{"id":"7dec7f063f40","title":"intern（）的效率测试","image":{"w":613,"url":"https://cdn.processon.com/5ff31d4f1e08531de8182ee3?e=1609771872&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:2Z9km9Lgnt-PhxGjN7nZN4mzE_0=","h":435},"parent":"7ff4a171ec4c","children":[{"id":"66cf93182d28247a","title":"直接 new String ：由于每个 String 对象都是 new 出来的，所以程序需要维护大量存放在堆空间中的 String 实例，程序内存占用也会变高","parent":"7dec7f063f40","children":[]},{"id":"f824ca9d20ae9b93","title":"使用 intern() 方法：由于数组中字符串的引用都指向字符串常量池中的字符串，所以程序需要维护的 String 对象更少，内存占用也更低","parent":"7dec7f063f40","children":[]},{"id":"6290fedd04cc7cb0","title":"对于程序中大量使用存在的字符串时，尤其存在很多已经重复的字符串时，使用intern()方法能够节省内存空间。","parent":"7dec7f063f40","children":[]},{"id":"ed6691402696","title":"大的网站平台，需要内存中存储大量的字符串。比如社交网站，很多人都存储：北京市、海淀区等信息。这时候如果字符串都调用intern() 方法，就会很明显降低内存的大小。","parent":"7dec7f063f40","children":[]}]}],"parent":"21c9837d97fb"},{"id":"a216a332a215","title":"StringTable的垃圾回收","children":[{"id":"f9611c6e3dcf","title":"-XX:+PrintStringTableStatistics","parent":"a216a332a215","children":[]}],"parent":"21c9837d97fb"},{"id":"9cab9cc97def","title":"G1中String去重操作","children":[{"id":"e59fcf06a586","title":"背景：对许多Java应用，做的测试结果如下","parent":"9cab9cc97def","children":[{"id":"2bae77c504a1","title":"堆存活数据集合里面String对象占了25%","parent":"e59fcf06a586","children":[]},{"id":"e799844f2c15","title":"堆存活数据集合里面重复的String对象有13.5%","parent":"e59fcf06a586","children":[]},{"id":"d0f927231085","title":"String对象的平均长度是45","parent":"e59fcf06a586","children":[]}]},{"id":"0b1f91fd1a8d","title":"许多大规模的Java应用的瓶颈在于内存，一半String对象是重复的，str1.equals(str2)= true","parent":"9cab9cc97def","children":[]},{"id":"bc4108c96a40d2ed","title":"G1垃圾收集器中实现自动持续对重复的String对象进行去重，这样能避免内存浪费。","children":[],"parent":"9cab9cc97def"}],"parent":"21c9837d97fb"},{"id":"930453c953534c24","title":"String 去重的的具体实现","children":[{"id":"bacd13969449e565","title":"当垃圾收集器工作的时候，会访问堆上存活的对象。对每一个访问的对象都会检查是否是候选的要去重的String对象。","parent":"930453c953534c24","children":[]},{"id":"93414fbe91d92261","title":"如果是，把这个对象的一个引用插入到队列中等待后续的处理。一个去重的线程在后台运行，处理这个队列。处理队列的一个元素意味着从队列删除这个元素，然后尝试去重它引用的String对象。","parent":"930453c953534c24","children":[]},{"id":"832c0e3a71ef132a","title":"使用一个Hashtable来记录所有的被String对象使用的不重复的char数组。当去重的时候，会查这个Hashtable，来看堆上是否已经存在一个一模一样的char数组。","parent":"930453c953534c24","children":[]},{"id":"3076b5000831413d","title":"如果存在，String对象会被调整引用那个数组，释放对原来的数组的引用，最终会被垃圾收集器回收掉。","parent":"930453c953534c24","children":[]},{"id":"3607cb294da792fe","title":"如果查找失败，char数组会被插入到Hashtable，这样以后的时候就可以共享这个数组。","parent":"930453c953534c24","children":[]}],"parent":"21c9837d97fb"}],"collapsed":true},{"id":"a4364411911e","title":"垃圾回收概述","lineStyle":{"randomLineColor":"#80BC42"},"parent":"root","children":[{"id":"b69c93991aa4779e","title":"JVM学习路线","image":{"w":287,"url":"https://cdn.processon.com/5ff3b11207912930e018edce?e=1609809698&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:vwDfJQaJRYBjHthUyAeWQ7iphP8=","h":332},"children":[],"parent":"a4364411911e"},{"id":"60b8321a4dd5fd2b","title":"关于垃圾收集","children":[{"id":"7cbd114210764b43","title":"Java 和 C++语言的区别，垃圾收集技术、内存动态分配","children":[],"parent":"60b8321a4dd5fd2b","note":"<span style=\"color: rgb(51, 51, 51); font-size: 15px; white-space: normal;\">C语言没有垃圾收集技术，需要我们手动收集。<br></span><br>"},{"id":"b9dfeab6afaf39ec","title":"三个经典问题","children":[{"id":"4dcc73c1f33e18ff","title":"哪些内存需要回收？","children":[],"parent":"b9dfeab6afaf39ec"},{"id":"bf964884f2ab327f","title":"什么时候回收？","parent":"b9dfeab6afaf39ec","children":[]},{"id":"6d96f0178ff90603","title":"如何回收？","children":[],"parent":"b9dfeab6afaf39ec"}],"parent":"60b8321a4dd5fd2b"}],"parent":"a4364411911e"},{"id":"4073933e8747","title":"<span style=\"color: rgb(0, 0, 0); font-size: inherit;\">简述Java垃圾回收机制（基本原理）</span><br>","style":{"box-shadow":"1px 0px 0px #ccc","border-radius":"20px","backgroundColor":"#f0f0f0","lineStyle":{"lineColor":"#eb5e41","lineWidth":1},"border-style":"solid","background-color":"rgb(255, 255, 255)","border-color":"rgb(184, 215, 251)","lineStype":{"lineColor":"#eb5e41","lineWidth":1},"italic":false,"padding":"2px 9px 4px 9px","bold":false,"color":"rgb(75, 75, 75)","family":"微软雅黑","font-size":"13px","border-bottom":"1px solid #eb5e41","textAlign":"left","border-width":"2px"},"lineStyle":{"lineColor":"#eb5e41","lineWidth":1},"children":[{"id":"0d1171c34038","title":"在java中，我们<b>不需要手动</b>释放对象的内存，由JVM的<b>垃圾回收线程</b>自动对<b>没有引用</b>的对象进行回收<br>","children":[],"parent":"4073933e8747"},{"id":"6189d8df1e92","title":"创建对象时，GC开始监控这个对象的地址、大小以及使用情况。","children":[],"parent":"4073933e8747"},{"id":"7934129b4b36","title":"GC采用<b>有向图</b>的方式记录和管理堆(heap)中的所有对象。通过这种方式确定哪些对象是\"<b>可达的</b>\"，哪些对象是\"<b>不可达的</b>\"。当GC确定一些对象为\"不可达\"时，GC就有责任回收这些内存空间","children":[],"parent":"4073933e8747"}],"parent":"a4364411911e","icons":[{"index":"9","text":"&#xe6c6","color":"rgb(51, 51, 51)","name":"face"}]},{"id":"96fa9f01d6bd","title":"垃圾回收机制<br>","style":{"border-radius":"20px","color":"rgb(75, 75, 75)","border-style":"solid","background-color":"rgb(255, 255, 255)","border-color":"rgb(184, 215, 251)","border-width":"2px"},"children":[{"id":"ec57c2818571","title":"分代复制垃圾回收<br>","children":[],"parent":"96fa9f01d6bd"},{"id":"f7ab1405e446","title":"标记垃圾回收<br>","children":[],"parent":"96fa9f01d6bd"},{"id":"fea5f93db536","title":"增量垃圾回收<br>","children":[],"parent":"96fa9f01d6bd"}],"parent":"a4364411911e","icons":[{"index":"9","text":"&#xe6c6","color":"rgb(51, 51, 51)","name":"face"}]},{"id":"900890b6dc230002","title":"什么是Grabage？","children":[{"id":"614543b0ded09477","title":"垃圾是指在运行程序中没有任何指针指向的对象，这个对象就是需要被回收的垃圾。","parent":"900890b6dc230002","children":[]},{"id":"d892c865c9b5825d","title":"An object is considered garbage when it can no longer be reached from any pointer in the running program.","parent":"900890b6dc230002","children":[]},{"id":"523b52e37fb565ee","title":"如果不及时对内存中的垃圾进行清理，那么，这些垃圾对象所占的内存空间会一直保留到应用程序结束，被保留的空间无法被其他对象使用。甚至可能导致内存溢出。","children":[],"parent":"900890b6dc230002"}],"parent":"a4364411911e"},{"id":"d4c0f512c9902f80","title":"<font face=\"楷体\" color=\"#0076b3\">为什么需要进行Grabage Collection？</font>","style":{"box-shadow":"1px 0px 0px #ccc","border-radius":"20px","backgroundColor":"#f0f0f0","lineStyle":{"lineColor":"#eb5e41","lineWidth":1},"border-style":"solid","background-color":"rgb(255, 255, 255)","border-color":"rgb(184, 215, 251)","lineStype":{"lineColor":"#eb5e41","lineWidth":1},"italic":false,"padding":"2px 9px 4px 9px","bold":false,"color":"rgb(75, 75, 75)","family":"微软雅黑","font-size":"13px","border-bottom":"1px solid #eb5e41","textAlign":"left","border-width":"2px"},"lineStyle":{"lineColor":"#eb5e41","lineWidth":1},"parent":"a4364411911e","children":[{"id":"c58229dc158bc04d","title":"不进行垃圾回收，内存会很快消耗完。进行垃圾回收，<b>释放内存空间</b>。","children":[],"parent":"d4c0f512c9902f80"},{"id":"6a7800eb0b60b6f7","title":"<b>碎片整理</b>，令新对象获得连续的内存空间。","children":[],"parent":"d4c0f512c9902f80"},{"id":"4b9513c79e16dcf9","title":"<b>STW</b>的GC无法满足实际需求，需要对GC进行<b>优化</b>。","parent":"d4c0f512c9902f80","children":[]}],"icons":[{"index":"9","text":"&#xe6c6","color":"rgb(51, 51, 51)","name":"face"}]},{"id":"230af52cca8ae4a7","title":"垃圾回收器","style":{"box-shadow":"1px 0px 0px #ccc","backgroundColor":"#f0f0f0","lineStyle":{"lineColor":"#f384ae","lineWidth":1},"lineStype":{"lineColor":"#f384ae","lineWidth":1},"italic":false,"padding":"2px 9px 4px 9px","bold":false,"color":"#735C45","family":"微软雅黑","font-size":14,"border-bottom":"1px solid #eb5e41","textAlign":"left","font-family":"楷体"},"lineStyle":{"lineColor":"#f384ae","lineWidth":1},"children":[{"id":"66d69d4405f22658","title":"优点","style":{"box-shadow":"1px 0px 0px #ccc","border-radius":"20px","backgroundColor":"#f0f0f0","lineStyle":{"lineColor":"#eb5e41","lineWidth":1},"border-style":"solid","background-color":"rgb(255, 255, 255)","border-color":"rgb(184, 215, 251)","lineStype":{"lineColor":"#eb5e41","lineWidth":1},"italic":false,"padding":"2px 9px 4px 9px","bold":false,"color":"rgb(75, 75, 75)","family":"微软雅黑","font-size":"13px","border-bottom":"1px solid #eb5e41","textAlign":"left","border-width":"2px"},"lineStyle":{"lineColor":"#eb5e41","lineWidth":1},"children":[{"id":"56aa1414a53b7550","title":"无需手动分配回收内存，降低内存泄漏、内存溢出的风险","style":{"box-shadow":"1px 0px 0px #ccc","bold":false,"color":"#735C45","backgroundColor":"#f0f0f0","family":"微软雅黑","lineStyle":{"lineColor":"#eb5e41","lineWidth":1},"font-size":"13px","border-bottom":"1px solid #eb5e41","lineStype":{"lineColor":"#eb5e41","lineWidth":1},"textAlign":"left","italic":false,"padding":"2px 9px 4px 9px"},"lineStyle":{"lineColor":"#eb5e41","lineWidth":1},"parent":"66d69d4405f22658","children":[]},{"id":"5892baa8dcba49fb","title":"<strike>没有垃圾回收器，java也会和cpp一样，各种悬垂指针，野指针，泄露问题需要自己管理</strike>","style":{"box-shadow":"1px 0px 0px #ccc","bold":false,"color":"#735C45","backgroundColor":"#f0f0f0","family":"微软雅黑","lineStyle":{"lineColor":"#eb5e41","lineWidth":1},"font-size":"13px","border-bottom":"1px solid #eb5e41","lineStype":{"lineColor":"#eb5e41","lineWidth":1},"textAlign":"left","italic":false,"padding":"2px 9px 4px 9px"},"lineStyle":{"lineColor":"#eb5e41","lineWidth":1},"children":[],"parent":"66d69d4405f22658"},{"id":"35dafd32f6b3e1d7","title":"<b>自动内存管理机制</b><strike>，将程序员从繁重的内存管理中释放出来，可以更专注于业务开发</strike>","style":{"box-shadow":"1px 0px 0px #ccc","bold":false,"color":"#735C45","backgroundColor":"#f0f0f0","family":"微软雅黑","lineStyle":{"lineColor":"#eb5e41","lineWidth":1},"font-size":"13px","border-bottom":"1px solid #eb5e41","lineStype":{"lineType":"roundBroken","lineColor":"#eb5e41","underLine":true,"lineWidth":1},"textAlign":"left","italic":false,"padding":"2px 9px 4px 9px"},"lineStyle":{"lineColor":"#eb5e41","lineWidth":1},"children":[],"parent":"66d69d4405f22658"}],"parent":"230af52cca8ae4a7","icons":[{"index":"9","text":"&#xe6c6","color":"rgb(51, 51, 51)","name":"face"}]},{"id":"07872921005723ae","title":"担忧","children":[{"id":"51757d6dea287289","title":"对于Java开发人员而言，自动内存管理就像是一个黑匣子，如果过度依赖于“自动”，那么这将会是一场灾难，最严重的就会弱化Java开发人员在程序出现内存溢出时定位问题和解决问题的能力。","children":[],"parent":"07872921005723ae"},{"id":"1300352ed9ffdc6a","title":"此时，了解JVM的自动内存分配和内存回收原理就显得非常重要，只有在真正了解JVM是如何管理内存后，我们才能够在遇见OutofMemoryError时，快速地根据错误异常日志定位问题和解决问题。","parent":"07872921005723ae","children":[]},{"id":"b5cfc50dd79208de","title":"当需要排查各种内存溢出、内存泄漏问题时，当垃圾收集成为系统达到更高并发量的瓶颈时，我们就必须对这些“自动化”的技术实施必要的监控和调节。","parent":"07872921005723ae","children":[]}],"parent":"230af52cca8ae4a7"}],"parent":"a4364411911e"},{"id":"83842a8adb712128","title":"GC 的作用域","parent":"a4364411911e","children":[{"id":"f00614ec810a02c3","title":"垃圾收集器可以对年轻代回收，也可以对老年代回收，甚至是全栈和方法区的回收，其中，Java堆是垃圾收集器的工作重点","style":{"box-shadow":"1px 0px 0px #ccc","bold":false,"color":"#735C45","backgroundColor":"#f0f0f0","family":"微软雅黑","lineStyle":{"lineColor":"#eb5e41","lineWidth":1},"font-size":"13px","border-bottom":"1px solid #eb5e41","lineStype":{"lineColor":"#eb5e41","lineWidth":1},"textAlign":"left","italic":false,"padding":"2px 9px 4px 9px"},"lineStyle":{"lineColor":"#eb5e41","lineWidth":1},"parent":"83842a8adb712128","children":[]},{"id":"d8df2ec1589b4ba6","title":"次数层面","children":[{"id":"895e494458bd841d","title":"频繁收集年轻代","parent":"d8df2ec1589b4ba6","children":[]},{"id":"0c0376a7838215e3","title":"较少收集老年代","children":[],"parent":"d8df2ec1589b4ba6"},{"id":"5152e1787c2e69e5","title":"基本不收集永久代（元空间 matespace）","children":[],"parent":"d8df2ec1589b4ba6"}],"parent":"83842a8adb712128"},{"id":"ac0dfd5b6c21f364","title":"GC主要关注于方法区和堆中的垃圾收集","children":[],"parent":"83842a8adb712128","image":{"w":340.5,"h":238,"url":"https://cdn.processon.com/5ff3b817e401fd661a11c605?e=1609811495&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:g_ENlQbeP7iVZ_W1u_EHqzqYspQ="}}]}],"collapsed":true},{"id":"603eb2a81617aeac","title":"垃圾回收相关算法","lineStyle":{"randomLineColor":"rgb(212, 164, 235)"},"children":[{"id":"e5bbdf743877d4be","title":"why对哪些对象进行垃圾回收--&gt;死亡对象--&gt;如何识别","children":[{"id":"6a6c17792f10","title":"怎么判断对象是否可以被回收？","style":{"font-weight":"bold"},"children":[],"parent":"e5bbdf743877d4be","icons":[{"index":"9","text":"&#xe6c6","color":"rgb(51, 51, 51)","name":"face"}]}],"parent":"603eb2a81617aeac"},{"id":"6cf20ce117634553","title":"标记阶段what：判断对象是否存活","parent":"603eb2a81617aeac","children":[{"id":"0234cee64d043a82","title":"堆存放：几乎所有的Java对象实例，GC之前：区分对象是否存活","children":[],"parent":"6cf20ce117634553"},{"id":"f342bc21f063018d","title":"GC执行只回收死亡对象，释放其所占用的内存空间。","children":[],"parent":"6cf20ce117634553"},{"id":"a15c2032a2a7b87b","title":"标记死亡对象：当一个对象不再被存活的对象引用时","parent":"6cf20ce117634553","children":[]},{"id":"e36277f63c3b7428","title":"两种方式How：why引用计数算法、可达性分析算法","style":{"font-weight":"bold"},"parent":"6cf20ce117634553","children":[]}]},{"id":"e93db93b63e7f165","title":"what引用计数算法","parent":"603eb2a81617aeac","children":[{"id":"3f9679366624cb3a","title":"每个对象上保存整形的引用计数属性，有对象引用计数器加一，减少引用计数器减一。计数器为零时，进行垃圾回收","children":[],"parent":"e93db93b63e7f165"},{"id":"922d2c5f02a08f37","title":"优点：实现简单、垃圾对象易识别、判定效率高、回收没有延迟性","children":[],"parent":"e93db93b63e7f165"},{"id":"ea49d819c70f4f48","title":"缺点：循环引用问题","style":{"font-weight":"bold"},"image":{"w":471,"url":"https://cdn.processon.com/5ff3d3cf7d9c080564108c88?e=1609818591&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:NKlAwNjyhFD6KqmWoNdTzOCthtc=","h":258},"children":[{"id":"4ada296fc44bd2b8","title":"代码测试证明java不是使用的引用计数算法","parent":"ea49d819c70f4f48","children":[],"image":{"w":463,"h":473,"url":"https://cdn.processon.com/5ff3d41407912930e0196995?e=1609818660&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:RVc6WVeZ5X98tImPYOqrJYFFsV8="}},{"id":"0de62730a44629e1","title":"结果：垃圾回收日志：Eden 区占用率为1% ，说明进行了垃圾回收（未用：引用计数）","children":[],"parent":"ea49d819c70f4f48","image":{"w":528.5,"h":256,"url":"https://cdn.processon.com/5ff3d47807912930e0196c12?e=1609818760&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:N6QzdNF2GQAqaK4m4vaPn3_v5G8="}}],"parent":"e93db93b63e7f165"}]},{"id":"3bd6113256265826","title":"标记阶段：可达性分析算法（根搜索算法、追踪性垃圾收集）","children":[{"id":"c8283f2928424473","title":"解决循环引用问题，防止内存溢出","children":[],"parent":"3bd6113256265826"},{"id":"612efcee13301b04","title":"分析思路","parent":"3bd6113256265826","children":[{"id":"204e748db9c87acd","title":"根对象集合为起点，向下搜索直接或间接连接的对象为存活对象","children":[],"parent":"612efcee13301b04"},{"id":"cf071c04cd0a1e9f","title":"无法建立连接，即不可达对象标记为可回收对象","children":[],"parent":"612efcee13301b04"}],"image":{"w":460,"h":251,"url":"https://cdn.processon.com/5ff3d85be0b34d34e12abc62?e=1609819755&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:H_LB3_L2PPVdyeOx0I-Pv4PJotA="}},{"id":"c9b028a47ef8f0bc","title":"GC Roots可以是哪些元素？","parent":"3bd6113256265826","children":[{"id":"64ab961599d4d178","title":"虚拟机栈中引用的对象，比如：各个线程被调用的方法中使用到的参数、局部变量等。","children":[],"parent":"c9b028a47ef8f0bc"},{"id":"99156ee5889d4a4e","title":"本地方法栈内JNI（通常说的本地方法）引用的对象方法区中类静态属性引用的对象，比如：Java类的引用类型静态变量","children":[],"parent":"c9b028a47ef8f0bc"},{"id":"5b971da108d60e39","title":"方法区中常量引用的对象，比如：字符串常量池（StringTable）里的引用","children":[],"parent":"c9b028a47ef8f0bc"},{"id":"48848384de0e6813","title":"所有被同步锁synchronized持有的对象","parent":"c9b028a47ef8f0bc","children":[]},{"id":"2041da921cb9aa6c","title":"Java虚拟机内部的引用。","parent":"c9b028a47ef8f0bc","children":[]},{"id":"639956e03fb0cca3","title":"基本数据类型对应的Class对象，一些常驻的异常对象（如：NullPointerException、OutofMemoryError），系统类加载器。","parent":"c9b028a47ef8f0bc","children":[]},{"id":"f803557d99aa09c1","title":"反映java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。","children":[],"parent":"c9b028a47ef8f0bc"}],"image":{"w":378,"h":269.5,"url":"https://cdn.processon.com/5ff3da2e1e08531de8191f69?e=1609820222&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:ovcHl7SMwuUyzHqD10KzGyaAxNk="}},{"id":"6c5eb7ed18507fbd","title":"GC Roots 的总结","parent":"3bd6113256265826","children":[{"id":"db0ec3d93d88d3ea","title":"总结一句话就是，除了堆空间外的一些结构，比如：虚拟机栈、本地方法栈、方法区、字符串常量池等地方对堆空间进行引用的，都可以作为GC Roots进行可达性分析","children":[],"parent":"6c5eb7ed18507fbd"},{"id":"4259bd08dda9790e","title":"除了这些固定的GC Roots集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象“临时性”地加入，共同构成完整GC Roots集合。比如：分代收集和局部回收（PartialGC）。","children":[],"parent":"6c5eb7ed18507fbd"},{"id":"9ba5044ed36cf6ca","title":"如果只针对Java堆中的某一块区域进行垃圾回收（比如：典型的只针对新生代），必须考虑到内存区域是虚拟机自己的实现细节，更不是孤立封闭的，这个区域的对象完全有可能被其他区域的对象所引用，这时候就需要一并将关联的区域对象也加入GC Roots集合中去考虑，才能保证可达性分析的准确性。","children":[],"parent":"6c5eb7ed18507fbd"}]},{"id":"598f0dd0b520fb06","title":"小技巧","parent":"3bd6113256265826","children":[{"id":"3be28e408dc837fa","title":"由于Root采用栈方式存放变量和指针，所以如果一个指针，它保存了堆内存里面的对象，但是自己又不存放在堆内存里面，那它就是一个Root。","children":[],"parent":"598f0dd0b520fb06"}]},{"id":"0f61b38a12d39d3f","title":"可达性分析算法的注意事项","parent":"3bd6113256265826","children":[{"id":"e961d36f3cbec988","title":"如果要使用可达性分析算法来判断内存是否可回收，那么分析工作必须在一个能保障一致性的快照中进行。这点不满足的话分析结果的准确性就无法保证。","task":{"completion":100},"parent":"0f61b38a12d39d3f","children":[]},{"id":"d5c8087ff6eb472a","title":"一致性--&gt;准确性","parent":"0f61b38a12d39d3f","children":[]},{"id":"b32e3e0a35ad5aee","title":"这点也是导致GC进行时必须“Stop The World”的一个重要原因。即使是号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。","task":{"completion":100},"parent":"0f61b38a12d39d3f","children":[]},{"id":"ec69f15b780b15b0","title":"枚举根节点停顿","children":[],"parent":"0f61b38a12d39d3f"}]}],"parent":"603eb2a81617aeac"},{"id":"edfd3ac657c3","title":"在Java中，对象什么时候可以被垃圾回收","style":{"font-weight":"bold"},"children":[{"id":"1ecedb6d63b7","title":"子主题","children":[],"parent":"edfd3ac657c3"},{"id":"590093f254b5","title":"不可达的对象可以被垃圾回收器回收","children":[],"parent":"edfd3ac657c3"}],"parent":"603eb2a81617aeac","icons":[{"index":"9","text":"&#xe6c6","color":"rgb(51, 51, 51)","name":"face"}]},{"id":"377f323b102e","title":"JVM中的永久代中会发生垃圾回收吗","style":{"font-weight":"bold"},"children":[{"id":"664866a14b64","title":"垃圾回收不会发生在永久代","children":[],"parent":"377f323b102e"},{"id":"8f574adf2069","title":"如果永久代满或超过设定阈值，会触发Full GC（堆+方法区）","children":[],"parent":"377f323b102e"},{"id":"4da73f48c2b8","title":"查看垃圾收集器的输出信息，会发现永久代也是被回收的","children":[],"parent":"377f323b102e"},{"id":"c2b8e8ef3f64","title":"避免Full GC：设置永久代大小，Java8：从永久代到元数据区（本地内存区）","children":[],"parent":"377f323b102e"}],"parent":"603eb2a81617aeac","icons":[{"index":"9","text":"&#xe6c6","color":"rgb(51, 51, 51)","name":"face"}]},{"id":"d1d64719d9c627cf","title":"对象的 finalization 机制","task":{"completion":100},"children":[{"id":"4cc06d2cabd176af","title":"对象销毁前的回调函数：finalize()","task":{"completion":100},"children":[{"id":"0bfa3613a5a54d6d","title":"Java语言提供了对象终止（finalization）机制来允许开发人员提供对象被销毁之前的自定义处理逻辑。","parent":"4cc06d2cabd176af","children":[]},{"id":"a3949f4040a74dfc","title":"当垃圾回收器发现没有引用指向一个对象，即：垃圾回收此对象之前，总会先调用这个对象的finalize()方法。","children":[],"parent":"4cc06d2cabd176af"},{"id":"cb746e49a439d9fb","title":"finalize() 方法允许在子类中被重写，用于在对象被回收时进行资源释放。通常在这个方法中进行一些资源释放和清理的工作，比如关闭文件、套接字和数据库连接等。","children":[],"parent":"4cc06d2cabd176af"}],"parent":"d1d64719d9c627cf"},{"id":"fa6c262dd8f2f3e9","title":"finalize() 方法使用的注意事项","task":{"completion":100},"parent":"d1d64719d9c627cf","children":[{"id":"353ed65292f2dadd","title":"永远不要主动调用某个对象的finalize()方法应该交给垃圾回收机制调用。理由包括三点","children":[{"id":"6ab226929edbedf3","title":"在finalize()时可能会导致对象复活","children":[],"parent":"353ed65292f2dadd"},{"id":"e42282f726db8d37","title":"finalize()方法的执行时间是没有保障的，它完全由GC线程决定，极端情况下，若不发生GC，则finalize()方法将没有执行机会。","children":[],"parent":"353ed65292f2dadd"},{"id":"287de6fbbed1843c","title":"因为优先级比较低，即使主动调用该方法，也不会因此就直接进行回收","parent":"353ed65292f2dadd","children":[]}],"parent":"fa6c262dd8f2f3e9"},{"id":"b77c4a6ef0627c53","title":"一个糟糕的finalize()会严重影响GC的性能。","parent":"fa6c262dd8f2f3e9","children":[]},{"id":"08b6939e71e5c878","title":"从功能上来说，finalize()方法与C++中的析构函数比较相似，但是Java采用的是基于垃圾回收器的自动内存管理机制，所以finalize()方法在本质上不同于C++中的析构函数。","parent":"fa6c262dd8f2f3e9","children":[]}]},{"id":"d719b3c92129b92d","title":"由于finalize()方法的存在，虚拟机中的对象有三种可能状态","parent":"d1d64719d9c627cf","children":[{"id":"5d7481529c4858e8","title":"可触及：从根节点开始，可以到达这个对象。","parent":"d719b3c92129b92d","children":[]},{"id":"b5b70649875be0df","title":"可复活：对象的所有引用都被释放，但是对象有可能在finalize()中复活。","parent":"d719b3c92129b92d","children":[]},{"id":"52564c8882f14d7f","title":"不可触及的：对象的finalize()被调用，并且没有复活，那么就会进入不可触及状态。不可触及的对象不可能被复活，因为finalize()只会被调用一次。","parent":"d719b3c92129b92d","children":[]}]},{"id":"d7cb13eaa16a1752","title":"finalize() 具体执行过程","children":[{"id":"65c54c19e24a23ee","title":"判定一个对象objA是否可回收，至少要经历两次标记过程","parent":"d7cb13eaa16a1752","children":[]},{"id":"eb47ee505e4d697e","title":"如果对象objA到GC Roots没有引用链，则进行第一次标记。","parent":"d7cb13eaa16a1752","children":[]},{"id":"d2689eba68bfc07a","title":"进行筛选，判断此对象是否有必要执行finalize()方法","parent":"d7cb13eaa16a1752","children":[{"id":"e818179dd14ee2b6","title":"如果对象objA没有重写finalize()方法，或者finalize()方法已经被虚拟机调用过，则虚拟机视为“没有必要执行”，objA被判定为不可触及的。","parent":"d2689eba68bfc07a","children":[]},{"id":"015912f21b5c38af","title":"如果对象objA重写了finalize()方法，且还未执行过，那么objA会被插入到F-Queue队列中，由一个虚拟机自动创建的、低优先级的Finalizer线程触发其finalize()方法执行。","children":[],"parent":"d2689eba68bfc07a"}]},{"id":"8b16a772ffb93cc1","title":"finalize()方法是对象逃脱死亡的最后机会，稍后GC会对F-Queue队列中的对象进行第二次标记。如果objA在finalize()方法中与引用链上的任何一个对象建立了联系，那么在第二次标记时，objA会被移出“即将回收”集合。","parent":"d7cb13eaa16a1752","children":[]},{"id":"f3954094ee1b6f9c","title":"之后，对象会再次出现没有引用存在的情况。在这个情况下，finalize()方法不会被再次调用，对象会直接变成不可触及的状态，注：一个对象的finalize()方法只会被调用一次。","parent":"d7cb13eaa16a1752","children":[]}],"parent":"d1d64719d9c627cf"}],"parent":"603eb2a81617aeac"},{"id":"0d59d4ab128dca47","title":"GC Roots 溯源","children":[{"id":"83d7e3443c7811d0","title":"MAT（Memory Analyzer）：一款功能强大的Java堆内存分析器，用于查找内存泄漏以及查看内存消耗情况。基于Eclipse开发的，是一款免费的性能分析工具","children":[],"parent":"0d59d4ab128dca47"},{"id":"83e548124a2de1b8","title":"使用JVisualVM捕捉 heap dump","parent":"0d59d4ab128dca47","children":[]},{"id":"fb3da0f4a836bcfd","title":"使用 JProfiler 进行 GC Roots 溯源","parent":"0d59d4ab128dca47","children":[]},{"id":"73b3f7a75a12defe","title":"JProfiler 分析 OOM","parent":"0d59d4ab128dca47","children":[]}],"parent":"603eb2a81617aeac"},{"id":"d93a1a31a782c972","title":"清除阶段：当成功区分出内存中存活对象和死亡对象后，GC接下来的任务是执行垃圾回收，释放掉无用对象所占用的内存空间，以便有足够的可用内存空间为新对象分配内存。目前在JVM中比较常见的三种垃圾收集算法","parent":"603eb2a81617aeac","children":[{"id":"09ee20ba5825da25","title":"标记-清除算法（Mark-Sweep）","parent":"d93a1a31a782c972","children":[]},{"id":"7618c54f0f067d11","title":"复制算法（Copying）","children":[],"parent":"d93a1a31a782c972"},{"id":"132bef8f02ff5c23","title":"标记-压缩算法（Mark-Compact）","parent":"d93a1a31a782c972","children":[]}]},{"id":"635799f3d702","title":"说一下 JVM 有哪些垃圾回收算法？","style":{"font-weight":"bold"},"children":[{"id":"9e057a4104b5","title":"标记-清除算法","children":[],"parent":"635799f3d702"},{"id":"9e6fa9382bd9","title":"复制算法<br>","children":[],"parent":"635799f3d702"},{"id":"bbae9f679610","title":"标记-整理算法<br>","children":[],"parent":"635799f3d702"},{"id":"333756ed20d6","title":"分代算法","children":[],"parent":"635799f3d702"}],"parent":"603eb2a81617aeac","icons":[{"index":"9","text":"&#xe6c6","color":"rgb(51, 51, 51)","name":"face"}]},{"id":"d8075c9b9f00756e","title":"清除阶段：标记-清除算法","parent":"603eb2a81617aeac","children":[{"id":"3801b03e1c11aa16","title":"执行过程","children":[{"id":"67c68e601dcfbc4a","title":"当堆中的有效内存空间（available memory）被耗尽时，就会停止整个程序（stop the world），然后进行两项工作，标记、清除","children":[{"id":"13bef6ce29e4fb4e","title":"标记：Collector从引用根节点开始遍历，标记所有被引用的对象。","parent":"67c68e601dcfbc4a","children":[{"id":"cfc3fa2558840fa5","title":"一般是在对象的Header中记录为可达对象。","children":[],"parent":"13bef6ce29e4fb4e"}]},{"id":"008410c2edcd4080","title":"清除：Collector对堆内存从头到尾进行线性遍历，如果发现某个对象在其Header中没有标记为可达对象，则将其回收","parent":"67c68e601dcfbc4a","children":[]}],"parent":"3801b03e1c11aa16"}],"parent":"d8075c9b9f00756e","image":{"w":481,"h":377,"url":"https://cdn.processon.com/5ff403dce401fd661a12f272?e=1609830893&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:3Sh1tlObMbfW5EGMY_dY09bO4Ms="}},{"id":"90d4431c01e51a63","title":"清除对象的方式","parent":"d8075c9b9f00756e","children":[{"id":"2a85ffcc32556bbd","title":"把需要清除的对象地址保存在空闲地址列表里。下次有新对象需要加载时，判断垃圾的位置空间是否够，如果够，就存放并覆盖原有地址内容","parent":"90d4431c01e51a63","children":[]},{"id":"b72e68e315af321e","title":"如果内存规整","children":[{"id":"42a140a09883cc02","title":"采用指针碰撞的方式进行内存分配","parent":"b72e68e315af321e","children":[]},{"id":"d2a84558ef0feef9","title":"指针碰撞的说明","children":[{"id":"272222b5e79353a7","title":"如果内存空间以规整和有序的方式分布，即已用和未用的内存都各自一边，彼此之间维系着一个记录下一次分配起始点的标记指针，当为新对象分配内存时只需要通过修改指针的偏移量将新对象分配在第一个空闲内存位置上，这种分配方式就叫做指针碰撞（Bump the Pointer）。","parent":"d2a84558ef0feef9","children":[]}],"parent":"b72e68e315af321e"}],"parent":"90d4431c01e51a63"},{"id":"2dc54c7f4776f385","title":"如果内存不规整","children":[{"id":"f94d83b1120fed12","title":"虚拟机需要维护一个空闲列表","children":[],"parent":"2dc54c7f4776f385"},{"id":"bca35773642658b0","title":"采用空闲列表分配内存","children":[],"parent":"2dc54c7f4776f385"}],"parent":"90d4431c01e51a63"}]},{"id":"bf6003a2e0b3bbeb","title":"标记-清除算法缺点","parent":"d8075c9b9f00756e","children":[{"id":"7e4d4d1d1a94300c","title":"效率不高","parent":"bf6003a2e0b3bbeb","children":[]},{"id":"e01d6c833c7d2762","title":"在进行GC时，需要停止整个应用程序，用户体验差","parent":"bf6003a2e0b3bbeb","children":[]},{"id":"276f944be76307ff","title":"空闲内存不连续，产生内碎片","parent":"bf6003a2e0b3bbeb","children":[]},{"id":"029817ca63e1d5f5","title":"需要维护一个空闲列表","children":[],"parent":"bf6003a2e0b3bbeb"}]}]},{"id":"bf04a825a77e975f","title":"清除阶段：复制算法","parent":"603eb2a81617aeac","children":[{"id":"fa37e5745faa550b","title":"将活着的内存空间分为两块，每次只使用其中一块，在垃圾回收时将正在使用的内存中的存活对象复制到未被使用的内存块中，之后清除正在使用的内存块中的所有对象，交换两个内存的角色，最后完成垃圾回收","children":[],"parent":"bf04a825a77e975f"},{"id":"840b72d0978427da","title":"Eden区、from区、to区的复制算法","image":{"w":501.5,"url":"https://cdn.processon.com/5ff4112ae0b34d34e12dc0c4?e=1609834298&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:SDxcbITif4JbPYnaNdTUtElFoFk=","h":203.5},"children":[],"parent":"bf04a825a77e975f"},{"id":"467ed0a0f220ecca","title":"复制算法的优点","children":[{"id":"fe7baf2eaff393a7","title":"没有标记和清除过程，实现简单，运行高效","parent":"467ed0a0f220ecca","children":[]},{"id":"cd80930739db7e5a","title":"复制过去以后保证空间的连续性，不会出现“碎片”问题。","children":[],"parent":"467ed0a0f220ecca"}],"parent":"bf04a825a77e975f"},{"id":"6f35d862315fbb44","title":"复制算法的缺点","children":[{"id":"54ba5bfa26b41048","title":"需要两倍内存空间","children":[],"parent":"6f35d862315fbb44"},{"id":"4db03212cdeff149","title":"对于G1这种分拆成大量region的GC，复制而不是移动，意味着GC需要维护region之间对象引用关系，内存占用、时间开销都很大","parent":"6f35d862315fbb44","children":[]}],"parent":"bf04a825a77e975f"},{"id":"25671f68f266a6e6","title":"综上：适合垃圾对象很多，存活对象很少的场景；例如：Young区的Survivor0和Survivor1区","parent":"bf04a825a77e975f","children":[]}]},{"id":"52fe334ba5210cd1","title":"清除阶段：标记-压缩算法（标记-整理 、Mark - Compact）","children":[{"id":"0c78e4b8f4b986ac","title":"标记-清除算法：老年代，会产生大量内存碎片","parent":"52fe334ba5210cd1","children":[]},{"id":"9e4237465417c6e4","title":"复制算法针对：新生代，存活对象少，垃圾对象多。不适用于老年代，大量存活对象","parent":"52fe334ba5210cd1","children":[]},{"id":"892d88bc0c0c8cce","title":"标记-压缩算法的执行流程（标记-清除-压缩）","parent":"52fe334ba5210cd1","children":[{"id":"96ede98972e2fd2b","title":"第一阶段和标记清除算法一样，从根节点开始标记所有被引用对象","parent":"892d88bc0c0c8cce","children":[]},{"id":"dce76ef26f15065a","title":"第二阶段将所有的存活对象压缩到内存一端，按顺序排放。之后，清理边界外所有空间。","children":[],"parent":"892d88bc0c0c8cce"}],"image":{"w":333.5,"h":269,"url":"https://cdn.processon.com/5ff415f407912930e01a8ee0?e=1609835526&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:_TMe2iWM4ORw_g6x-yAHG1-vrTs="}},{"id":"a23c2285c40280c9","title":"优点","parent":"52fe334ba5210cd1","children":[{"id":"7e18dcfd7ecb2610","title":"消除了标记-清除算法当中，内存区域分散的缺点，我们需要给新对象分配内存时，JVM只需要持有一个内存的起始地址即可。","parent":"a23c2285c40280c9","children":[]},{"id":"ba610b549e9b0ddf","title":"消除了复制算法当中，内存减半的高额代价。","children":[],"parent":"a23c2285c40280c9"}]},{"id":"b7d6a8ae91a6e5a6","title":"缺点","parent":"52fe334ba5210cd1","children":[{"id":"70da27a4f61e9c29","title":"从效率上来说，标记-整理算法要低于复制算法。","parent":"b7d6a8ae91a6e5a6","children":[]},{"id":"473ded58d29febfd","title":"移动对象的同时，如果对象被其他对象引用，则还需要调整引用的地址","parent":"b7d6a8ae91a6e5a6","children":[]},{"id":"0dca0671d49c97ce","title":"移动过程中，需要全程暂停用户应用程序。即：STW","parent":"b7d6a8ae91a6e5a6","children":[]}]}],"parent":"603eb2a81617aeac"},{"id":"940a625cd63e06f5","title":"对比三种清除阶段的算法（没有最好的算法，只有最合适的算法）","image":{"w":549,"url":"https://cdn.processon.com/5ff416e87d9c080564169254?e=1609835768&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:dTefULQYq_J5MzghObOAWUSMgU8=","h":131},"children":[],"parent":"603eb2a81617aeac"},{"id":"fc86ea7119d4bfbe","title":"分代收集算法","parent":"603eb2a81617aeac","children":[{"id":"8038e22b558d5c9d","title":"年轻代（Young Gen）","parent":"fc86ea7119d4bfbe","children":[{"id":"1405cc2d2625ecb9","title":"区域相对老年代较小，对象生命周期短、存活率低，回收频繁。","parent":"8038e22b558d5c9d","children":[]},{"id":"d979666f946f5ab5","title":"这种情况复制算法的回收整理，速度是最快的。复制算法的效率只和当前存活对象大小有关，因此很适用于年轻代的回收。而复制算法内存利用率不高的问题，通过hotspot中的两个survivor的设计得到缓解。","children":[],"parent":"8038e22b558d5c9d"}]},{"id":"cb5419ddbcbdd50c","title":"老年代（Tenured Gen）","children":[{"id":"7ba7c71459743351","title":"区域较大，对象生命周期长、存活率高，回收不及年轻代频繁。","parent":"cb5419ddbcbdd50c","children":[]},{"id":"4147b10e202b2aa6","title":"这种情况存在大量存活率高的对象，复制算法明显变得不合适。一般是由标记-清除或者是标记-清除与标记-整理的混合实现。","children":[{"id":"797bb75717823437","title":"Mark阶段的开销与存活对象的数量成正比。","children":[],"parent":"4147b10e202b2aa6"},{"id":"2a24cafa6eaabe54","title":"Sweep阶段的开销与所管理区域的大小成正相关。","children":[],"parent":"4147b10e202b2aa6"},{"id":"2dd6c4456f6fff0a","title":"Compact阶段的开销与存活对象的数据成正比。","children":[],"parent":"4147b10e202b2aa6"}],"parent":"cb5419ddbcbdd50c"}],"parent":"fc86ea7119d4bfbe"}]},{"id":"4a6dfc740645c7fa","title":"Hotspot CMS 回收器","parent":"603eb2a81617aeac","children":[{"id":"e113911f4912161d","title":"以HotSpot中的CMS回收器为例，CMS是基于Mark-Sweep实现，对于对象的回收效率很高。","children":[],"parent":"4a6dfc740645c7fa"},{"id":"50e9a068f021643b","title":"对于碎片问题，CMS采用基于Mark-Compact算法的Serial Old回收器作为补偿措施：当内存回收不佳（碎片导致的Concurrent Mode Failure时），将采用Serial Old执行Full GC以达到对老年代内存的整理。","parent":"4a6dfc740645c7fa","children":[]}]},{"id":"7112d25c46397a46","title":"增量收集算法","children":[{"id":"673d11e9ea1dca2f","title":"上述现有的算法，在垃圾回收过程中，应用软件将处于一种Stop the World的状态。在Stop the World状态下，应用程序所有的线程都会挂起，暂停一切正常的工作，等待垃圾回收的完成","parent":"7112d25c46397a46","children":[]},{"id":"693a7cee7fe94eb2","title":"如果垃圾回收时间过长，应用程序会被挂起很久，将严重影响用户体验或者系统的稳定性。为了解决这个问题，即对实时垃圾收集算法的研究直接导致了增量收集（Incremental Collecting）算法的诞生。","parent":"7112d25c46397a46","children":[]},{"id":"7828bd2bcdb12986","title":"基本思想","parent":"7112d25c46397a46","children":[{"id":"1393509f152bca5e","title":"如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程交替执行。每次，垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。","parent":"7828bd2bcdb12986","children":[]},{"id":"9b4ba192bb230b20","title":"总的来说，增量收集算法的基础仍是传统的标记-清除和复制算法。增量收集算法通过对线程间冲突的妥善处理，允许垃圾收集线程以分阶段的方式完成标记、清理或复制工作","children":[],"parent":"7828bd2bcdb12986"}]},{"id":"e843d3a742d32a71","title":"增量收集算法的优缺点","children":[{"id":"986d4ca3d267805b","title":"使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。","parent":"e843d3a742d32a71","children":[]},{"id":"31bcea7a0b90f0fa","title":"但是，因为线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升，造成系统吞吐量的下降。","parent":"e843d3a742d32a71","children":[]}],"parent":"7112d25c46397a46"}],"parent":"603eb2a81617aeac"},{"id":"d7e79a9f9add5366","title":"分区算法","parent":"603eb2a81617aeac","children":[{"id":"d4758aa0c43d27e2","title":"一般来说，在相同条件下，堆空间越大，一次GC时所需要的时间就越长，有关GC产生的停顿也越长。","children":[],"parent":"d7e79a9f9add5366"},{"id":"dcb3c75d750090a1","title":"为了更好地控制GC产生的停顿时间，将一块大的内存区域分割成多个小块，根据目标的停顿时间，每次合理地回收若干个小区间，而不是整个堆空间，从而减少一次GC所产生的停顿。","children":[],"parent":"d7e79a9f9add5366"},{"id":"f1fce736ce22a162","title":"分代算法将按照对象的生命周期长短划分成两个部分，分区算法将整个堆空间划分成连续的不同小区间。每一个小区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。","parent":"d7e79a9f9add5366","children":[]}],"image":{"w":390.5,"h":258.5,"url":"https://cdn.processon.com/5ff41b8e7d9c08056416b096?e=1609836958&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:beR1ry4OJIqqdggoBP0btkv1sSk="}}],"parent":"root","collapsed":true},{"id":"45a5036cac1c2302","title":"垃圾回收相关概念","lineStyle":{"randomLineColor":"#80BC42"},"children":[{"id":"2d6ba53ebbb0665d","title":"System.gc() 的理解","parent":"45a5036cac1c2302","children":[{"id":"a4999e965cb413dd","title":"在默认情况下，通过System.gc()者Runtime.getRuntime().gc() 的调用，会显式触发Full GC，同时对老年代和新生代进行回收，尝试释放被丢弃对象占用的内存。","parent":"2d6ba53ebbb0665d","children":[]},{"id":"7613c43cb19e270e","title":"System.gc()调用无法保证对垃圾收集器的调用（不能确保立即生效）","parent":"2d6ba53ebbb0665d","children":[]},{"id":"991b1d1d34f834d2","title":"JVM实现者可以通过System.gc() 调用来决定JVM的GC行为。而一般情况下，垃圾回收应该是自动进行的，无须手动触发，否则就太过于麻烦。","parent":"2d6ba53ebbb0665d","children":[]},{"id":"7499226395a8c42c","title":"在一些特殊情况下，如我们正在编写一个性能基准，我们可以在运行之间调用System.gc()","parent":"2d6ba53ebbb0665d","children":[]},{"id":"6b2243ef22791148","title":"不可达对象回收行为","image":{"w":883,"url":"https://cdn.processon.com/5ff42857e0b34d34e12ec3bd?e=1609840232&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:zZuI-TJzZ9ut45oMoJHT2Jr6oZI=","h":406},"children":[],"parent":"2d6ba53ebbb0665d"}]},{"id":"54405cbab409","title":"垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？","children":[{"id":"d7d791c571b0","title":"可以","children":[],"parent":"54405cbab409"},{"id":"ad405a07c9c8","title":"手动执行System.gc()<br>","children":[],"parent":"54405cbab409"},{"id":"b72805e951d3","title":"通知GC运行，但Java语言规范并不保证GC一定会执行","children":[],"parent":"54405cbab409"}],"parent":"45a5036cac1c2302","icons":[{"index":"9","text":"&#xe6c6","color":"rgb(51, 51, 51)","name":"face"}]},{"id":"d6675c313d0cd651","title":"内存溢出（OutofMemoryError）","children":[{"id":"01453d79dd1c961f","title":"应用程序占用的内存增长速度非常快，造成垃圾回收已经跟不上内存消耗的速度","parent":"d6675c313d0cd651","children":[]},{"id":"8c7f040eafe3e041","title":"GC年轻代老年代的垃圾回收--&gt;内存不足--&gt;独占式Full GC操作--&gt;回收大量内存，供应用程序继续使用。","parent":"d6675c313d0cd651","children":[]},{"id":"6f1230f37f94b2af","title":"Javadoc中对OOM的解释：没有空闲内存，并且垃圾收集器也无法提供更多内存。","parent":"d6675c313d0cd651","children":[{"id":"688289823d0bc3e4","title":"Java虚拟机的堆内存设置不够。","children":[{"id":"76fb3034b360d408","title":"可能存在内存泄漏问题；也有可能是堆的大小设计不合理，比如要处理比较可观的数据量，但没有显式指定JVM堆大小或指定数值偏小","parent":"688289823d0bc3e4","children":[]},{"id":"f7e064b47e6a036e","title":"调整参数-Xms 、-Xmx","parent":"688289823d0bc3e4","children":[]}],"parent":"6f1230f37f94b2af"},{"id":"851d6f0c64cd3c31","title":"代码中创建了大量大对象，并且长时间不能被垃圾收集器收集（存在被引用）","children":[{"id":"cff32aecd1f123a8","title":"对于老版本Oracle JDK，因为永久代大小有限，并且JVM对永久代垃圾回收（如，常量池回收、卸载不再需要的类型）非常不积极，所以当我们不断添加新类型时，永久代出现OutOfMemoryError","parent":"851d6f0c64cd3c31","children":[]},{"id":"415832ed8bb6f620","title":"运行时存在大量动态类型生成的场合：类似intern字符串缓存占用太多空间，也会导致OOM问题","parent":"851d6f0c64cd3c31","children":[]},{"id":"5a6fe3313fa650f8","title":"异常信息，会标记出永久代相关：“java.lang.OutOfMemoryError:PermGen space\"","parent":"851d6f0c64cd3c31","children":[]},{"id":"bcc4398c42f81888","title":"元数据区，本地内存，异常信息：“java.lang.OutofMemoryError:Metaspace\"。直接内存不足，也会导致OOM。","parent":"851d6f0c64cd3c31","children":[]}],"parent":"6f1230f37f94b2af"}]}],"parent":"45a5036cac1c2302"},{"id":"a4f1567fe122","title":"腾讯TEG实习<br>","style":{"font-weight":"bold"},"children":[{"id":"ad77010d3149","title":"永久代是在哪个版本去掉的？MetaSpace 是什么时候出现的？MetaSpace 大小一般建议设置为多少？它有可能会爆吗？","children":[{"id":"c96c786c3706","title":"一般设置256M","parent":"ad77010d3149","children":[]}],"parent":"a4f1567fe122"},{"id":"6035a6e2c838","title":"如果物理机有 11G 内存，堆设置了 10G，MetaSpace 设置了 128M，它有可能发生 OOM 吗？什么情况会发生？","parent":"a4f1567fe122","children":[]},{"id":"58df10bb659d","title":"对内存泄漏有了解吗？","parent":"a4f1567fe122","children":[]}],"parent":"45a5036cac1c2302"},{"id":"ad672ae03e7ffd98","title":"内存泄漏","parent":"45a5036cac1c2302","children":[{"id":"17bf5cb72380c4f7","title":"不再被使用的对象或变量一直占据在内存中，但GC又不能回收","children":[],"parent":"ad672ae03e7ffd98"},{"id":"50e416c06d240241","title":"内存泄漏，程序不会立刻崩溃，耗尽内存，最终出现OutofMemory异常，导致程序崩溃。","children":[],"parent":"ad672ae03e7ffd98"},{"id":"318b8a5e8ecafe66","title":"存储空间：虚拟内存大小，取决于磁盘交换区设定的大小","parent":"ad672ae03e7ffd98","children":[]},{"id":"62dbd85b97e5","title":"导致内存泄露的原因","children":[{"id":"607172ce73f8","title":"长生命周期对象持有短生命周期对象的引用<br>","children":[],"parent":"62dbd85b97e5"}],"parent":"ad672ae03e7ffd98"},{"id":"6ff4b33daa30737c","title":"内存泄露举例","image":{"w":539.5,"url":"https://cdn.processon.com/5ff42e2ff346fb340de7ed64?e=1609841728&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:n5dgTdyHupt4S1kPjVBNBRQPMcM=","h":255.5},"parent":"ad672ae03e7ffd98","children":[{"id":"77c5a4c1d2cb7458","title":"左边的图：Java使用可达性分析算法，最上面的数据不可达，需要被回收。","parent":"6ff4b33daa30737c","children":[]},{"id":"4b0439b96852e941","title":"右边的图：后期一些短生命周期对象不用，应断开引用，但长生命周期对象持有引用，导致短生命周期对象无法回收。","parent":"6ff4b33daa30737c","children":[]},{"id":"bc69d500288d1bb1","title":"单例模式","children":[{"id":"cc8330f4c566ae96","title":"单例的生命周期和应用程序一样长，所以在单例程序中，若持有对外部对象的引用，那么这个外部对象不能被回收，导致内存泄漏。","parent":"bc69d500288d1bb1","children":[]}],"parent":"6ff4b33daa30737c"},{"id":"3491e8de6c67c877","title":"一些提供close()的资源未关闭导致内存泄漏","parent":"6ff4b33daa30737c","children":[{"id":"e7991780cda80834","title":"数据库连接 dataSourse.getConnection()，网络连接socket和io连接必须手动close，否则不能被回收。","children":[],"parent":"3491e8de6c67c877"}]}]}]},{"id":"1261679fddfde79d","title":"Stop the World","children":[{"id":"ad8058f23ca29b67","title":"GC事件发生过程中，会产生应用程序的停顿。停顿产生时整个应用程序线程都会被暂停，没有任何响应，有点像卡死的感觉，这个停顿称为STW。","parent":"1261679fddfde79d","children":[]},{"id":"531bebb68f2f2dcf","title":"可达性分析算法中枚举根节点（GC Roots）会导致所有Java执行线程停顿。为什么需要停顿所有 Java 执行线程？","children":[{"id":"1ca0880e62fa4edc","title":"分析工作必须在一个能确保一致性的快照中进行","parent":"531bebb68f2f2dcf","children":[]},{"id":"44806fceec4a38df","title":"一致性指整个分析期间整个执行系统看起来像被冻结在某个时间点上","parent":"531bebb68f2f2dcf","children":[]},{"id":"fb63b85c313f58d0","title":"如果出现分析过程中对象引用关系还在不断变化，则分析结果的准确性无法保证","parent":"531bebb68f2f2dcf","children":[]}],"parent":"1261679fddfde79d"},{"id":"056c8b6c7c00c400","title":"被STW中断的应用程序线程会在完成GC之后恢复，频繁中断令用户体验差，需要减少STW的发生。","children":[],"parent":"1261679fddfde79d"},{"id":"0aebcd86c053b5b1","title":"注意事项","parent":"1261679fddfde79d","children":[{"id":"8a5b4230cbbc02b4","title":"STW事件和采用哪款GC无关，所有的GC都有这个事件。","children":[],"parent":"0aebcd86c053b5b1"},{"id":"ae7fe9ebd979d90b","title":"哪怕是G1也不能完全避免Stop-the-world情况发生，只能说回收效率越来越高，尽可能地缩短了暂停时间。","children":[],"parent":"0aebcd86c053b5b1"},{"id":"420670170a2b26bf","title":"STW是JVM在后台自动发起和自动完成的。在用户不可见的情况下，把用户正常的工作线程全部停掉。","parent":"0aebcd86c053b5b1","children":[]},{"id":"4cbae6c489739bd2","title":"开发中不要用System.gc() ，会导致Stop-the-World的发生。","parent":"0aebcd86c053b5b1","children":[]}]}],"parent":"45a5036cac1c2302"},{"id":"8f9725cbe6399d9b","title":"垃圾回收的并行与并发","children":[{"id":"158b18916357e4df","title":"并发","image":{"w":251,"url":"https://cdn.processon.com/5ff459d17d9c08056417cc78?e=1609852897&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:9zOunyKu3mq6Tq91N_stYDt6mUY=","h":153.5},"parent":"8f9725cbe6399d9b","children":[{"id":"df2bfc6a22d1541e","title":"在操作系统中，是指一个时间段中有几个程序都处于已启动运行到运行完毕之间，且这几个程序都是在同一个处理器上运行","parent":"158b18916357e4df","children":[]},{"id":"8b4b435fd9d8a316","title":"并发不是真正意义上的“同时进行”，只是CPU把一个时间段划分成几个时间片段（时间区间），然后在这几个时间区间之间来回切换","parent":"158b18916357e4df","children":[]},{"id":"19f560f19fbb60aa","title":"由于CPU处理的速度非常快，只要时间间隔处理得当，即可让用户感觉是多个应用程序同时在进行","parent":"158b18916357e4df","children":[]}]},{"id":"6c6a6b536588bdc1","title":"并行","image":{"w":245,"url":"https://cdn.processon.com/5ff45a4f5653bb4ea20bd5d0?e=1609853023&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:LIkAKPb93QMi5U2POD16th7KkSc=","h":142.5},"parent":"8f9725cbe6399d9b","children":[{"id":"ea90bb90aced2c0d","title":"当系统有一个以上CPU时，当一个CPU执行一个进程时，另一个CPU可以执行另一个进程，两个进程互不抢占CPU资源，可以同时进行，我们称之为并行（Parallel）","parent":"6c6a6b536588bdc1","children":[]},{"id":"51b65640eb331c13","title":"决定并行的因素不是CPU的数量，而是CPU的核心数量，比如一个CPU多个核也可以并行","parent":"6c6a6b536588bdc1","children":[]}]},{"id":"b2ff71dd5aa899b6","title":"并发与并行的对比","parent":"8f9725cbe6399d9b","children":[{"id":"2b11dfc005185f37","title":"并发，指的是多个事情，在同一时间段内同时发生。","children":[],"parent":"b2ff71dd5aa899b6"},{"id":"9101256fcf801ef4","title":"并行，指的是多个事情，在同一时间点上同时发生。","children":[],"parent":"b2ff71dd5aa899b6"},{"id":"b1c5e37f4e78f137","title":"并发的多个任务之间是互相抢占资源的。并行的多个任务之间不互相抢占资源。","children":[],"parent":"b2ff71dd5aa899b6"},{"id":"93c35a314d13d71e","title":"只有在多CPU或者一个CPU多核的情况中，才会发生并行。否则，看似同时发生的事情，其实都是并发执行的。","children":[],"parent":"b2ff71dd5aa899b6"}]},{"id":"d3e616e1f97f4c0c","title":"垃圾回收的并行与串行","image":{"w":517,"url":"https://cdn.processon.com/5ff45b53e401fd661a16e9bb?e=1609853283&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:_eZ0vdrplWRFop4W1Qusi1TMCLw=","h":149},"children":[{"id":"34ff0ae60fbe20da","title":"并行（Parallel）","parent":"d3e616e1f97f4c0c","children":[{"id":"ce3c887ede6f8155","title":"指多条垃圾收集线程并行工作，但此时用户线程仍处于等待状态。","children":[],"parent":"34ff0ae60fbe20da"}]},{"id":"821765451bc0013f","title":"串行（Serial）","parent":"d3e616e1f97f4c0c","children":[{"id":"9eee2154801a7a48","title":"相较于并行概念，单线程执行。","children":[],"parent":"821765451bc0013f"},{"id":"9d070f98d2280ce6","title":"如果内存不够，则程序暂停，启动JVM垃圾回收器进行垃圾回收（单线程）","children":[],"parent":"821765451bc0013f"}]},{"id":"52644221049abcec","title":"垃圾回收的并发（Concurrent）","image":{"w":324.5,"url":"https://cdn.processon.com/5ff45bd5f346fb340de895fd?e=1609853413&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:hIwPMd6nR0ReO5CYO8lm5LBj6Vk=","h":153},"children":[{"id":"08ba61fa47f58f8f","title":"指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行），垃圾回收线程在执行时不会停顿用户程序的运行。","parent":"52644221049abcec","children":[]},{"id":"9d1cea613445b9e8","title":"比如用户程序在继续运行，而垃圾收集程序线程运行于另一个CPU上；","parent":"52644221049abcec","children":[]},{"id":"53d4ef1c469cb0c4","title":"典型垃圾回收器：CMS、G1","parent":"52644221049abcec","children":[]}],"parent":"d3e616e1f97f4c0c"}],"parent":"8f9725cbe6399d9b"}],"parent":"45a5036cac1c2302"},{"id":"53ac6632f36e1fe0","title":"安全点与安全区域","parent":"45a5036cac1c2302","children":[{"id":"99fa2f921d96e0e5","title":"安全点（Safepoint）","children":[{"id":"9fd6cd8340a549b2","title":"程序执行时并非在所有地方都能停顿下来开始GC，只有在特定的位置才能停顿下来开始GC，这些位置称为“安全点（Safepoint）”。","parent":"99fa2f921d96e0e5","children":[]},{"id":"eb1cc143386d02eb","title":"Safe Point的选择很重要，如果太少可能导致GC等待的时间太长，如果太频繁可能导致运行时的性能问题。","parent":"99fa2f921d96e0e5","children":[]},{"id":"761b2ee34b9937c5","title":"大部分指令执行时间都非常短暂，通常会根据“是否具有让程序长时间执行的特征”为标准。如：选择一些执行时间较长的指令作为Safe Point，如方法调用、循环跳转和异常跳转等。","parent":"99fa2f921d96e0e5","children":[]}],"parent":"53ac6632f36e1fe0"},{"id":"ab0a16640c287fbd","title":"安全点的中断实现方式","children":[{"id":"df58e97f08e334d2","title":"如何在GC发生时，检查所有线程都跑到最近的安全点停顿下来呢？","parent":"ab0a16640c287fbd","children":[]},{"id":"0f2b457cbe470122","title":"主动式中断：设置一个中断标志，各个线程运行到Safe Point的时候主动轮询这个标志，如果中断标志为真，则将自己进行中断挂起。（有轮询的机制）","parent":"ab0a16640c287fbd","children":[]}],"parent":"53ac6632f36e1fe0"},{"id":"4c6041d37f64634c","title":"安全区域（Safe Region）","parent":"53ac6632f36e1fe0","children":[{"id":"083bd3af857b6283","title":"Safepoint 机制保证了程序执行时，在不太长的时间内就会遇到可进入GC的Safepoint。但是，程序“不执行”的时候呢？","children":[],"parent":"4c6041d37f64634c"},{"id":"f45e93409ed092a2","title":"例如线程处于Sleep状态或Blocked 状态，这时候线程无法响应JVM的中断请求，“走”到安全点去中断挂起，JVM也不太可能等待线程被唤醒。","parent":"4c6041d37f64634c","children":[]},{"id":"4b7467a698768056","title":"对于这种情况，就需要安全区域（Safe Region）来解决。","children":[],"parent":"4c6041d37f64634c"},{"id":"21c18cd631c6e0ac","title":"安全区域是指在一段代码片段中，对象的引用关系不会发生变化，在这个区域中的任何位置开始GC都是安全的。我们也可以把Safe Region看做是被扩展了的Safepoint。","children":[],"parent":"4c6041d37f64634c"}]},{"id":"07d2f3e60a65516a","title":"安全区域的执行流程","children":[{"id":"859121ac8504a65f","title":"当线程运行到Safe Region的代码时，首先标识已经进入了Safe Region，如果这段时间内发生GC，JVM会忽略标识为Safe Region状态的线程","parent":"07d2f3e60a65516a","children":[]},{"id":"20a69672674fff4e","title":"当线程即将离开Safe Region时，会检查JVM是否已经完成GC，如果完成了，则继续运行，否则线程必须等待直到收到可以安全离开Safe Region的信号为止；","children":[],"parent":"07d2f3e60a65516a"}],"parent":"53ac6632f36e1fe0"}]},{"id":"83c3656e3c3e5aee","title":"既偏门又高频面试题：强引用、软引用、弱引用、虚引用有什么区别？具体使用场景是什么？","parent":"45a5036cac1c2302","children":[{"id":"25120099bf10169a","title":"我们希望能描述这样一类对象：当内存空间还足够时，则能保留在内存中；如果内存空间在进行垃圾收集后还是很紧张，则可以抛弃这些对象。","children":[],"parent":"83c3656e3c3e5aee"},{"id":"30018e7635447ded","title":"这4种引用强度依次逐渐减弱。除强引用外，其他3种引用均可以在java.lang.ref包中找到。如图，显示了这3种引用类型对应的类。Reference子类中只有终结器引用是包内可见，其他3种引用类型均为public，可以在应用程序中直接使用","parent":"83c3656e3c3e5aee","children":[],"image":{"w":604,"h":365,"url":"https://cdn.processon.com/5ff470b607912930e01c0500?e=1609858758&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:OELdmevDcKa7ETByr5W0-o2D8wI="}},{"id":"27315a253f5ad87f","title":"Java 中都有哪些引用类型？","children":[{"id":"12ae8a92dbac72dd","title":"强引用（StrongReference）：发生 gc 的时候不会被回收","style":{"font-weight":"bold"},"children":[{"id":"105ec75a26fbaa99","title":"最传统的“引用”的定义，是指在程序代码之中普遍存在的引用赋值，即类似“object obj=new Object()”这种引用关系。无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。","parent":"12ae8a92dbac72dd","children":[]},{"id":"6a145686ca7e5580","title":"对于一个普通对象，如果没有其他的引用关系，只要超过了引用的作用域或者显式地将相应（强）引用赋值为null，就是可以当做垃圾被收集了，当然具体回收时机还是要看垃圾收集策略。","parent":"12ae8a92dbac72dd","children":[]},{"id":"8a8f4efe1fa05d99","title":"相对的，软引用、弱引用和虚引用的对象是软可触及、弱可触及和虚可触及的，在一定条件下，都是可以被回收的。所以，强引用是造成Java内存泄漏的主要原因之一。","children":[],"parent":"12ae8a92dbac72dd"}],"parent":"27315a253f5ad87f"},{"id":"7db6fb1192e7e866","title":"软引用（SoftReference）：内存不足即回收","style":{"font-weight":"bold"},"children":[{"id":"e3fab24c3d38ea0d","title":"用来描述一些还有用，但非必需的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。注意，这里的第一次回收是不可达的对象","children":[],"parent":"7db6fb1192e7e866"},{"id":"af9e218be5668377","title":"软引用通常用来实现内存敏感的缓存。比如：高速缓存就有用到软引用。如果还有空闲内存，就可以暂时保留缓存，当内存不足时清理掉，这样就保证了使用缓存的同时，不会耗尽内存。","children":[],"parent":"7db6fb1192e7e866"},{"id":"7758b0a7f9b4aa50","title":"垃圾回收器在某个时刻决定回收软可达的对象时，会清理软引用，并可选地把引用存放到一个引用队列（Reference Queue）。","parent":"7db6fb1192e7e866","children":[]},{"id":"1a118e69d5e50a49","title":"概括：内存足够：不会回收软引用可达对象。内存不够：会回收软引用可达对象","children":[],"parent":"7db6fb1192e7e866"}],"parent":"27315a253f5ad87f"},{"id":"98251bb6436c522b","title":"弱引用（WeakReference）：发现即回收","style":{"font-weight":"bold"},"parent":"27315a253f5ad87f","children":[{"id":"c10f0ad1cd785496","title":"弱引用也是用来描述那些非必需对象，只被弱引用关联的对象只能生存到下一次垃圾收集发生为止。在系统GC时，只要发现弱引用，不管系统堆空间使用是否充足，都会回收掉只被弱引用关联的对象。","children":[],"parent":"98251bb6436c522b"},{"id":"24a876dbafd6545d","title":"由于垃圾回收器的线程通常优先级很低，因此，并不一定能很快地发现持有弱引用的对象。在这种情况下，弱引用对象可以存在较长的时间。","children":[],"parent":"98251bb6436c522b"},{"id":"874e803ea31167f1","title":"弱引用和软引用一样，在构造弱引用时，也可以指定一个引用队列，当弱引用对象被回收时，就会加入指定的引用队列，通过这个队列可以跟踪对象的回收情况。","children":[],"parent":"98251bb6436c522b"},{"id":"67cbd58de92444c2","title":"软引用、弱引用都非常适合来保存那些可有可无的缓存数据。如果这么做，当系统内存不足时，这些缓存数据会被回收，不会导致内存溢出。而当内存资源充足时，这些缓存数据又可以存在相当长的时间，从而起到加速系统的作用。","children":[],"parent":"98251bb6436c522b"},{"id":"a7dfbcabe43c4553","title":"弱引用对象与软引用对象的最大不同就在于，当GC在进行回收时，需要通过算法检查是否回收软引用对象，而对于弱引用对象，GC总是进行回收。弱引用对象更容易、更快被GC回收。","children":[],"parent":"98251bb6436c522b"},{"id":"adfe7433069d73e9","title":"面试题：你开发中使用过WeakHashMap吗？","children":[{"id":"0b00fcb360e51754","title":"WeakHashMap用来存储图片信息，可以在内存不足时，及时回收，避免OOM","parent":"adfe7433069d73e9","children":[]}],"parent":"98251bb6436c522b"}]},{"id":"3f951052b1c1cd17","title":"虚引用（PhantomReference）：对象回收跟踪","style":{"font-weight":"bold"},"children":[{"id":"243ad40dc84b3a77","title":"一个对象是否有虚引用的存在，完全不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它和没有引用几乎是一样的，随时都可能被垃圾回收器回收。","parent":"3f951052b1c1cd17","children":[]},{"id":"5373b2ffe377bc09","title":"它不能单独使用，也无法通过虚引用来获取被引用的对象。当试图通过虚引用的get()方法取得对象时，总是null ，即通过虚引用无法获取到我们的数据","parent":"3f951052b1c1cd17","children":[]},{"id":"d332aa97ce318cf4","title":"为一个对象设置虚引用关联的唯一目的在于跟踪垃圾回收过程。比如：能在这个对象被收集器回收时收到一个系统通知。","parent":"3f951052b1c1cd17","children":[]},{"id":"03e544464ae3fe09","title":"虚引用必须和引用队列一起使用。虚引用在创建时必须提供一个引用队列作为参数。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象后，将这个虚引用加入引用队列，以通知应用程序对象的回收情况。","children":[],"parent":"3f951052b1c1cd17"},{"id":"f4261a47d3f087d2","title":"由于虚引用可以跟踪对象的回收时间，因此，也可以将一些资源释放操作放置在虚引用中执行和记录。","parent":"3f951052b1c1cd17","children":[]},{"id":"3ddb31fbdff059e4","title":"案例","parent":"3f951052b1c1cd17","children":[{"id":"a1a008df590493ab","title":"第一次尝试获取虚引用的值，发现无法获取，这是因为虚引用是无法直接获取对象的值，然后进行第一次GC，因为会调用finalize方法，将对象复活了，所以对象没有被回收","parent":"3ddb31fbdff059e4","children":[]},{"id":"aa98273f9252d379","title":"但是调用第二次GC操作的时候，因为finalize方法只能执行一次，所以就触发了GC操作，将对象回收了，同时将会触发第二个操作就是将待回收的对象存入到引用队列中。","parent":"3ddb31fbdff059e4","children":[]}]}],"parent":"27315a253f5ad87f"},{"id":"e995eca36ed481a2","title":"终结器引用","parent":"27315a253f5ad87f","children":[{"id":"5cd8288b82426b6a","title":"用于实现对象的finalize() 方法","parent":"e995eca36ed481a2","children":[]},{"id":"7bb6db9859e1f811","title":"无需手动编码，其内部配合引用队列使用","children":[],"parent":"e995eca36ed481a2"},{"id":"955d69287ebff277","title":"在GC时，终结器引用入队。由Finalizer线程通过终结器引用找到被引用对象调用它的finalize()方法，第二次GC时才回收被引用的对象","children":[],"parent":"e995eca36ed481a2"}]}],"parent":"83c3656e3c3e5aee","icons":[{"index":"9","text":"&#xe6c6","color":"rgb(51, 51, 51)","name":"face"}]}],"icons":[{"index":"9","text":"&#xe6c6","color":"rgb(51, 51, 51)","name":"face"}]}],"parent":"root","collapsed":true},{"id":"14c35897071d66b4","title":"垃圾回收器","lineStyle":{"randomLineColor":"rgb(0, 94, 170)"},"parent":"root","children":[{"id":"c0b474d99af4f7df","title":"垃圾回收器分类","children":[{"id":"0ea4262e4ff29780","title":"按线程数分（垃圾回收线程数），可以分为串行垃圾回收器和并行垃圾回收器","image":{"w":436,"h":300,"url":"https://cdn.processon.com/5ff50de97d9c08056418608c?e=1609899001&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:JPtYhCRLkfvnQnphuYNVKbRcYf0="},"parent":"c0b474d99af4f7df","children":[{"id":"c4603397c55c9b84","title":"串行回收指的是在同一时间段内只允许有一个CPU用于执行垃圾回收操作，此时工作线程被暂停，直至垃圾收集工作结束。","parent":"0ea4262e4ff29780","children":[]},{"id":"3841d9c69003ca61","title":"并行收集可以运用多个CPU同时执行垃圾回收，因此提升了应用的吞吐量，不过并行回收仍然与串行回收一样，采用独占式，使用了“Stop-the-World”机制。","parent":"0ea4262e4ff29780","children":[]},{"id":"bfd4a1386b9dcdfb","title":"适用场景","children":[{"id":"ff8748bd009326bc","title":"在诸如单CPU处理器或者较小的应用内存等硬件平台不是特别优越的场合，串行回收器的性能表现可以超过并行回收器和并发回收器。所以，串行回收默认被应用在客户端的Client模式下的JVM中","children":[],"parent":"bfd4a1386b9dcdfb"},{"id":"ceb3a9d25ecfded8","title":"在并发能力比较强的CPU上，并行回收器产生的停顿时间要短于串行回收器","parent":"bfd4a1386b9dcdfb","children":[]}],"parent":"0ea4262e4ff29780"}]},{"id":"961ad00d8753626e","title":"按照工作模式分，可以分为并发式垃圾回收器和独占式垃圾回收器","parent":"c0b474d99af4f7df","children":[{"id":"de53d05a011ac7bd","title":"并发式垃圾回收器与应用程序线程交替工作，以尽可能减少应用程序的停顿时间","children":[],"parent":"961ad00d8753626e"},{"id":"5ac142e2fd983251","title":"独占式垃圾回收器（Stop the World）一旦运行，就停止应用程序中的所有用户线程，直到垃圾回收过程完全结束","children":[],"parent":"961ad00d8753626e"}],"image":{"w":446,"h":213,"url":"https://cdn.processon.com/5ff50e9b07912930e01c6178?e=1609899179&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:gYFmhQmfe5NaLSli2_GySJgI2dc="}},{"id":"27b3e6ee71ed3ed3","title":"按碎片处理方式分，可分为压缩式垃圾回收器和非压缩式垃圾回收器。","children":[{"id":"20be1e49fa209c9f","title":"压缩式垃圾回收器会在回收完成后，对存活对象进行压缩整理，消除回收后的碎片，分配对象空间使用指针碰撞","parent":"27b3e6ee71ed3ed3","children":[]},{"id":"21e5d66d481215de","title":"非压缩式的垃圾回收器不进行这步操作，分配对象空间使用空闲列表","children":[],"parent":"27b3e6ee71ed3ed3"}],"parent":"c0b474d99af4f7df"},{"id":"8f0b17575535ecb4","title":"按工作的内存区间分，又可分为年轻代垃圾回收器和老年代垃圾回收器。","parent":"c0b474d99af4f7df","children":[]}],"parent":"14c35897071d66b4"},{"id":"be821a33a2775433","title":"评估 GC 的性能指标","parent":"14c35897071d66b4","children":[{"id":"3ccaa8a8fdd2e932","title":"吞吐量：运行用户代码的时间占总运行时间的比例（总运行时间 = 程序的运行时间 + 内存回收的时间）","children":[{"id":"2bf7f8997faae882","title":"虚拟机总共运行了100分钟，其中垃圾收集花掉1分钟，那吞吐量就是99%","children":[],"parent":"3ccaa8a8fdd2e932"},{"id":"d1dabc1ed20a0169","title":"吞吐量优先，意味着在单位时间内，STW的时间最短","parent":"3ccaa8a8fdd2e932","children":[]},{"id":"cd3d91ea45a8b401","title":"高吞吐量较好因为这会让应用程序的最终用户感觉只有应用程序线程在做“生产性”工作。直觉上，吞吐量越高程序运行越快","children":[],"parent":"3ccaa8a8fdd2e932"},{"id":"8e4aa28b0245a9a3","title":"因为如果选择以吞吐量优先，那么必然需要降低内存回收的执行频率，但是这样会导致GC需要更长的暂停时间来执行内存回收。","parent":"3ccaa8a8fdd2e932","children":[]},{"id":"ed8230b5553cd530","title":"若吞吐量低，50%用于执行程序，50%用于垃圾回收，程序执行会很久","parent":"3ccaa8a8fdd2e932","children":[]}],"parent":"be821a33a2775433"},{"id":"68ff1c3ad60ba2d7","title":"暂停时间：是指一个时间段内应用程序线程暂停，让GC线程执行的状态","children":[{"id":"ae2c6b2a5ebb6edc","title":"GC期间100毫秒的暂停时间意味着在这100毫秒期间内没有应用程序线程是活动的","parent":"68ff1c3ad60ba2d7","children":[]},{"id":"9075e87c6e468c53","title":"暂停时间优先，意味着尽可能让单次STW的时间最短","parent":"68ff1c3ad60ba2d7","children":[]},{"id":"608a007d0fe4744e","title":"低暂停时间（低延迟）较好，因为从最终用户的角度来看，不管是GC还是其他原因导致一个应用被挂起始终是不好的。这取决于应用程序的类型，有时候甚至短暂的200毫秒暂停都可能打断终端用户体验。因此，具有较低的暂停时间是非常重要的，特别是对于一个交互式应用程序。","parent":"68ff1c3ad60ba2d7","children":[]},{"id":"bb6879b3b74fcdab","title":"如果选择以低延迟优先为原则，那么为了降低每次执行内存回收时的暂停时间，也只能频繁地执行内存回收，但这又引起了年轻代内存的缩减和导致程序吞吐量的下降。","parent":"68ff1c3ad60ba2d7","children":[]}],"parent":"be821a33a2775433"},{"id":"b45129ff0617c9d9","title":"一个GC算法只可能针对两个目标之一（即只专注于较大吞吐量或最小暂停时间），或尝试找到一个二者的折衷。现在标准：在最大吞吐量优先的情况下，降低停顿时间","parent":"be821a33a2775433","children":[]},{"id":"7e72a8d71ddcfc36","title":"内存占用：Java堆区所占的内存大小。","children":[],"parent":"be821a33a2775433"},{"id":"81962bbafb64240f","title":"垃圾收集开销：垃圾收集所用时间与总运行时间的比例。","children":[],"parent":"be821a33a2775433"},{"id":"6a721f8b7a9c99a1","title":"收集频率：相对于应用程序的执行，收集操作发生的频率。","children":[],"parent":"be821a33a2775433"},{"id":"38bc8f4225bbef92","title":"快速：一个对象从诞生到被回收所经历的时间。","parent":"be821a33a2775433","children":[]}]},{"id":"9aa884620c09","title":"<b>说一下 JVM 有哪些垃圾回收器？</b><br>","children":[],"parent":"14c35897071d66b4","icons":[{"index":"9","text":"&#xe6c6","color":"rgb(51, 51, 51)","name":"face"}]},{"id":"d6f07cefe8ef1cc1","title":"7种经典的垃圾收集器","parent":"14c35897071d66b4","children":[{"id":"c0bdcabef4344ab9","title":"串行回收器：Serial、Serial old","children":[],"parent":"d6f07cefe8ef1cc1"},{"id":"355af8a4e23ccf4a","title":"并行回收器：ParNew、Parallel Scavenge、Parallel old","children":[],"parent":"d6f07cefe8ef1cc1"},{"id":"7e5ffcc990e5f690","title":"并发回收器：CMS、G1","children":[],"parent":"d6f07cefe8ef1cc1"},{"id":"4f3191f2f9db9572","title":"分代","parent":"d6f07cefe8ef1cc1","children":[],"image":{"w":565,"h":147,"url":"https://cdn.processon.com/5ff5571fe401fd661a18afd2?e=1609917743&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:qz__jRMpm0Dgcq7bRzJOvy5kaMA="}},{"id":"b7494a49a005a24f","title":"如何选择垃圾回收器","parent":"d6f07cefe8ef1cc1","children":[{"id":"43e3f2bab1923309","title":"针对不同的场景，提供不同的垃圾收集器，提高垃圾收集的性能。","children":[],"parent":"b7494a49a005a24f"}]},{"id":"4d740c09cd245d97","title":"如何查看默认垃圾收集器","parent":"d6f07cefe8ef1cc1","children":[{"id":"ba3c7d7dd50a0bfd","title":"-XX:+PrintCommandLineFlags：查看命令行相关参数（包含使用的垃圾收集器）","children":[],"parent":"4d740c09cd245d97"},{"id":"237507e5d7e6ec2c","title":"使用命令行指令：jinfo -flag 相关垃圾回收器参数 进程ID","children":[],"parent":"4d740c09cd245d97"}]}],"image":{"w":604,"h":391,"url":"https://cdn.processon.com/5ff5569d5653bb4ea20da896?e=1609917614&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:5gEyXZjjOXPNVxR_GbE0of7HZYM="}},{"id":"8dc8b4a0493f8a64","title":"串行垃圾回收器","parent":"14c35897071d66b4","children":[{"id":"04df2967f2fbedd5","title":"Serial  GC（年轻代&nbsp; Client模式）：复制算法、串行回收、\"Stop-the-World\"机制","children":[],"parent":"8dc8b4a0493f8a64"},{"id":"9c0543b77c31e4d2","title":"Serial Old GC（老年代 Client模式）：标记-压缩算法、串行回收和\"Stop the World\"机制","parent":"8dc8b4a0493f8a64","children":[{"id":"48231bc06ba7ab07","title":"Server模式下","children":[],"parent":"9c0543b77c31e4d2"},{"id":"c93f7f8aef6d0ee9","title":"与新生代的Parallel Scavenge配合使用","children":[],"parent":"9c0543b77c31e4d2"},{"id":"8d10aaf53b1192f8","title":"作为老年代CMS收集器的后备垃圾收集方案","parent":"9c0543b77c31e4d2","children":[]}]},{"id":"838ef73acbeaf231","title":"特点","image":{"w":597,"h":183,"url":"https://cdn.processon.com/5ff559c25653bb4ea20dbb7d?e=1609918418&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:XaX9BlKiO9WDsLhply_PMb6DGhk="},"children":[{"id":"ba665bf6a3367ebd","title":"它只会使用一个CPU或一条收集线程去完成垃圾收集工作","children":[{"id":"2877a1b3d9781e32","title":"限定单个CPU环境：省去切换线程的开销","parent":"ba665bf6a3367ebd","children":[]}],"parent":"838ef73acbeaf231"},{"id":"ca88af21efdd8c89","title":"在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束（STW）","parent":"838ef73acbeaf231","children":[]}],"parent":"8dc8b4a0493f8a64"},{"id":"0f9b005fcb9c8aaa","title":"-XX:+UseSerialGC：指定年轻代和老年代都使用串行收集器","parent":"8dc8b4a0493f8a64","children":[]}]},{"id":"fb39b14db5db23d9","title":"ParNew 回收器：年轻代（Parallel New）复制、并行、STW","children":[{"id":"b37088b237023d50","title":"区别Serial GC：是否并行","children":[],"parent":"fb39b14db5db23d9"},{"id":"4e160df0dfbbfa6c","title":"新生代：回收次数频繁，使用并行方式高效","children":[],"parent":"fb39b14db5db23d9"},{"id":"52d432ad18b8a5a5","title":"老年代：回收次数少，使用串行方式节省资源（切换线程）","parent":"fb39b14db5db23d9","children":[]},{"id":"0bf6b7cd76d8d29b","title":"适用范围","parent":"fb39b14db5db23d9","children":[{"id":"c4abc19da416cd8a","title":"ParNew收集器运行在多CPU的环境下，可以充分利用多CPU、多核心等物理硬件资源优势，可以更快速地完成垃圾收集，提升程序的吞吐量。","children":[],"parent":"0bf6b7cd76d8d29b"},{"id":"0d14e4a3a250cc34","title":"单CPU：Serial GC","children":[],"parent":"0bf6b7cd76d8d29b"}]},{"id":"73e1866a96dfee0b","title":"设置 ParNew 垃圾回收器","children":[{"id":"8a329648dfe1b97c","title":"-XX:+UseParNewGC：指定使用ParNew收集器执行内存回收任务。它表示年轻代使用并行收集器，不影响老年代","parent":"73e1866a96dfee0b","children":[]},{"id":"126a778652db9c6a","title":"-XX:ParallelGCThreads：限制线程数量，默认开启和CPU相同线程数","children":[],"parent":"73e1866a96dfee0b"}],"parent":"fb39b14db5db23d9"}],"parent":"14c35897071d66b4","image":{"w":624,"h":182,"url":"https://cdn.processon.com/5ff562bef346fb340deab941?e=1609920719&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:Ogvywr3wfPyjxOSmqipHOQ6oZ8A="}},{"id":"9799e44a7febeab0","title":"Parallel Scavenge 回收器：吞吐量优先、复制并行STW、server模式、Java8默认","parent":"14c35897071d66b4","children":[{"id":"9b8a0be084e7a5a9","title":"区别ParNew","children":[{"id":"a74c363f0ec41e20","title":"Parallel Scavenge收集器的目标：达到一个可控制的吞吐量","children":[],"parent":"9b8a0be084e7a5a9"},{"id":"ded81f557443eb28","title":"自适应调节策略","children":[],"parent":"9b8a0be084e7a5a9"}],"parent":"9799e44a7febeab0"},{"id":"c5e81e9e8e612b0d","title":"适用范围","parent":"9799e44a7febeab0","children":[{"id":"88299fa4569cc152","title":"高吞吐量可以高效率利用CPU时间，尽快完成程序的运算任务，主要适用于后台运算而不需要太多交互任务。因此，常见在服务器环境中使用。例如，执行批量处理、订单处理、工资支付、科学计算的应用程序。","parent":"c5e81e9e8e612b0d","children":[]}]},{"id":"6ce47ccd198bc960","title":"Parallel Old GC：标记-压缩、并行、STW、Java8默认","image":{"w":613,"url":"https://cdn.processon.com/5ff5658f07912930e01e02cf?e=1609921439&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:bm4lC3efHu62s4D6QHI202lEUMs=","h":187},"parent":"9799e44a7febeab0","children":[]},{"id":"f5fa380035e26988","title":"Parallel Scavenge 回收器参数设置","children":[{"id":"e4f2c52f4977b6c2","title":"-XX:+UseParallelGC ：指定年轻代使用Parallel并行收集器执行内存回收任务","parent":"f5fa380035e26988","children":[]},{"id":"925e744aca4f1cf4","title":"-XX:+UseParallelOldGC：指定老年代使用并行回收收集器","parent":"f5fa380035e26988","children":[]},{"id":"7d2b117b0d4dff62","title":"默认jdk8开启。默认开启一个，另一个也会被开启。（互相激活）","children":[],"parent":"f5fa380035e26988"},{"id":"73ac9553d2f360a2","title":"-XX:ParallelGCThreads：设置年轻代并行收集器的线程数","children":[{"id":"eea663bb27cd0ec4","title":"默认情况下，当CPU数量小于8个，ParallelGCThreads的值等于CPU数量","parent":"73ac9553d2f360a2","children":[]},{"id":"47f60d728e85a00c","title":"当CPU数量大于8个，ParallelGCThreads的值等于3+[5*CPU_Count]/8]","parent":"73ac9553d2f360a2","children":[]},{"id":"89f88bf45869b55f","title":"避免过多的线程数影响垃圾收集性能","children":[],"parent":"73ac9553d2f360a2"}],"parent":"f5fa380035e26988"},{"id":"f4f86e6ae0a356d9","title":"-XX:MaxGCPauseMillis：设置垃圾收集器最大停顿时间（即STW的时间）单位：毫秒","parent":"f5fa380035e26988","children":[{"id":"ed0b1c27fdc1b456","title":"为了尽可能地把停顿时间控制在XX:MaxGCPauseMillis 以内，收集器在工作时会调整Java堆大小或者其他一些参数","parent":"f4f86e6ae0a356d9","children":[]},{"id":"929efd25f69fc603","title":"对于用户来讲，停顿时间越短体验越好。但是在服务器端，我们注重高并发，整体的吞吐量。所以服务器端适合Parallel，进行控制。该参数使用需谨慎","parent":"f4f86e6ae0a356d9","children":[]}]},{"id":"d83871f7671c2ac5","title":"-XX:GCTimeRatio：垃圾收集时间占总时间的比例，用于衡量吞吐量的大小","parent":"f5fa380035e26988","children":[{"id":"a4becca13af1d443","title":"取值范围(0, 100)。默认值99，也就是垃圾回收时间占比不超过1。等于 1 / (N+1) ","parent":"d83871f7671c2ac5","children":[]},{"id":"f9c8cb5fcbd63756","title":"与前一个-XX:MaxGCPauseMillis参数有一定矛盾性","children":[],"parent":"d83871f7671c2ac5"},{"id":"21c1d82b2d31cb74","title":"STW暂停时间越长，Radio参数就容易超过设定的比例","children":[],"parent":"d83871f7671c2ac5"}]},{"id":"e52418a63606f485","title":"-XX:+UseAdaptiveSizePolicy ：设置Parallel Scavenge收集器具有自适应调节策略","parent":"f5fa380035e26988","children":[{"id":"a23dd1a9c808deb2","title":"在这种模式下，年轻代的大小、Eden和Survivor的比例、晋升老年代的对象年龄等参数会被自动调整，来达到在堆大小、吞吐量和停顿时间之间的平衡点。","children":[],"parent":"e52418a63606f485"},{"id":"538f842617954503","title":"在手动调优比较困难的场合，可以直接使用这种自适应方式，仅指定虚拟机的最大堆、目标的吞吐量（GCTimeRatio）和停顿时间（MaxGCPauseMillis），让虚拟机自己完成调优工作","parent":"e52418a63606f485","children":[]}]}],"parent":"9799e44a7febeab0"}]},{"id":"333c9b468114","title":"详细介绍一下 CMS 垃圾回收器？","style":{"font-weight":"bold"},"children":[],"parent":"14c35897071d66b4","icons":[{"index":"9","text":"&#xe6c6","color":"rgb(51, 51, 51)","name":"face"}]},{"id":"42bddf8d928cdfd3","title":"CMS 回收器（Concurrent-Mark-Sweep）：标记-清除、并发、低延迟（STW）、老年代、客户端","children":[{"id":"471d4adf991763fb","title":"第一次实现了让垃圾收集线程与用户线程同时工作","parent":"42bddf8d928cdfd3","children":[]},{"id":"8f246801189b80f8","title":"匹配：ParNew、Serial GC 无法匹配：Parallel Scavenge","children":[],"parent":"42bddf8d928cdfd3"},{"id":"7b877811f58d6870","title":"CMS 工作原理","image":{"w":608,"url":"https://cdn.processon.com/5ff56b6107912930e01e2790?e=1609922929&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:wzoN6OcX2BGkKOMoqeLwX7N5a2o=","h":187},"children":[{"id":"843806408edcadaa","title":"初始标记（Initial-Mark）阶段：STW","children":[{"id":"0ef8774ece954ed1","title":"程序中所有的工作线程都将会因为“Stop-the-World”机制而出现短暂的暂停，这个阶段的主要任务仅仅只是标记出GC Roots能直接关联到的对象。一旦标记完成之后就会恢复之前被暂停的所有应用线程。由于直接关联对象比较小，所以这里的速度非常快。","parent":"843806408edcadaa","children":[]}],"parent":"7b877811f58d6870"},{"id":"263ea2cf945d71fd","title":"并发标记（Concurrent-Mark）阶段","parent":"7b877811f58d6870","children":[{"id":"c696713e50e617d0","title":"从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。","parent":"263ea2cf945d71fd","children":[]}]},{"id":"9b464ebf3cbfb40b","title":"重新标记（Remark）阶段：STW","parent":"7b877811f58d6870","children":[{"id":"196b698e4a8345f3","title":"由于在并发标记阶段中，程序的工作线程会和垃圾收集线程同时运行或者交叉运行，因此为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间通常会比初始标记阶段稍长一些，并且也会导致“Stop-the-World”的发生，但也远比并发标记阶段的时间短","children":[],"parent":"9b464ebf3cbfb40b"}]},{"id":"366e9b5b2ae7eb06","title":"并发清除（Concurrent-Sweep）阶段","parent":"7b877811f58d6870","children":[{"id":"ace6a6e05b4ef53b","title":"此阶段清理删除掉标记阶段判断的已经死亡的对象，释放内存空间。由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的","parent":"366e9b5b2ae7eb06","children":[]}]}],"parent":"42bddf8d928cdfd3"},{"id":"9f23b3bba6406242","title":"CMS 特点与弊端分析","parent":"42bddf8d928cdfd3","children":[{"id":"a968c695dd7a02a4","title":"最耗时：并发标记、并发清除阶段都不需要暂停工作，所以整体的回收是低停顿的","children":[],"parent":"9f23b3bba6406242"},{"id":"14c57f66946c5849","title":"由于在垃圾收集阶段用户线程没有中断，所以在CMS回收过程中，还应该确保应用程序用户线程有足够的内存可用--&gt;堆内存使用率达到某一阈值时，便开始进行回收","children":[],"parent":"9f23b3bba6406242"},{"id":"362722902798f841","title":"CMS运行期间预留的内存无法满足程序需求：出现“Concurrent Mode Failure”失败，这时虚拟机将启动后备预案：临时启用Serial old收集器来重新进行老年代的垃圾收集，这样停顿时间更长","parent":"9f23b3bba6406242","children":[]},{"id":"16714536ca6a46ec","title":"并发清楚阶段：标记-清除算法、内存碎片、×指针碰撞技术、空闲列表执行内存分配","children":[],"parent":"9f23b3bba6406242"},{"id":"042d4e87f83c4d30","title":"未用标签-压缩算法原因：","parent":"9f23b3bba6406242","children":[{"id":"1829770dc183a784","title":"并发清除时，用Compact整理内存，原来的用户线程使用的内存无法使用","children":[],"parent":"042d4e87f83c4d30"},{"id":"c7ab5c322f4d2a2e","title":"需要 STW","children":[],"parent":"042d4e87f83c4d30"}]},{"id":"5266d7e79e02c87a","title":"缺点总结","children":[{"id":"84d68cf07da5fe1e","title":"内存碎片--&gt;分配大对象--&gt;提前触发 Full GC","parent":"5266d7e79e02c87a","children":[]},{"id":"608699bdd6aa7613","title":"占用一部分线程--&gt;导致应用程序变慢，总吞吐量降低","children":[],"parent":"5266d7e79e02c87a"},{"id":"cc14718e83de32c4","title":"无法处理浮动垃圾--&gt;Concurrent Mode Failure--&gt;Full GC","children":[{"id":"3e8de391a043da46","title":"在并发标记阶段由于程序的工作线程和垃圾收集线程是同时运行或者交叉运行的，那么在并发标记阶段如果产生新的垃圾对象，CMS将无法对这些垃圾对象进行标记，最终会导致这些新产生的垃圾对象没有被及时回收，从而只能在下一次执行GC时释放这些之前未被回收的内存空间。","children":[],"parent":"cc14718e83de32c4"}],"parent":"5266d7e79e02c87a"}],"parent":"9f23b3bba6406242"}]},{"id":"ae73fb7920057930","title":"CMS 参数配置","children":[{"id":"1496fe0403f32d2c","title":"-XX:+UseConcMarkSweepGC：手动指定使用CMS收集器执行内存回收任务。","parent":"ae73fb7920057930","children":[{"id":"714ae624199dddf6","title":"开启该参数后会自动将-XX:+UseParNewGC打开。即：ParNew（Young区）+CMS（Old区）+Serial Old（Old区备选方案）的组合。","children":[],"parent":"1496fe0403f32d2c"}]},{"id":"37bcdf37d2469bf2","title":"-XX:CMSInitiatingOccupanyFraction：设置堆内存使用率的阈值，一旦达到该阈值，便开始进行回收。","parent":"ae73fb7920057930","children":[{"id":"3add2da8cdd229fe","title":"JDK5及以前版本的默认值为68，即当老年代的空间使用率达到68%时，会执行一次CMS回收。JDK6及以上版本默认值为92%","children":[],"parent":"37bcdf37d2469bf2"},{"id":"e2ac8ae76a72f2f9","title":"如果内存增长缓慢，则可以设置一个稍大的值，大的阀值可以有效降低CMS的触发频率，减少老年代回收的次数可以较为明显地改善应用程序性能。","children":[],"parent":"37bcdf37d2469bf2"},{"id":"d12f5b0bf2012b74","title":"反之，如果应用程序内存使用率增长很快，则应该降低这个阈值，以避免频繁触发老年代串行收集器。因此通过该选项便可以有效降低Full GC的执行次数。","parent":"37bcdf37d2469bf2","children":[]}]},{"id":"bd8b42f7e0b71ee8","title":"-XX:+UseCMSCompactAtFullCollection：用于指定在执行完Full GC后对内存空间进行压缩整理，以此避免内存碎片的产生。不过由于内存压缩整理过程无法并发执行，所带来的问题就是停顿时间变得更长了。","parent":"ae73fb7920057930","children":[]},{"id":"fdda582f1a23e26a","title":"-XX:CMSFullGCsBeforeCompaction：设置执行多少次Full GC后对内存空间进行压缩整理","parent":"ae73fb7920057930","children":[]},{"id":"7936917e4d3b0b85","title":"-XX:ParallelCMSThreads：设置CMS的线程数","parent":"ae73fb7920057930","children":[]}],"parent":"42bddf8d928cdfd3"}],"parent":"14c35897071d66b4"},{"id":"5bd6a5c0d91dbc5a","title":"如何选择垃圾回收器？","children":[{"id":"f0cb976871c54ef7","title":"最小化地使用内存和并行开销：Serial GC","parent":"5bd6a5c0d91dbc5a","children":[]},{"id":"1f8f8c2e4e3c39e2","title":"最大化应用程序的吞吐量：Parallel Scavenge GC","children":[],"parent":"5bd6a5c0d91dbc5a"},{"id":"ae565f39c07c1e63","title":"最小化GC的中断或停顿时间：CMS&nbsp; GC","parent":"5bd6a5c0d91dbc5a","children":[]}],"parent":"14c35897071d66b4"},{"id":"d90c9b90cac8a246","title":"G1 回收器：区域化分代式（Garbage-First）复制算法、并行并发兼具、面向服务端","children":[{"id":"6c1e60b172e30edd","title":"目标：在延迟可控的情况下获得尽可能高的吞吐量","children":[],"parent":"d90c9b90cac8a246"},{"id":"faf8ca4c41de33cd","title":"并行性：G1在回收期间，可以有多个GC线程同时工作，有效利用多核计算能力。此时用户线程STW","children":[],"parent":"d90c9b90cac8a246"},{"id":"1d5eb4c68f821e8a","title":"并发性：G1拥有与应用程序交替执行的能力，部分工作可以和应用程序同时执行，因此，一般来说，不会在整个回收阶段发生完全阻塞应用程序的情况","children":[],"parent":"d90c9b90cac8a246"},{"id":"9243c4743ba6230e","title":"分代收集","children":[{"id":"b93af6137e9caf1d","title":"区分年轻代和老年代，年轻代依然有Eden区和Survivor区","image":{"w":446.5,"url":"https://cdn.processon.com/5ff57657e401fd661a197ec2?e=1609925735&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:Z_jj5Q4P7HE66fkPNjs8JvuBm3c=","h":250.5},"children":[],"parent":"9243c4743ba6230e"},{"id":"4e92a71bfa0e1deb","title":"但从堆的结构上看，它不要求整个Eden区、年轻代或者老年代都是物理连续的，也不再坚持固定大小和固定数量。","children":[],"parent":"9243c4743ba6230e","image":{"w":547.5,"h":182,"url":"https://cdn.processon.com/5ff5765d7d9c0805641a63fa?e=1609925742&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:6v8wJjas2WJk9kt_EBO-auUgJf0="}}],"parent":"d90c9b90cac8a246"},{"id":"09b0eaa06004b145","title":"可预测的停顿时间模型","parent":"d90c9b90cac8a246","children":[{"id":"5f552db941b46f88","title":"设定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。","children":[],"parent":"09b0eaa06004b145"},{"id":"3273d20e42f1d7a0","title":"G1可以只选取部分区域进行内存回收，这样缩小了回收的范围，因此对于全局停顿情况的发生也能得到较好的控制。","children":[],"parent":"09b0eaa06004b145"},{"id":"17d2b522eed3cee1","title":"G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region。保证了G1收集器在有限的时间内可以获取尽可能高的收集效率","children":[],"parent":"09b0eaa06004b145"}]},{"id":"7ca56983d18d9c01","title":"G1 回收器的缺点","parent":"d90c9b90cac8a246","children":[{"id":"bda39b64fd59fa86","title":"用户程序运行过程中，G1无论是为了垃圾收集产生的内存占用（Footprint）还是程序运行时的额外执行负载（overload）都要比CMS要高。","parent":"7ca56983d18d9c01","children":[]},{"id":"1c3e1b44d201045d","title":"从经验上来说，在小内存应用上CMS的表现大概率会优于G1，而G1在大内存应用上则发挥其优势。平衡点在6-8GB之间。","parent":"7ca56983d18d9c01","children":[]}]},{"id":"35e4e53c807a05f7","title":"G1 参数配置","parent":"d90c9b90cac8a246","children":[{"id":"71f5d0dcf3780bc0","title":"-XX:+UseG1GC：手动指定使用G1垃圾收集器执行内存回收任务","children":[],"parent":"35e4e53c807a05f7"},{"id":"b4818cbbd434039a","title":"-XX:G1HeapRegionSize：设置每个Region的大小","children":[{"id":"0f9148789b8858b4","title":"值是2的幂，范围是1MB到32MB之间，目标是根据最小的Java堆大小划分出约2048个区域。默认是堆内存的1/2000","children":[],"parent":"b4818cbbd434039a"}],"parent":"35e4e53c807a05f7"},{"id":"47c45da105d52c78","title":"-XX:MaxGCPauseMillis：设置期望达到的最大GC停顿时间指标，默认值：200ms","children":[],"parent":"35e4e53c807a05f7"},{"id":"69ce9ba85b1d0a55","title":"-XX:+ParallelGCThread：设置STW工作线程数。最多设置为8","parent":"35e4e53c807a05f7","children":[]},{"id":"8ce8a96c63d00bc6","title":"-XX:ConcGCThreads：设置并发标记的线程数","children":[{"id":"bfe10aab16ec4c98","title":"将n设置为并行垃圾回收线程数（ParallelGcThreads）的1/4左右","parent":"8ce8a96c63d00bc6","children":[]}],"parent":"35e4e53c807a05f7"},{"id":"88b5a67d8669a585","title":"-XX:InitiatingHeapOccupancyPercent：设置触发并发GC周期的Java堆占用率阈值","children":[{"id":"1a088832b4a18642","title":"超过此值，触发GC。默认值：45","parent":"88b5a67d8669a585","children":[]}],"parent":"35e4e53c807a05f7"}]},{"id":"0023dc65f46526fc","title":"G1 收集器的常见操作步骤","children":[{"id":"12b73873c1dd72f5","title":"G1的设计原则：简化JVM性能调优。开发人员只需要简单的三步即可完成调优","parent":"0023dc65f46526fc","children":[]},{"id":"28e45fe8403a2c99","title":"第一步：开启G1垃圾收集器","children":[],"parent":"0023dc65f46526fc"},{"id":"40890a9e276f76df","title":"第二步：设置堆的最大内存","children":[],"parent":"0023dc65f46526fc"},{"id":"0a6b30e70f796fb2","title":"第三步：设置最大的停顿时间","parent":"0023dc65f46526fc","children":[]}],"parent":"d90c9b90cac8a246"},{"id":"52f106bcf5f1cce5","title":"G1收集器的适用场景","children":[{"id":"19accb93fd2631e7","title":"面向服务端应用，针对具有大内存、多处理器的机器","children":[],"parent":"52f106bcf5f1cce5"},{"id":"6e1b6a51c8393b1d","title":"要低GC延迟，并具有大堆的应用程序提供解决方案","parent":"52f106bcf5f1cce5","children":[{"id":"33a773a2741e5147","title":"在堆大小约6GB或更大时，可预测的暂停时间可以低于0.5秒；（G1通过每次只清理一部分而不是全部的Region的增量式清理来保证每次GC停顿时间不会过长）","parent":"6e1b6a51c8393b1d","children":[]}]},{"id":"677bc31efc048774","title":"用来替换掉JDK1.5中的CMS收集器；在下面的情况时，使用G1可能比CMS好","children":[{"id":"23c76eb9458e9915","title":"超过50%的Java堆被活动数据占用","parent":"677bc31efc048774","children":[]},{"id":"93fcd96747683e95","title":"对象分配频率或年代提升频率变化很大","children":[],"parent":"677bc31efc048774"},{"id":"3647aaf98c087664","title":"GC停顿时间过长（长于0.5至1秒）","parent":"677bc31efc048774","children":[]}],"parent":"52f106bcf5f1cce5"},{"id":"cf5e705434a678fe","title":"HotSpot垃圾收集器里，除了G1以外，其他的垃圾收集器均使用内置的JVM线程执行GC的多线程操作，而G1 GC可以采用应用线程承担后台运行的GC工作，即当JVM的GC线程处理速度慢时，系统会调用应用程序线程帮助加速垃圾回收过程","children":[],"parent":"52f106bcf5f1cce5"}],"parent":"d90c9b90cac8a246"},{"id":"2e410590d62e9da4","title":"分区 Region：化整为零","parent":"d90c9b90cac8a246","children":[{"id":"94511aea6dcefed0","title":"使用G1收集器时，它将整个Java堆划分成约2048个大小相同的独立Region块，每个Region块大小根据堆空间的实际大小而定，整体被控制在1MB到32MB之间，且为2的N次幂，即1MB，2MB，4MB，8MB，16MB，32MB。可以通过","children":[],"parent":"2e410590d62e9da4"},{"id":"a80c26c76b68efdf","title":"XX:G1HeapRegionSize设定。所有的Region大小相同，且在JVM生命周期内不会被改变。","children":[],"parent":"2e410590d62e9da4"},{"id":"7ae7ae10c5d52a94","title":"虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合。通过Region的动态分配方式实现逻辑上的连续。","children":[],"parent":"2e410590d62e9da4"},{"id":"287d4e2b44293cb6","title":"一个Region有可能属于Eden，Survivor或者Old/Tenured内存区域。但是一个Region只可能属于一个角色。图中的E表示该Region属于Eden内存区域，S表示属于Survivor内存区域，O表示属于Old内存区域。图中空白的表示未使用的内存空间。","children":[],"parent":"2e410590d62e9da4"},{"id":"45fea0dc6b3357e7","title":"G1垃圾收集器还增加了一种新的内存区域，叫做Humongous内存区域，如图中的H块。主要用于存储大对象，如果超过0.5个Region，就放到H。","parent":"2e410590d62e9da4","children":[{"id":"9a0bad0118910ee8","title":"设置 H 的原因","parent":"45fea0dc6b3357e7","children":[]},{"id":"05fea5f87af19b42","title":"对于堆中的大对象，默认直接会被分配到老年代，但是如果它是一个短期存在的大对象就会对垃圾收集器造成负面影响。","children":[],"parent":"45fea0dc6b3357e7"},{"id":"d6ff651762a6d9d6","title":"为了解决这个问题，G1划分了一个Humongous区，它用来专门存放大对象。","children":[],"parent":"45fea0dc6b3357e7"},{"id":"da6e192202cd4192","title":"如果一个H区装不下一个大对象，那么G1会寻找连续的H区来存储。为了能找到连续的H区，有时候不得不启动Full GC。G1的大多数行为都把H区作为老年代的一部分来看待。","children":[],"parent":"45fea0dc6b3357e7"}]},{"id":"e59c0de2d8fd6cbb","title":"Region的内部结构","children":[{"id":"f96aaad413632c2e","title":"每个Region都是通过指针碰撞来分配空间","children":[],"parent":"e59c0de2d8fd6cbb"},{"id":"8e7aa04f64be29cd","title":"每个Region都有TLAB，提高对象分配的效率","parent":"e59c0de2d8fd6cbb","children":[]}],"parent":"2e410590d62e9da4","image":{"w":565,"h":254,"url":"https://cdn.processon.com/5ff57bf407912930e01e8c0e?e=1609927172&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:UkhvWzA4R2ukBCrew7doIVZijWc="}}],"image":{"w":602,"h":209,"url":"https://cdn.processon.com/5ff57b80e401fd661a19a61c?e=1609927057&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:IcJ6RV2T3TBtKTns0-3IN-OhpQU="}},{"id":"f333f755ae4ca3c9","title":"G1 垃圾回收流程","children":[{"id":"49c13ac8465a71e5","title":"G1 GC的垃圾回收过程主要包括如下三个环节","parent":"f333f755ae4ca3c9","children":[]},{"id":"e129ca3ac7a5a097","title":"年轻代GC（Young GC）","image":{"w":593,"url":"https://cdn.processon.com/5ff57e5207912930e01e99a3?e=1609927778&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:nVN9RdJEwIu3uVh_dAqeKjMPcAY=","h":369},"parent":"f333f755ae4ca3c9","children":[{"id":"c226c3a53d30ce0b","title":"JVM启动时，G1先准备好Eden区，程序在运行过程中不断创建对象到Eden区，当Eden空间耗尽时，G1会启动一次年轻代垃圾回收过程。","parent":"e129ca3ac7a5a097","children":[]},{"id":"482caf5d0d89823b","title":"YGC时，首先G1停止应用程序的执行（Stop-The-World），G1创建回收集（Collection Set），回收集是指需要被回收的内存分段的集合，年轻代回收过程的回收集包含年轻代Eden区和Survivor区所有的内存分段。","parent":"e129ca3ac7a5a097","children":[]},{"id":"8671de4f577f6b5a","title":"然后开始如下回收过程","parent":"e129ca3ac7a5a097","children":[{"id":"3b6de40f62ae0191","title":"第一阶段，扫描根","parent":"8671de4f577f6b5a","children":[{"id":"4d926b82b8c3c10b","title":"根是指static变量指向的对象，正在执行的方法调用链条上的局部变量等","parent":"3b6de40f62ae0191","children":[]},{"id":"01edecd5498a5c0b","title":"根引用连同RSet记录的外部引用作为扫描存活对象的入口","children":[],"parent":"3b6de40f62ae0191"}]},{"id":"9366427b277bbf9d","title":"第二阶段，更新RSet","children":[{"id":"27fce13411865169","title":"处理dirty card queue（见备注）中的card，更新RSet。","children":[],"parent":"9366427b277bbf9d"},{"id":"6602792b9b697134","title":"此阶段完成后，RSet可以准确的反映老年代对所在的内存分段中对象的引用。","children":[],"parent":"9366427b277bbf9d"}],"parent":"8671de4f577f6b5a"},{"id":"709d9092d77c813e","title":"第三阶段，处理RSet","children":[{"id":"fc1d0fd18df2db89","title":"识别被老年代对象指向的Eden中的对象，这些被指向的Eden中的对象被认为是存活的对象。","parent":"709d9092d77c813e","children":[]}],"parent":"8671de4f577f6b5a"},{"id":"df3ad56519c330ed","title":"第四阶段，复制对象","parent":"8671de4f577f6b5a","children":[{"id":"20cf588524c50c0f","title":"此阶段，对象树被遍历，Eden区内存段中存活的对象会被复制到Survivor区中空的内存分段，Survivor区内存段中存活的对象","children":[],"parent":"df3ad56519c330ed"},{"id":"2f2b7c01daf3a8a2","title":"如果年龄未达阈值，年龄会加1，达到阀值会被会被复制到Old区中空的内存分段。","children":[],"parent":"df3ad56519c330ed"},{"id":"6a46f85ea0e25b9a","title":"如果Survivor空间不够，Eden空间的部分数据会直接晋升到老年代空间。","children":[],"parent":"df3ad56519c330ed"}]},{"id":"6cd72f16c4a51e78","title":"第五阶段，处理引用","children":[{"id":"3f1f3faad74cdbef","title":"处理Soft，Weak，Phantom，Final，JNI Weak 等引用。最终Eden空间的数据为空，GC停止工作，而目标内存中的对象都是连续存储的，没有碎片，所以复制过程可以达到内存整理的效果，减少碎片。","parent":"6cd72f16c4a51e78","children":[]}],"parent":"8671de4f577f6b5a"}]},{"id":"9efe47a6e3b44e0e","title":"备注","parent":"e129ca3ac7a5a097","children":[{"id":"825f79ca53224bf8","title":"对于应用程序的引用赋值语句 oldObject.field=new Object()，JVM会在之前和之后执行特殊的操作以在dirty card queue中入队一个保存了对象引用信息的card。","parent":"9efe47a6e3b44e0e","children":[]},{"id":"a6785b10daa8b8f7","title":"在年轻代回收的时候，G1会对Dirty Card Queue中所有的card进行处理，以更新RSet，保证RSet实时准确的反映引用关系。","children":[],"parent":"9efe47a6e3b44e0e"},{"id":"6d555d55175dec4c","title":"那为什么不在引用赋值语句处直接更新RSet呢？这是为了性能的需要，RSet的处理需要线程同步，开销会很大，使用队列性能会好很多。","parent":"9efe47a6e3b44e0e","children":[]}]}]},{"id":"5e42919d050bad62","title":"老年代并发标记过程（Concurrent Marking）","children":[{"id":"b74382ebaee3a60c","title":"初始标记阶段","parent":"5e42919d050bad62","children":[{"id":"ed2edfd0d8bf5dd1","title":"标记从根节点直接可达的对象。这个阶段是STW的，并且会触发一次年轻代GC","parent":"b74382ebaee3a60c","children":[]},{"id":"750337f7ed38b5a1","title":"正是由于该阶段时STW的，所以我们只扫描根节点可达的对象，以节省时间","children":[],"parent":"b74382ebaee3a60c"}]},{"id":"18479b390fcda8ef","title":"根区域扫描（Root Region Scanning）","parent":"5e42919d050bad62","children":[{"id":"e3a499c0ee2b4e5c","title":"G1 GC扫描Survivor区直接可达的老年代区域对象，并标记被引用的对象","children":[],"parent":"18479b390fcda8ef"},{"id":"3933269d29299bf3","title":"这一过程必须在Young GC之前完成，因Young GC会使用复制算法对Survivor区进行GC","children":[],"parent":"18479b390fcda8ef"}]},{"id":"3c35f43107629fe0","title":"并发标记（Concurrent Marking）","children":[{"id":"1d90db1b09ca1118","title":"在整个堆中进行并发标记（和应用程序并发执行），此过程可能被Young GC中断","parent":"3c35f43107629fe0","children":[]},{"id":"6a89cbaea0b49be3","title":"在并发标记阶段，若发现区域对象中的所有对象都是垃圾，那这个区域会被立即回收","children":[],"parent":"3c35f43107629fe0"},{"id":"d7fd48dc4299acd3","title":"同时，并发标记过程中，会计算每个区域的对象活性（区域中存活对象的比例）","parent":"3c35f43107629fe0","children":[]}],"parent":"5e42919d050bad62"},{"id":"89cf6fc0083bd19d","title":"重新标记（Remark）","parent":"5e42919d050bad62","children":[{"id":"82b11ee21c59ef06","title":"由于应用程序持续进行，需要修正上一次的标记结果。STW","children":[],"parent":"89cf6fc0083bd19d"},{"id":"b4ecc78b633d79c2","title":"G1中采用了比CMS更快的初始快照算法：Snapshot-At-The-Beginning（SATB）","parent":"89cf6fc0083bd19d","children":[]}]},{"id":"29b58b5c87c807ea","title":"独占清理（cleanup，STW）","children":[{"id":"12e8e3509f9ba866","title":"计算各个区域的存活对象和GC回收比例，并进行排序，识别可以混合回收的区域","parent":"29b58b5c87c807ea","children":[]},{"id":"587109f814d6d6b9","title":"为下阶段做铺垫。是STW的。这个阶段并不会实际上去做垃圾的收集","children":[],"parent":"29b58b5c87c807ea"}],"parent":"5e42919d050bad62"},{"id":"90e9a1002274271e","title":"并发清理阶段","children":[{"id":"9affb4352d9ca98e","title":"识别并清理完全空闲的区域","parent":"90e9a1002274271e","children":[]}],"parent":"5e42919d050bad62"}],"parent":"f333f755ae4ca3c9"},{"id":"c667b236f371a8e6","title":"混合回收过程（Mixed GC）","image":{"w":489,"url":"https://cdn.processon.com/5ff6676c1e08531de8217349?e=1609987452&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:_HH3t83Y03uxmnXkqYGrWC097-0=","h":399},"children":[{"id":"bdeca5ecaee49f38","title":"当越来越多的对象晋升到老年代Old Region时，为了避免堆内存被耗尽，虚拟机会触发一个混合的垃圾收集器，即Mixed GC，该算法并不是一个Old GC，除了回收整个Young Region，还会回收一部分的Old Region","parent":"c667b236f371a8e6","children":[]},{"id":"4192d04d3a546bdb","title":"这里需要注意：是一部分老年代，而不是全部老年代。可以选择哪些Old Region进行收集，从而可以对垃圾回收的耗时时间进行控制。也要注意的是Mixed GC并不是Full GC","children":[],"parent":"c667b236f371a8e6"},{"id":"d8312a77d6ec86db","title":"混合回收细节","children":[{"id":"0783c7260b90d115","title":"并发标记结束以后，老年代中百分百为垃圾的内存分段被回收了，部分为垃圾的内存分段被计算出来","parent":"d8312a77d6ec86db","children":[]},{"id":"55ec0159223f1b0a","title":"默认情况下，这些老年代的内存分段会分8次（可以通过-XX:G1MixedGCCountTarget设置）被回收","parent":"d8312a77d6ec86db","children":[]},{"id":"d2bdec851346f5b9","title":"混合回收的回收集（Collection Set）包括八分之一的老年代内存分段，Eden区内存分段，Survivor区内存分段。混合回收的算法和年轻代回收的算法完全一样，只是回收集多了老年代的内存分段。具体过程请参考上面的年轻代回收过程","parent":"d8312a77d6ec86db","children":[]},{"id":"1e9fe970c6ce06e0","title":"由于老年代中的内存分段默认分8次回收，G1会优先回收垃圾多的内存分段。垃圾占内存分段比例越高的，越会被先回收。并且有一个阈值会决定内存分段是否被回收","parent":"d8312a77d6ec86db","children":[]},{"id":"9684478d7b061da9","title":"XX:G1MixedGCLiveThresholdPercent，默认65%，意思是垃圾占内存分段比例要达到65%才会被回收。如果垃圾占比太低，意味着存活的对象占比高，在复制的时候会花费更多的时间","parent":"d8312a77d6ec86db","children":[]},{"id":"a64c54c810ca56fe","title":"混合回收并不一定要进行8次。有一个阈值-XX:G1HeapWastePercent，默认值为10%，意思是允许整个堆内存中有10%的空间被浪费，意味着如果发现可以回收的垃圾占堆内存的比例低于10%，则不再进行混合回收。因为GC会花费很多的时间但回收到的内存却很少","children":[],"parent":"d8312a77d6ec86db"}],"parent":"c667b236f371a8e6"}],"parent":"f333f755ae4ca3c9"},{"id":"18217a0ab7bafcb9","title":"（如果需要，单线程、独占式、高强度的Full GC还是继续存在的。它针对GC的评估失败提供了一种失败保护机制，即强力回收。）","parent":"f333f755ae4ca3c9","children":[]},{"id":"bfcb6421295edf20","title":"顺时针，Young GC --&gt; Young GC+Concurrent Marking --&gt; Mixed GC，进行垃圾回收","parent":"f333f755ae4ca3c9","children":[],"image":{"w":573,"h":204,"url":"https://cdn.processon.com/5ff57c515653bb4ea20e9926?e=1609927265&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:t_o0g3gu6goEmlSf3-iuAkHZ0eY="}},{"id":"216451e67ee9aac5","title":"大致的回收流程","children":[{"id":"1f01587d8b029956","title":"应用程序分配内存，当年轻代的Eden区用尽时开始年轻代回收过程；G1的年轻代收集阶段是一个并行的独占式收集器。","children":[],"parent":"216451e67ee9aac5"},{"id":"a05bcd78d4a44fc0","title":"在年轻代回收期，G1 GC暂停所有应用程序线程，启动多线程执行年轻代回收。然后从年轻代区间移动存活对象到Survivor区间或者老年区间，也有可能是两个区间都会涉及。","parent":"216451e67ee9aac5","children":[]},{"id":"01051096d248d82c","title":"当堆内存使用达到一定值（默认45%）时，开始老年代并发标记过程。标记完成马上开始混合回收过程。","parent":"216451e67ee9aac5","children":[]},{"id":"b64849ba3e5a4b38","title":"对于一个混合回收期，G1 GC从老年区间移动存活对象到空闲区间，这些空闲区间也就成为了老年代的一部分。","parent":"216451e67ee9aac5","children":[]},{"id":"d60cdff38261954d","title":"和年轻代不同，老年代的G1回收器和其他GC不同，G1的老年代回收器不需要整个老年代被回收，一次只需要扫描/回收一小部分老年代的Region就可以了。同时，这个老年代Region是和年轻代一起被回收的。","parent":"216451e67ee9aac5","children":[]},{"id":"b1d8fd77983fa5fc","title":"举个例子：一个Web服务器，Java进程最大堆内存为4G，每分钟响应1500个请求，每45秒钟会新分配大约2G的内存。G1会每45秒钟进行一次年轻代回收，每31个小时整个堆的使用率会达到45%，会开始老年代并发标记过程，标记完成后开始四到五次的混合回收。","parent":"216451e67ee9aac5","children":[]}],"parent":"f333f755ae4ca3c9"},{"id":"dc0484b12e5a99d8","title":"G1 回收器垃圾回收过程：Remembered Set（记忆集）","parent":"f333f755ae4ca3c9","children":[{"id":"648855e4c9d44997","title":"存在问题","children":[{"id":"6e71c29a527f7c37","title":"一个对象被不同区域引用的问题","parent":"648855e4c9d44997","children":[]},{"id":"efe1fabb5a334b9f","title":"一个Region不可能是孤立的，一个Region中的对象可能被其他任意Region中对象引用，判断对象存活时，是否需要扫描整个Java堆才能保证准确？","parent":"648855e4c9d44997","children":[]},{"id":"350ce9c3eb68b3f5","title":"在其他的分代收集器，也存在这样的问题（而G1更突出，因为G1主要针对大堆）","children":[],"parent":"648855e4c9d44997"},{"id":"e96e090a33071b2f","title":"回收新生代也不得不同时扫描老年代？这样的话会降低Minor GC的效率","children":[],"parent":"648855e4c9d44997"}],"parent":"dc0484b12e5a99d8"},{"id":"6c9bc25e4fd757a7","title":"解决方法","parent":"dc0484b12e5a99d8","children":[{"id":"27e49d95f590e29f","title":"无论G1还是其他分代收集器，JVM都是使用Remembered Set来避免全局扫描","parent":"6c9bc25e4fd757a7","children":[]},{"id":"45035c7e19afca7f","title":"每个Region都有一个对应的Remembered Set","parent":"6c9bc25e4fd757a7","children":[]},{"id":"c86c940b41edb9ba","title":"每次Reference类型数据写操作时，都会产生一个Write Barrier暂时中断操作","parent":"6c9bc25e4fd757a7","children":[]},{"id":"e5c75c86dfff1e63","title":"然后检查将要写入的引用指向的对象是否和该Reference类型数据在不同的Region（其他收集器：检查老年代对象是否引用了新生代对象）","parent":"6c9bc25e4fd757a7","children":[]},{"id":"3df604f80597e381","title":"如果不同，通过CardTable把相关引用信息记录到引用指向对象的所在Region对应的Remembered Set中","parent":"6c9bc25e4fd757a7","children":[]},{"id":"1537c249790b1a69","title":"当进行垃圾收集时，在GC根节点的枚举范围加入Remembered Set；就可以保证不进行全局扫描，也不会有遗漏","children":[],"parent":"6c9bc25e4fd757a7"}]}]},{"id":"e14462ae0d1f2582","title":"总结","parent":"f333f755ae4ca3c9","children":[{"id":"757e2f15f960cf35","title":"在回收 Region 时，为了不进行全堆的扫描，引入了 Remembered Set","parent":"e14462ae0d1f2582","children":[]},{"id":"fcc903d30eabeb65","title":"Remembered Set 记录了当前 Region 中的对象被哪个对象引用了","parent":"e14462ae0d1f2582","children":[]},{"id":"b78e34eef0eae286","title":"这样在进行 Region 复制时，就不要扫描整个堆，只需要去 Remembered Set 里面找到引用了当前 Region 的对象","parent":"e14462ae0d1f2582","children":[]},{"id":"c9c0bb843f85b88f","title":"Region 复制完毕后，修改 Remembered Set 中对象的引用即可","children":[],"parent":"e14462ae0d1f2582"}],"image":{"w":636,"h":211,"url":"https://cdn.processon.com/5ff57e1ce0b34d34e13272a8?e=1609927724&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:QGbkJgmrrziR-cqIERiyiP7zAvA="}},{"id":"67d84381df285bb0","title":"G1 的注意事项","parent":"f333f755ae4ca3c9","children":[{"id":"89c9bb9d1f79efff","title":"G1 回收可选的过程四：Full GC","children":[{"id":"1da65e3d09bf208a","title":"G1的初衷就是要避免Full GC的出现。但是如果上述方式不能正常工作，G1会停止应用程序的执行（Stop-The-World），使用单线程的内存回收算法进行垃圾回收，性能会非常差，应用程序停顿时间会很长","children":[],"parent":"89c9bb9d1f79efff"},{"id":"55fe15de6182e62a","title":"要避免Full GC的发生，一旦发生Full GC，需要对JVM参数进行调整。什么时候会发生Ful1GC呢？比如堆内存太小，当G1在复制存活对象的时候没有空的内存分段可用，则会回退到Full GC，这种情况可以通过增大内存来解决","parent":"89c9bb9d1f79efff","children":[]}],"parent":"67d84381df285bb0"},{"id":"4740483a7704a11a","title":"导致G1 Full GC的原因可能有两个","children":[{"id":"1061eb594e3f192b","title":"回收Evacuation的时候没有足够的to-space来存放晋升的对象","children":[],"parent":"4740483a7704a11a"},{"id":"a9fce34732b43c44","title":"并发处理过程完成之前空间耗尽","parent":"4740483a7704a11a","children":[]}],"parent":"67d84381df285bb0"},{"id":"f1756612b281d5a5","title":"G1 回收器的补充","parent":"67d84381df285bb0","children":[{"id":"870ca5e694f9be46","title":"从Oracle官方透露出来的信息可获知，回收阶段（Evacuation）其实本也有想过设计成与用户程序一起并发执行，但这件事情做起来比较复杂，考虑到G1只是回一部分Region，停顿时间是用户可控制的，所以并不迫切去实现，而选择把这个特性放到了G1之后出现的低延迟垃圾收集器（即ZGC）中","children":[],"parent":"f1756612b281d5a5"},{"id":"3607f51e2fb8b53b","title":"另外，还考虑到G1不是仅仅面向低延迟，停顿用户线程能够最大幅度提高垃圾收集效率，为了保证吞吐量所以才选择了完全暂停用户线程的实现方案","parent":"f1756612b281d5a5","children":[]}]},{"id":"546035b559376dd6","title":"G1 回收器的优化建议","parent":"67d84381df285bb0","children":[{"id":"7ca6cab88a2bc1c1","title":"年轻代大小","parent":"546035b559376dd6","children":[{"id":"625b11059f4fd453","title":"避免使用-Xmn或-XX:NewRatio等相关选项显式设置年轻代大小","children":[],"parent":"7ca6cab88a2bc1c1"},{"id":"b022407c4164d3ba","title":"固定年轻代的大小会覆盖暂停时间目标","children":[],"parent":"7ca6cab88a2bc1c1"}]},{"id":"e698dda072f27ffa","title":"暂停时间目标不要太过严苛","children":[{"id":"442830b294293e34","title":"G1 GC的吞吐量目标是90%的应用程序时间和10%的垃圾回收时间","parent":"e698dda072f27ffa","children":[]},{"id":"51001f001ee27c6f","title":"评估G1 GC的吞吐量时，暂停时间目标不要太严苛。目标太过严苛表示你愿意承受更多的垃圾回收开销，而这些会直接影响到吞吐量","children":[],"parent":"e698dda072f27ffa"}],"parent":"546035b559376dd6"}]}]}],"parent":"d90c9b90cac8a246"}],"parent":"14c35897071d66b4","collapsed":false},{"id":"0cfe51903272","title":"新生代垃圾回收器和老年代垃圾回收器都有哪些？有什么区别？","style":{"font-weight":"bold"},"children":[{"id":"67077181c09b","title":"新生代回收器：Serial、ParNew、Parallel Scavenge","children":[{"id":"26e3af176301","title":"采用：复制算法，优点：效率高，缺点：内存利用率低（to区永远是空）；适用生命周期短的对象收集","children":[],"parent":"67077181c09b"}],"parent":"0cfe51903272"},{"id":"d527fd8a283a","title":"老年代回收器：Serial Old、Parallel Old、CMS<br>","children":[{"id":"309dc7f19c62","title":"采用：标记-清除-压缩算法","children":[],"parent":"d527fd8a283a"}],"parent":"0cfe51903272"},{"id":"529b192af11b","title":"整堆回收器：G1<br>","children":[],"parent":"0cfe51903272"}],"parent":"14c35897071d66b4","icons":[{"index":"9","text":"&#xe6c6","color":"rgb(51, 51, 51)","name":"face"}]},{"id":"2ed84df09c397ba3","title":"垃圾回收器总结","children":[{"id":"cda6f8cfa2c2aad9","title":"7 种垃圾回收器的比较","image":{"w":640,"url":"https://cdn.processon.com/5ff66d01f346fb340decb8ec?e=1609988881&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:rmo0T-8Ammu7Q-ce6ORyB9r8rEU=","h":173},"children":[],"parent":"2ed84df09c397ba3"},{"id":"8498e93aac2011cd","title":"怎么选择垃圾回收器？","children":[{"id":"759a954362bf6bd6","title":"优先调整堆的大小让JVM自适应完成","children":[],"parent":"8498e93aac2011cd"},{"id":"de6ab0168a875272","title":"如果内存小于100M，使用串行收集器","children":[],"parent":"8498e93aac2011cd"},{"id":"84b700df14be284a","title":"如果是单核、单机程序，并且没有停顿时间的要求，串行收集器","children":[],"parent":"8498e93aac2011cd"},{"id":"08f9c85c6ca4e03a","title":"如果是多CPU、需要高吞吐量、允许停顿时间超过1秒，选择并行或者JVM自己选择","children":[],"parent":"8498e93aac2011cd"},{"id":"7ec65535075b2286","title":"如果是多CPU、追求低停顿时间，需快速响应（比如延迟不能超过1秒，如互联网应用），使用并发收集器","children":[],"parent":"8498e93aac2011cd"},{"id":"b2a0413bbcd5a464","title":"官方推荐G1，性能高。现在互联网的项目，基本都是使用G1","parent":"8498e93aac2011cd","children":[]}],"parent":"2ed84df09c397ba3"},{"id":"c6b11efc77a8a74e","title":"调优永远是针对特定场景、特定需求，不存在一劳永逸的收集器","parent":"2ed84df09c397ba3","children":[]}],"parent":"14c35897071d66b4","collapsed":false},{"id":"34ec5a8aff6e8d43","title":"GC 日志分析","children":[{"id":"47cce76d1e0dbaa5","title":"GC 日志参数设置：通过阅读GC日志，我们可以了解Java虚拟机内存分配与回收策略","parent":"34ec5a8aff6e8d43","children":[]},{"id":"4c3c31b31600721a","title":"内存分配与垃圾回收的参数列表","children":[{"id":"80785912165b4296","title":"-XX:+PrintGC ：输出GC日志，类似：-verbose:gc","children":[{"id":"c517b539d958f008","title":"输出信息","children":[],"parent":"80785912165b4296","image":{"w":668,"h":59.5,"url":"https://cdn.processon.com/5ff67388f346fb340decdc0e?e=1609990553&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:0q7QsAjcY1Ij6MMM5UXj6y3HEx0="}},{"id":"961eb574d1e8c7b0","title":"参数解析","parent":"80785912165b4296","children":[],"image":{"w":668,"h":111.5,"url":"https://cdn.processon.com/5ff673967d9c0805641c0af5?e=1609990566&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:z2qJQDuI33wTTTeNXX_b9WIPiSY="}}],"parent":"4c3c31b31600721a"},{"id":"306ec175c6f509ce","title":"-XX:+PrintGCDetails ：输出GC的详细日志","parent":"4c3c31b31600721a","children":[{"id":"206b76875d6d44a2","title":"输出信息","image":{"w":668,"url":"https://cdn.processon.com/5ff673b71e08531de821b210?e=1609990600&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:tg9AwXSgnQfsz7L7EVZJwIedttQ=","h":100.5},"children":[],"parent":"306ec175c6f509ce"},{"id":"a932381d00dea441","title":"参数解析","image":{"w":667.5,"url":"https://cdn.processon.com/5ff673c0e0b34d34e133e4fb?e=1609990609&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:Rvxo8NWUdkPBeeMZjtP7ISq6zWw=","h":131},"children":[],"parent":"306ec175c6f509ce"}]},{"id":"ae82e52f26618ce2","title":"-XX:+PrintGCTimestamps ：输出GC的时间戳（以基准时间的形式）","children":[],"parent":"4c3c31b31600721a"},{"id":"7413c23f0344ce1d","title":"-XX:+PrintGCDatestamps ：输出GC的时间戳","children":[{"id":"c61dab9f95b6eb89","title":"以日期的形式，如2013-05-04T21: 53: 59.234 +0800","children":[],"parent":"7413c23f0344ce1d"},{"id":"f52cb6200ca2b1be","title":"输出信息（日志带上了日期和时间）","children":[],"parent":"7413c23f0344ce1d","image":{"w":667,"h":195,"url":"https://cdn.processon.com/5ff673dff346fb340decde2b?e=1609990640&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:vO-FcroNeBR5I8_SA0a_dHVBUyI="}}],"parent":"4c3c31b31600721a"},{"id":"afa117a1ab795a4f","title":"-XX:+PrintHeapAtGC ：在进行GC的前后打印出堆的信息","parent":"4c3c31b31600721a","children":[]},{"id":"cdf739dbdb948377","title":"-XLoggc:./Logs/gc.Log：日志文件的输出路径","children":[{"id":"22364f554641712a","title":"./ 表示当前目录，在 IDEA中程序运行的当前目录是工程的根目录，而不是模块的根目录","children":[],"parent":"cdf739dbdb948377"}],"parent":"4c3c31b31600721a"}],"parent":"34ec5a8aff6e8d43"},{"id":"52e189954e4332d5","title":"日志分析的补充说明","children":[{"id":"8b52899fa323a79a","title":"“[GC\"和”[Full GC\"说明了这次垃圾收集的停顿类型，如果有\"Full\"则说明GC发生了STW","parent":"52e189954e4332d5","children":[]},{"id":"bb582f0015e307b8","title":"使用Serial收集器在新生代的名字是Default New Generation，因此显示的是\"[DefNew\"","children":[],"parent":"52e189954e4332d5"},{"id":"518df39361020e11","title":"使用ParNew收集器在新生代的名字会变成\"[ParNew\"，意思是\"Parallel New Generation\"","children":[],"parent":"52e189954e4332d5"},{"id":"f0d6a0e155775ef0","title":"使用Parallel scavenge收集器在新生代的名字是”[PSYoungGen\"","parent":"52e189954e4332d5","children":[]},{"id":"2592bad41d43c90f","title":"老年代的收集和新生代道理一样，名字也是收集器决定的","parent":"52e189954e4332d5","children":[]},{"id":"7914a66eeada5934","title":"使用G1收集器的话，会显示为\"garbage-first heap\"","parent":"52e189954e4332d5","children":[]},{"id":"29c416bc13901271","title":"Allocation Failure表明本次引起GC的原因是在年轻代中没有足够的空间能够存储新的数据","parent":"52e189954e4332d5","children":[]},{"id":"eeefb7705f365a0c","title":"[ PSYoungGen: 5986K-&gt;696K(8704K) ] 5986K-&gt;704K (9216K)","parent":"52e189954e4332d5","children":[{"id":"9b61e8919ae3c652","title":"中括号内：GC回收前年轻代大小，回收后大小，（年轻代总大小）","children":[],"parent":"eeefb7705f365a0c"},{"id":"e4fe19aad53f66b6","title":"括号外：GC回收前年轻代和老年代大小，回收后大小，（年轻代和老年代总大小）","children":[],"parent":"eeefb7705f365a0c"}]},{"id":"a88b787096b69341","title":"user代表用户态回收耗时，sys内核态回收耗时，real实际耗时。由于多核线程切换的原因，时间总和可能会超过real时间","children":[],"parent":"52e189954e4332d5"}],"parent":"34ec5a8aff6e8d43"},{"id":"8c5faa13bf75446e","title":"Young GC 图例","children":[],"parent":"34ec5a8aff6e8d43","image":{"w":641,"h":205,"url":"https://cdn.processon.com/5ff674edf346fb340dece4c6?e=1609990909&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:NO9qsMcOZVWdtpRlfvVjUmPQEvQ="}},{"id":"9f4539d4e90068c8","title":"Full GC 图例","children":[],"parent":"34ec5a8aff6e8d43","image":{"w":670,"h":169,"url":"https://cdn.processon.com/5ff674ff07912930e0200fa3?e=1609990928&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:U9PMIiba1vX2ZBCTefyEmTtYWQA="}},{"id":"b4142708ce66a433","title":"日志分析工具","children":[{"id":"d3207f91904f0668","title":"GCViewer","parent":"b4142708ce66a433","children":[]},{"id":"fae6e689586c150f","title":"GCEasy","children":[],"parent":"b4142708ce66a433"}],"parent":"34ec5a8aff6e8d43"}],"parent":"14c35897071d66b4"},{"id":"005292fd7972a257","title":"面试","parent":"14c35897071d66b4","children":[{"id":"9a4d7f1b29cba1ed","title":"对于垃圾收集，面试官可以循序渐进从理论、实践各种角度深入，也未必是要求面试者什么都懂。但如果你懂得原理，一定会成为面试中的加分项","children":[],"parent":"005292fd7972a257"},{"id":"edf6d70067a8d2b5","title":"较通用、基础性的部分","children":[{"id":"e5518db111023257","title":"垃圾收集的算法有哪些？","children":[],"parent":"edf6d70067a8d2b5"},{"id":"39f8f080278de8a6","title":"如何判断一个对象是否可以回收？","children":[],"parent":"edf6d70067a8d2b5"},{"id":"5cb14cc13d4e1360","title":"垃圾收集器工作的基本流程","parent":"edf6d70067a8d2b5","children":[]},{"id":"4a7effa77d0c1f29","title":"垃圾回收器各种常用参数","parent":"edf6d70067a8d2b5","children":[]}],"parent":"005292fd7972a257"}]}],"collapsed":true}]}},"meta":{"id":"60265618e401fd48f2a7639b","member":"5eda48ff7d9c0866361a7573","exportTime":"2021-05-03 14:30:02","diagramInfo":{"category":"mind_free","title":"JVM知识点导图","created":"2021-02-12 18:19:04","creator":"5eda48ff7d9c0866361a7573","modified":"2021-03-08 17:43:25"},"type":"ProcessOn Schema File","version":"1.0"}}